{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "cs109b_sec4.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "C3f3_gGXHViC",
        "BeRlscziOFqe",
        "vuVI0fRaOJ6V",
        "ZDLiUCnyPnS2",
        "C1WYSksuP710"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "bd7cb140373349a69733f7ba6dd3bb8e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_61006bc8418642718062850fd81aa2d0",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8eabe58784644ccdbef2c7961ef6556e",
              "IPY_MODEL_532e1c2641564a8b88e6eb18bf28c59b"
            ]
          }
        },
        "61006bc8418642718062850fd81aa2d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8eabe58784644ccdbef2c7961ef6556e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_33e69f2234a049f08f45e21314a9e423",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 231508,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 231508,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_b569d8ebb9304bf08e15e251d661490f"
          }
        },
        "532e1c2641564a8b88e6eb18bf28c59b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_038c3aba67dc4dd68016b977d8c40197",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 232k/232k [00:01&lt;00:00, 121kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_99fdf7e14c194e60946fc931621b3895"
          }
        },
        "33e69f2234a049f08f45e21314a9e423": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "b569d8ebb9304bf08e15e251d661490f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "038c3aba67dc4dd68016b977d8c40197": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "99fdf7e14c194e60946fc931621b3895": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b9dc69fb0a6141fdbccff664f4d08e07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_f14248c95e3247ccab31cf183ae1bae8",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f7ad52b889db496abb41efdd71028078",
              "IPY_MODEL_3833d2f4432147a9a222bde9c43bf7bf"
            ]
          }
        },
        "f14248c95e3247ccab31cf183ae1bae8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f7ad52b889db496abb41efdd71028078": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_2249013dbaf34391a3088f1a13172fb1",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 28,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 28,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_65f8f08dbc9c4562912656f5a1cb7f59"
          }
        },
        "3833d2f4432147a9a222bde9c43bf7bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_b646fd44a8e84852b0b553589be796e9",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 28.0/28.0 [00:00&lt;00:00, 34.9B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_83e07cc57cdf4a3f9ba9250608b1e7d7"
          }
        },
        "2249013dbaf34391a3088f1a13172fb1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "65f8f08dbc9c4562912656f5a1cb7f59": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b646fd44a8e84852b0b553589be796e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "83e07cc57cdf4a3f9ba9250608b1e7d7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a133466ab23d47e69723c5e69e7b6dc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_f4753c5cc4044edf8687c0f83e01a5fa",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_4198aad8bda64c5292ba1d1f4898e558",
              "IPY_MODEL_c048473f8b824b35b5233a79c21cbe64"
            ]
          }
        },
        "f4753c5cc4044edf8687c0f83e01a5fa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4198aad8bda64c5292ba1d1f4898e558": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3a9d70dfada345f2aa6dfa695fbaa9c4",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 466062,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 466062,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2ca90f05671b42558014716ed74fb1b3"
          }
        },
        "c048473f8b824b35b5233a79c21cbe64": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4b126bd709814154a6e30e8bb66c15d1",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 466k/466k [00:00&lt;00:00, 1.37MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_d4107fd782dc45e8af8dfb5df897d825"
          }
        },
        "3a9d70dfada345f2aa6dfa695fbaa9c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2ca90f05671b42558014716ed74fb1b3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4b126bd709814154a6e30e8bb66c15d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "d4107fd782dc45e8af8dfb5df897d825": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2014beb754014fee8260e23432510da6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_e923e9eab19246c59618a544f28b3000",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_d69abd44831944c8ac43a34a265bbe32",
              "IPY_MODEL_7fca96588a714ebcb929387dddf4e72a"
            ]
          }
        },
        "e923e9eab19246c59618a544f28b3000": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d69abd44831944c8ac43a34a265bbe32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_edc32e2fe3e54120b16daff1dcfa9080",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 433,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 433,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_2cbf77b0663f4958a987d25d9e56c8df"
          }
        },
        "7fca96588a714ebcb929387dddf4e72a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a2c242ce2de349a6b9ff8f865c55fe66",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 433/433 [00:09&lt;00:00, 44.1B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_94980c5bd53c463caedaad8d96f8bca9"
          }
        },
        "edc32e2fe3e54120b16daff1dcfa9080": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "2cbf77b0663f4958a987d25d9e56c8df": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a2c242ce2de349a6b9ff8f865c55fe66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "94980c5bd53c463caedaad8d96f8bca9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4d3dd3df54604f5c9f5cb1c777f1c72c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_df5b145e34c34f2ea2f64b282408254f",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_e5568d53c5f54bcf8d19c4c1f1127453",
              "IPY_MODEL_c6632a1004b64d718a8ce6cf05dbaee9"
            ]
          }
        },
        "df5b145e34c34f2ea2f64b282408254f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "e5568d53c5f54bcf8d19c4c1f1127453": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_9b18be7fda204fd680e1252cf9a08c3c",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 536063208,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 536063208,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_311f64ffde004a77ba85cc4ac9c5e466"
          }
        },
        "c6632a1004b64d718a8ce6cf05dbaee9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_6f4f56ce02b14d3080f91258af262656",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 536M/536M [00:09&lt;00:00, 56.3MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_da19c9339cf44b5789ce248c123b9f8f"
          }
        },
        "9b18be7fda204fd680e1252cf9a08c3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "311f64ffde004a77ba85cc4ac9c5e466": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6f4f56ce02b14d3080f91258af262656": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "da19c9339cf44b5789ce248c123b9f8f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c77a98ef39f54e469c4350ff5bb64dcd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_269cad2975b449138d31e724c337505d",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_af1cd47308be469387b46d962541d267",
              "IPY_MODEL_603f65912b4d44df9cdf01d0cc776949"
            ]
          }
        },
        "269cad2975b449138d31e724c337505d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "af1cd47308be469387b46d962541d267": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a1d58e683ecc4834810d6cbdc5892093",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1042301,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1042301,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_92b16fe604144d9cac8bbddf5bb84974"
          }
        },
        "603f65912b4d44df9cdf01d0cc776949": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_4bb9e163df894848b03fde6e9d4a59b3",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.04M/1.04M [00:01&lt;00:00, 798kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_51a19f20335c4cd6944cfe8ff5dcbd56"
          }
        },
        "a1d58e683ecc4834810d6cbdc5892093": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "92b16fe604144d9cac8bbddf5bb84974": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4bb9e163df894848b03fde6e9d4a59b3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "51a19f20335c4cd6944cfe8ff5dcbd56": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2331a7cf9ab54cba9e34917a231d8e78": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b7845d98dc4d4dc8a62f2ed237262490",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_88abfd2f5bba43e081ac196c3347b579",
              "IPY_MODEL_6babee1ec4be4c20b61b56e4e29937e9"
            ]
          }
        },
        "b7845d98dc4d4dc8a62f2ed237262490": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "88abfd2f5bba43e081ac196c3347b579": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_dac93ccc4576440ebd0f304a922327ae",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 456318,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 456318,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_92c9181ab17e45fd8b9290598e979ef4"
          }
        },
        "6babee1ec4be4c20b61b56e4e29937e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_7d54fd5fc8f94894be543152a4a5a30b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 456k/456k [00:01&lt;00:00, 251kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_725111193a6f4e9b87cba50cd126b140"
          }
        },
        "dac93ccc4576440ebd0f304a922327ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "92c9181ab17e45fd8b9290598e979ef4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "7d54fd5fc8f94894be543152a4a5a30b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "725111193a6f4e9b87cba50cd126b140": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a639875265a843129b34584fce44deaf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_d54a598740154e19ad9a143c048b6ecf",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_3d7bea6dcd0f4f64b084941d80d38bf6",
              "IPY_MODEL_d303ed373991459b92179ac216c88c2a"
            ]
          }
        },
        "d54a598740154e19ad9a143c048b6ecf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3d7bea6dcd0f4f64b084941d80d38bf6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e35774014588425c80c7bff9c7ffe974",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1355256,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1355256,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_dc9d367a162e4845bc5ab1d5640b11a7"
          }
        },
        "d303ed373991459b92179ac216c88c2a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_383e24511f65467dbccb693a06567b8a",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 3.07MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_51207f89f8694a86ab8d0773f46526ee"
          }
        },
        "e35774014588425c80c7bff9c7ffe974": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "dc9d367a162e4845bc5ab1d5640b11a7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "383e24511f65467dbccb693a06567b8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "51207f89f8694a86ab8d0773f46526ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "370b2313a4a04a81988c9fcd3bdf3f13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_3390b4f8e397462bb4c2c4443f499053",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_827770180fd64a38a3f7473a88ee4b44",
              "IPY_MODEL_256b1c45f5984294aee241de951b1fee"
            ]
          }
        },
        "3390b4f8e397462bb4c2c4443f499053": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "827770180fd64a38a3f7473a88ee4b44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_4673fcbbc5984c4d9eaf179680f3fbae",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 665,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 665,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_3b315533c6dc421eae284b28017fab5c"
          }
        },
        "256b1c45f5984294aee241de951b1fee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_9f9256c98120462ab6cf0181ad8e3ef7",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 665/665 [00:00&lt;00:00, 1.96kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_10cb68fea8a24c57ae0167ed39bdaf2b"
          }
        },
        "4673fcbbc5984c4d9eaf179680f3fbae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "3b315533c6dc421eae284b28017fab5c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "9f9256c98120462ab6cf0181ad8e3ef7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "10cb68fea8a24c57ae0167ed39bdaf2b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "91d85031e0904ea4b5f53fb49cf83f50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5c38d744cc884c57a3b1229344d818df",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_50913834190f4703b30d4ec546d15ffb",
              "IPY_MODEL_8b50338ff43446e194b1c3bfdf82eba4"
            ]
          }
        },
        "5c38d744cc884c57a3b1229344d818df": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "50913834190f4703b30d4ec546d15ffb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e3fd416d36734929bf22dbceea7a4a85",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 497933648,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 497933648,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f83c42203ed4457abda311a166c75ff5"
          }
        },
        "8b50338ff43446e194b1c3bfdf82eba4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_30b77804c085434198c65705f4a21bdc",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 498M/498M [00:08&lt;00:00, 57.0MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_80bfed32ef5e4b06a7b6eafd9f6947da"
          }
        },
        "e3fd416d36734929bf22dbceea7a4a85": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f83c42203ed4457abda311a166c75ff5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "30b77804c085434198c65705f4a21bdc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "80bfed32ef5e4b06a7b6eafd9f6947da": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f1af76cea7934916a5e418693e03584d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_86b336a43b8d4e87af71f046cc14eb3c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2d8aa9425e2d42008806f0908c3fe970",
              "IPY_MODEL_7d0b674e147e40118e8df69452d38200"
            ]
          }
        },
        "86b336a43b8d4e87af71f046cc14eb3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2d8aa9425e2d42008806f0908c3fe970": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_cec82038fd694ddbbebdc25af2dc3f33",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1042301,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1042301,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_bd7501de07ad4cb1a96b02105e615060"
          }
        },
        "7d0b674e147e40118e8df69452d38200": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_8b497572d9f940608482ece254ae3ae4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.04M/1.04M [00:02&lt;00:00, 397kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5143799410c64f58a50624054fd9ace5"
          }
        },
        "cec82038fd694ddbbebdc25af2dc3f33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "bd7501de07ad4cb1a96b02105e615060": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8b497572d9f940608482ece254ae3ae4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5143799410c64f58a50624054fd9ace5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "64ca7f9d0a6b4ca68a7226e840dca1da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_fd541c61b2464564b6fa75fa51977df1",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_008a5f65c956452782a433c89da6eab0",
              "IPY_MODEL_9df0bbe0a77a40bf8743114334fcfe62"
            ]
          }
        },
        "fd541c61b2464564b6fa75fa51977df1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "008a5f65c956452782a433c89da6eab0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_a2a4ad335dfa460aaa71892e423b598c",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 456318,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 456318,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0867e73fcd9645a9b507f7f8d02c189a"
          }
        },
        "9df0bbe0a77a40bf8743114334fcfe62": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_77db1782c753446e831b18227f5f6463",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 456k/456k [00:01&lt;00:00, 254kB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_1b17722ef90c4ac38d9676e35444c7a4"
          }
        },
        "a2a4ad335dfa460aaa71892e423b598c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0867e73fcd9645a9b507f7f8d02c189a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "77db1782c753446e831b18227f5f6463": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "1b17722ef90c4ac38d9676e35444c7a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "c6892cfbdf444ef3bda2355caa7ee0d6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_beb0239a9c8d4881b39600905793e447",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f5901e20833b41bfb967ad199295e213",
              "IPY_MODEL_80cff6ea398649a2ac73355d00cfec30"
            ]
          }
        },
        "beb0239a9c8d4881b39600905793e447": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f5901e20833b41bfb967ad199295e213": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_3213b3d4f9fa483794de19ca615b5e8d",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 1355256,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1355256,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_dd711b24744f48d586c97ea98551c9bf"
          }
        },
        "80cff6ea398649a2ac73355d00cfec30": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_a6361857f1334b3bbd80b9f7fe0055ec",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 3.10MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5f6ad09d698a404e8f6e7bc45f4f1ecc"
          }
        },
        "3213b3d4f9fa483794de19ca615b5e8d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "dd711b24744f48d586c97ea98551c9bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a6361857f1334b3bbd80b9f7fe0055ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5f6ad09d698a404e8f6e7bc45f4f1ecc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "10a5f76a6b934d25b012fe9bd0396c1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_372d74f711f8444e9b0d5fff1a3ec6e2",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_68db071119f943e285db60a1184d12c7",
              "IPY_MODEL_c7868ead3a9e46df894388840354a361"
            ]
          }
        },
        "372d74f711f8444e9b0d5fff1a3ec6e2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "68db071119f943e285db60a1184d12c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_e90b731bbf28443fb46db38ca996c6a7",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 762,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 762,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_e90c33a81d204ca1b8e2a26fcc051d91"
          }
        },
        "c7868ead3a9e46df894388840354a361": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_d65184605999454ab71ff4cd7f073a6d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 762/762 [00:06&lt;00:00, 116B/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_317be3315254404d9c02dc7e9541f097"
          }
        },
        "e90b731bbf28443fb46db38ca996c6a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "e90c33a81d204ca1b8e2a26fcc051d91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d65184605999454ab71ff4cd7f073a6d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "317be3315254404d9c02dc7e9541f097": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2d3cafe8687c49929647514b7b24e6a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "state": {
            "_view_name": "HBoxView",
            "_dom_classes": [],
            "_model_name": "HBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_b4f5edd29c6e4ac0b7a58873a03a3637",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_f380bdb09f0a47158aa5ce3c417015fc",
              "IPY_MODEL_abaa07543c94441bae88588978aeff10"
            ]
          }
        },
        "b4f5edd29c6e4ac0b7a58873a03a3637": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f380bdb09f0a47158aa5ce3c417015fc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_d1c5b16f6fc541e789bd926ba63bd254",
            "_dom_classes": [],
            "description": "Downloading: 100%",
            "_model_name": "FloatProgressModel",
            "bar_style": "success",
            "max": 327744160,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 327744160,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_a03e863ac41c40cfb85e7bc4fb39b045"
          }
        },
        "abaa07543c94441bae88588978aeff10": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "state": {
            "_view_name": "HTMLView",
            "style": "IPY_MODEL_f6db2d14bee5486e866ce69a4d01f866",
            "_dom_classes": [],
            "description": "",
            "_model_name": "HTMLModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 328M/328M [00:05&lt;00:00, 57.1MB/s]",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_35e06662b55b45bc8007620168e95f3f"
          }
        },
        "d1c5b16f6fc541e789bd926ba63bd254": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "initial",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "a03e863ac41c40cfb85e7bc4fb39b045": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "f6db2d14bee5486e866ce69a4d01f866": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "35e06662b55b45bc8007620168e95f3f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6O5kd7JM8aM4"
      },
      "source": [
        "# <img style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"> Data Science 2: Advanced Topics in Data Science \n",
        "## Section 4: Natural Language Processing\n",
        "\n",
        "\n",
        "**Harvard University**<br/>\n",
        "**Spring 2021**<br/>\n",
        "**Instructors**: Mark Glickman, Pavlos Protopapas, and Chris Tanner <br/>\n",
        "**Authors**: Shivas Jayaram \n",
        "\n",
        "\n",
        "<hr style=\"height:2pt\">"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "YYJI_u7M8VKy",
        "outputId": "192f47a3-f63d-42d9-af80-30b42a1e936b"
      },
      "source": [
        "## RUN THIS CELL TO PROPERLY HIGHLIGHT THE EXERCISES\n",
        "import requests\n",
        "from IPython.core.display import HTML\n",
        "styles = requests.get(\"https://raw.githubusercontent.com/Harvard-IACS/2019-CS109B/master/content/styles/cs109.css\").text\n",
        "HTML(styles)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style>\n",
              "blockquote { background: #AEDE94; }\n",
              "h1 { \n",
              "    padding-top: 25px;\n",
              "    padding-bottom: 25px;\n",
              "    text-align: left; \n",
              "    padding-left: 10px;\n",
              "    background-color: #DDDDDD; \n",
              "    color: black;\n",
              "}\n",
              "h2 { \n",
              "    padding-top: 10px;\n",
              "    padding-bottom: 10px;\n",
              "    text-align: left; \n",
              "    padding-left: 5px;\n",
              "    background-color: #EEEEEE; \n",
              "    color: black;\n",
              "}\n",
              "\n",
              "div.exercise {\n",
              "\tbackground-color: #ffcccc;\n",
              "\tborder-color: #E9967A; \t\n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "}\n",
              "div.discussion {\n",
              "\tbackground-color: #ccffcc;\n",
              "\tborder-color: #88E97A;\n",
              "\tborder-left: 5px solid #0A8000; \n",
              "\tpadding: 0.5em;\n",
              "}\n",
              "div.theme {\n",
              "\tbackground-color: #DDDDDD;\n",
              "\tborder-color: #E9967A; \t\n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "\tfont-size: 18pt;\n",
              "}\n",
              "div.gc { \n",
              "\tbackground-color: #AEDE94;\n",
              "\tborder-color: #E9967A; \t \n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "\tfont-size: 12pt;\n",
              "}\n",
              "p.q1 { \n",
              "    padding-top: 5px;\n",
              "    padding-bottom: 5px;\n",
              "    text-align: left; \n",
              "    padding-left: 5px;\n",
              "    background-color: #EEEEEE; \n",
              "    color: black;\n",
              "}\n",
              "header {\n",
              "   padding-top: 35px;\n",
              "    padding-bottom: 35px;\n",
              "    text-align: left; \n",
              "    padding-left: 10px;\n",
              "    background-color: #DDDDDD; \n",
              "    color: black;\n",
              "}\n",
              "</style>\n",
              "\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o5W670RK9BAu"
      },
      "source": [
        "## Learning Objectives\n",
        "\n",
        "By the end of this section, you should be able to:\n",
        "* Perform preprocessing operation on text\n",
        "* Perform text classification task using various model architectures\n",
        "* Following a structured approach to model training and comparing results\n",
        "  * Save model weights, architecture, training params, metrics, & training history\n",
        "* Familiarize with SOTA(State Of The Art) pretrained language models and hot to use them for your custom dataset:\n",
        "  * Glove pre trained embeddings\n",
        "  * BERT(Bidirectional Encoder Representations from Transformers) for text classification tasks\n",
        "  * GPT2(Generative Pre-Training) for language generation tasks\n",
        "* Create your own Word2Vec embeddings"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1HIqkq-9FAV"
      },
      "source": [
        "<a id=\"contents\"></a>\n",
        "\n",
        "## Notebook Contents\n",
        "- [**Preprocessing Text Data Recap**](#prep)\n",
        "    - [Text processing using NLTK](#prep) \n",
        "- [**Text Classification**](#textclass)\n",
        "    - [Overview](#333) \n",
        "    - [Fully Connected Networks](#333)\n",
        "    - [Conv1D (with/without pretrained embeddings)](#333)\n",
        "    - [Pretrained BERT](#333)\n",
        "- [**Text Generation using GPT2**](#gpt2)\n",
        "    - [Overview](#gpt2_overview) \n",
        "    - [Pretrained GPT2](#gpt2_pretrained)\n",
        "    - [Break Out Room 🎊🎉](#breakout)\n",
        "    - [Finetune GPT2](#gpt2_finetune)\n",
        "- [**Word Embeddings (Word2Vec)**](#word2vec)\n",
        "    - [Overview](#word2vec_overview) \n",
        "    - [Generate Training Data](#word2vec_data) \n",
        "    - [Build Word2Vec](#word2vec_model)\n",
        "    - [Traning Word2Vec Molel](#word2vec_train)\n",
        "    - [Analyze Embeddings](#word2vec_analyze)\n",
        "- [**References**](#references)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mPfx_u5zBEDy"
      },
      "source": [
        "## **Setup Notebook**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bZtREcgNBFFa"
      },
      "source": [
        "**Installs**\n",
        "\n",
        "We will install Huggingface’s transformers library. This library let us import a wide range of transformer-based pre-trained models. In our case, we will use GPT2 & BERT."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CukIrumxBPFw",
        "outputId": "b58d2974-dc7e-40bf-c908-a477de2dc4b7"
      },
      "source": [
        "# Installation for Google Colab\n",
        "!pip install transformers==4.4.1\n",
        "\n",
        "# Installation for Jupyter Hub\n",
        "# !sudo /usr/share/anaconda3/bin/conda install -c huggingface transformers==4.4.1 -y"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting transformers==4.4.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/2c/d8/5144b0712f7f82229a8da5983a8fbb8d30cec5fbd5f8d12ffe1854dcea67/transformers-4.4.1-py3-none-any.whl (2.1MB)\n",
            "\u001b[K     |████████████████████████████████| 2.1MB 9.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (1.19.5)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (3.0.12)\n",
            "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (3.7.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (2.23.0)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (2019.12.20)\n",
            "Collecting sacremoses\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7d/34/09d19aff26edcc8eb2a01bed8e98f13a1537005d31e95233fd48216eed10/sacremoses-0.0.43.tar.gz (883kB)\n",
            "\u001b[K     |████████████████████████████████| 890kB 37.9MB/s \n",
            "\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (20.9)\n",
            "Collecting tokenizers<0.11,>=0.10.1\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/71/23/2ddc317b2121117bf34dd00f5b0de194158f2a44ee2bf5e47c7166878a97/tokenizers-0.10.1-cp37-cp37m-manylinux2010_x86_64.whl (3.2MB)\n",
            "\u001b[K     |████████████████████████████████| 3.2MB 56.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers==4.4.1) (4.41.1)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers==4.4.1) (3.4.1)\n",
            "Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers==4.4.1) (3.7.4.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.4.1) (2020.12.5)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.4.1) (3.0.4)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.4.1) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.4.1) (1.24.3)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.4.1) (1.15.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.4.1) (7.1.2)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.4.1) (1.0.1)\n",
            "Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers==4.4.1) (2.4.7)\n",
            "Building wheels for collected packages: sacremoses\n",
            "  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sacremoses: filename=sacremoses-0.0.43-cp37-none-any.whl size=893262 sha256=d2499550acbe70695b9229a608881e2a730d4b13cd6c7323e967ca8fdf53f9da\n",
            "  Stored in directory: /root/.cache/pip/wheels/29/3c/fd/7ce5c3f0666dab31a50123635e6fb5e19ceb42ce38d4e58f45\n",
            "Successfully built sacremoses\n",
            "Installing collected packages: sacremoses, tokenizers, transformers\n",
            "Successfully installed sacremoses-0.0.43 tokenizers-0.10.1 transformers-4.4.1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VO6eiZttB35F"
      },
      "source": [
        "**Imports**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jlob5uG6B4lR"
      },
      "source": [
        "import os\n",
        "import requests\n",
        "import zipfile\n",
        "import tarfile\n",
        "import shutil\n",
        "import math\n",
        "import json\n",
        "import time\n",
        "import sys\n",
        "import string\n",
        "import re\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from glob import glob\n",
        "import collections\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.cm as cm\n",
        "%matplotlib inline\n",
        "\n",
        "# NLTK\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize, sent_tokenize\n",
        "from nltk.corpus import stopwords \n",
        "from nltk.tokenize import RegexpTokenizer\n",
        "\n",
        "# Tensorflow\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Model, Sequential\n",
        "from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.python.keras import backend as K\n",
        "from tensorflow.python.keras.utils.layer_utils import count_params\n",
        "\n",
        "# sklearn\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import manifold\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# Transformers\n",
        "from transformers import BertTokenizer, TFBertForSequenceClassification, BertConfig\n",
        "from transformers import GPT2Tokenizer, TFGPT2LMHeadModel, GPT2Config"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tDHKnD7v6Rld",
        "outputId": "00e95d1a-78a3-4550-a967-c7d29a46c766"
      },
      "source": [
        "# download nltk's punkt sentence tokenizer\n",
        "nltk.download('punkt')\n",
        "# download nltk's stop words\n",
        "nltk.download('stopwords')"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_w4PaXjCCLt-"
      },
      "source": [
        "**Verify Setup**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wXdQoRZYCMJl",
        "outputId": "1a03224b-e334-41ac-e5b9-b7d676256216"
      },
      "source": [
        "# Enable/Disable Eager Execution\n",
        "# Reference: https://www.tensorflow.org/guide/eager\n",
        "# TensorFlow's eager execution is an imperative programming environment that evaluates operations immediately, \n",
        "# without building graphs\n",
        "\n",
        "#tf.compat.v1.disable_eager_execution()\n",
        "#tf.compat.v1.enable_eager_execution()\n",
        "\n",
        "print(\"tensorflow version\", tf.__version__)\n",
        "print(\"keras version\", tf.keras.__version__)\n",
        "print(\"Eager Execution Enabled:\", tf.executing_eagerly())\n",
        "\n",
        "# Get the number of replicas \n",
        "strategy = tf.distribute.MirroredStrategy()\n",
        "print(\"Number of replicas:\", strategy.num_replicas_in_sync)\n",
        "\n",
        "devices = tf.config.experimental.get_visible_devices()\n",
        "print(\"Devices:\", devices)\n",
        "print(tf.config.experimental.list_logical_devices('GPU'))\n",
        "\n",
        "print(\"GPU Available: \", tf.config.list_physical_devices('GPU'))\n",
        "print(\"All Physical Devices\", tf.config.list_physical_devices())\n",
        "\n",
        "# Better performance with the tf.data API\n",
        "# Reference: https://www.tensorflow.org/guide/data_performance\n",
        "AUTOTUNE = tf.data.experimental.AUTOTUNE"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensorflow version 2.4.1\n",
            "keras version 2.4.0\n",
            "Eager Execution Enabled: True\n",
            "INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:GPU:0',)\n",
            "Number of replicas: 1\n",
            "Devices: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n",
            "[LogicalDevice(name='/device:GPU:0', device_type='GPU')]\n",
            "GPU Available:  [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n",
            "All Physical Devices [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LZJMzrAHCSiz"
      },
      "source": [
        "**Utils**\n",
        "\n",
        "Here we define some helper functions that would be used in loading data, saving models and evaluating models."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChiSgjKsCU6_"
      },
      "source": [
        "def download_file(packet_url, base_path=\"\", extract=False, headers=None):\n",
        "  if base_path != \"\":\n",
        "    if not os.path.exists(base_path):\n",
        "      os.mkdir(base_path)\n",
        "  packet_file = os.path.basename(packet_url)\n",
        "  with requests.get(packet_url, stream=True, headers=headers) as r:\n",
        "      r.raise_for_status()\n",
        "      with open(os.path.join(base_path,packet_file), 'wb') as f:\n",
        "          for chunk in r.iter_content(chunk_size=8192):\n",
        "              f.write(chunk)\n",
        "  \n",
        "  if extract:\n",
        "    if packet_file.endswith(\".zip\"):\n",
        "      with zipfile.ZipFile(os.path.join(base_path,packet_file)) as zfile:\n",
        "        zfile.extractall(base_path)\n",
        "    else:\n",
        "      packet_name = packet_file.split('.')[0]\n",
        "      with tarfile.open(os.path.join(base_path,packet_file)) as tfile:\n",
        "        tfile.extractall(base_path)\n",
        "\n",
        "class JsonEncoder(json.JSONEncoder):\n",
        "  def default(self, obj):\n",
        "    if isinstance(obj, np.integer):\n",
        "        return int(obj)\n",
        "    elif isinstance(obj, np.floating):\n",
        "        return float(obj)\n",
        "    elif isinstance(obj, decimal.Decimal):\n",
        "        return float(obj)\n",
        "    elif isinstance(obj, np.ndarray):\n",
        "        return obj.tolist()\n",
        "    else:\n",
        "        return super(JsonEncoder, self).default(obj)\n",
        "\n",
        "def save_model(model, path=\"models\",model_name=\"model01\"):\n",
        "\n",
        "  # Ensure path exists\n",
        "  if not os.path.exists(path):\n",
        "      os.mkdir(path)\n",
        "\n",
        "  if isinstance(model,TFBertForSequenceClassification):\n",
        "    #model.save_pretrained(path)\n",
        "    model.save_weights(os.path.join(path,model_name+\".h5\"))\n",
        "  else:\n",
        "    # Save the enitire model (structure + weights)\n",
        "    model.save(os.path.join(path,model_name+\".hdf5\"))\n",
        "\n",
        "    # Save only the weights\n",
        "    model.save_weights(os.path.join(path,model_name+\".h5\"))\n",
        "\n",
        "    # Save the structure only\n",
        "    model_json = model.to_json()\n",
        "    with open(os.path.join(path,model_name+\".json\"), \"w\") as json_file:\n",
        "        json_file.write(model_json)\n",
        "\n",
        "def get_model_size(path=\"models\",model_name=\"model01\"):\n",
        "  model_size = os.stat(os.path.join(path,model_name+\".h5\")).st_size\n",
        "  return model_size\n",
        "\n",
        "def evaluate_save_model(model,test_data, training_results,execution_time, learning_rate, epochs,save=True):\n",
        "    \n",
        "  # Get the model train history\n",
        "  model_train_history = training_results.history\n",
        "  # Get the number of epochs the training was run for\n",
        "  num_epochs = len(model_train_history[\"loss\"])\n",
        "\n",
        "  # Plot training results\n",
        "  fig = plt.figure(figsize=(20,5))\n",
        "  axs = fig.add_subplot(1,3,1)\n",
        "  axs.set_title('Loss')\n",
        "  # Plot all metrics\n",
        "  for metric in [\"loss\",\"val_loss\"]:\n",
        "      axs.plot(np.arange(0, num_epochs), model_train_history[metric], label=metric)\n",
        "  axs.legend()\n",
        "  \n",
        "  axs = fig.add_subplot(1,3,2)\n",
        "  axs.set_title('Accuracy')\n",
        "  # Plot all metrics\n",
        "  for metric in [\"accuracy\",\"val_accuracy\"]:\n",
        "      axs.plot(np.arange(0, num_epochs), model_train_history[metric], label=metric)\n",
        "  axs.legend()\n",
        "\n",
        "  plt.show()\n",
        "  \n",
        "  # Evaluate on test data\n",
        "  evaluation_results = model.evaluate(test_data)\n",
        "  print(evaluation_results)\n",
        "  \n",
        "  if save:\n",
        "      # Save model\n",
        "      save_model(model, model_name=model.name)\n",
        "      model_size = get_model_size(model_name=model.name)\n",
        "\n",
        "      # Save model history\n",
        "      with open(os.path.join(\"models\",model.name+\"_train_history.json\"), \"w\") as json_file:\n",
        "          json_file.write(json.dumps(model_train_history,cls=JsonEncoder))\n",
        "\n",
        "      trainable_parameters = count_params(model.trainable_weights)\n",
        "      non_trainable_parameters = count_params(model.non_trainable_weights)\n",
        "\n",
        "      # Save model metrics\n",
        "      metrics ={\n",
        "          \"trainable_parameters\":trainable_parameters,\n",
        "          \"execution_time\":execution_time,\n",
        "          \"loss\":evaluation_results[0],\n",
        "          \"accuracy\":evaluation_results[1],\n",
        "          \"model_size\":model_size,\n",
        "          \"learning_rate\":learning_rate,\n",
        "          \"epochs\":epochs,\n",
        "          \"name\": model.name,\n",
        "          \"id\": int(time.time())\n",
        "      }\n",
        "      with open(os.path.join(\"models\",model.name+\"_metrics.json\"), \"w\") as json_file:\n",
        "          json_file.write(json.dumps(metrics,cls=JsonEncoder))"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v46gfg38CoS_"
      },
      "source": [
        "## **Preprocessing Text Data** <div id='prep'>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "27rLYCVnC5gB"
      },
      "source": [
        "#### **Review**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O1yPnInNQ27X"
      },
      "source": [
        "**Basic Definitions:**\n",
        "- Natural Language Processing (NLP): The use of computers to process linguistic information into structured data and extract useful insights\n",
        "- Document: A single unit of observation used in NLP, which could be as short as a word or as long as a book\n",
        "- Corpus: A collection of documents from a shared context that are processed and analyzed using NLP\n",
        "\n",
        "**Conceptual:**\n",
        "- Text is structured data, but lacks the simple structure needed for quantitative analysis and ML\n",
        "- Extensive preprocessing and parsing is needed to convert plain text into structured data\n",
        "- How to parse a given document depends upon the specific application and the corpus being used\n",
        "- Once parsed, documents can be analyzed like other quantitative datasets \n",
        "\n",
        "\n",
        "**Common NLP Tools:**\n",
        "- [<font color=\"green\">Natural Language Toolkit</font>](https://www.nltk.org)\n",
        "- [scikit-learn](https://scikit-learn.org)\n",
        "- [CoreNLP](https://stanfordnlp.github.io/CoreNLP/)\n",
        "- [Gensim](https://radimrehurek.com/gensim/)\n",
        "- [spaCy](https://spacy.io/)\n",
        "- [AllenNLP](https://allennlp.org/)\n",
        "- [<font color=\"green\">Transformers</font>](https://huggingface.co/transformers/index.html)\n",
        "\n",
        "**Basic Data Pipeline for NLP:**\n",
        "- <font color=\"green\">Data ingestion from files, scraping, APIs</font>\n",
        "- <font color=\"green\">Removing stop words</font>\n",
        "- Word stemming and lemmatization\n",
        "- <font color=\"green\">Parsing text using regular expressions</font>\n",
        "- <font color=\"green\">Tokenizing / Text Vectorization</font>\n",
        "- Creating a “bag of words” model\n",
        "- Creating TF-IDF vectors\n",
        "- <font color=\"green\">Creating word embeddings</font>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9JwufRxGZT62"
      },
      "source": [
        "#### **Preprocessing using NLTK**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fcNxJh2sUZCs"
      },
      "source": [
        "input_text = \"\"\"Advanced Topics in Data Science (CS109b) is the second half of a one-year introduction to data science. \n",
        "Building upon the material in Introduction to Data Science, the course introduces advanced methods for data wrangling, \n",
        "data visualization, statistical modeling, and prediction. Topics include big data, multiple deep learning architectures \n",
        "such as CNNs, RNNs, transformers, language models, autoencoders, and generative models as well as basic Bayesian methods, \n",
        "nonlinear statistical models, and unsupervised learning.\n",
        "\"\"\""
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GepnWCBN6-LK",
        "outputId": "5c72284a-1ce2-4df9-fed4-e525eebe4b2d"
      },
      "source": [
        "# Get sentences\n",
        "sentences = sent_tokenize(input_text)\n",
        "print(\"Sentences:\")\n",
        "for sentence in sentences:\n",
        "  print(sentence)\n",
        "\n",
        "# Get words\n",
        "words = word_tokenize(input_text)\n",
        "print(\"\\nWords:\")\n",
        "print(words)\n",
        "\n",
        "# Number of words\n",
        "print(\"\\n Number of Words:\", len(words))"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Sentences:\n",
            "Advanced Topics in Data Science (CS109b) is the second half of a one-year introduction to data science.\n",
            "Building upon the material in Introduction to Data Science, the course introduces advanced methods for data wrangling, \n",
            "data visualization, statistical modeling, and prediction.\n",
            "Topics include big data, multiple deep learning architectures \n",
            "such as CNNs, RNNs, transformers, language models, autoencoders, and generative models as well as basic Bayesian methods, \n",
            "nonlinear statistical models, and unsupervised learning.\n",
            "\n",
            "Words:\n",
            "['Advanced', 'Topics', 'in', 'Data', 'Science', '(', 'CS109b', ')', 'is', 'the', 'second', 'half', 'of', 'a', 'one-year', 'introduction', 'to', 'data', 'science', '.', 'Building', 'upon', 'the', 'material', 'in', 'Introduction', 'to', 'Data', 'Science', ',', 'the', 'course', 'introduces', 'advanced', 'methods', 'for', 'data', 'wrangling', ',', 'data', 'visualization', ',', 'statistical', 'modeling', ',', 'and', 'prediction', '.', 'Topics', 'include', 'big', 'data', ',', 'multiple', 'deep', 'learning', 'architectures', 'such', 'as', 'CNNs', ',', 'RNNs', ',', 'transformers', ',', 'language', 'models', ',', 'autoencoders', ',', 'and', 'generative', 'models', 'as', 'well', 'as', 'basic', 'Bayesian', 'methods', ',', 'nonlinear', 'statistical', 'models', ',', 'and', 'unsupervised', 'learning', '.']\n",
            "\n",
            " Number of Words: 88\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uKyEyBPk8oyg",
        "outputId": "ae3c6357-764b-4272-9930-d98a69b971d4"
      },
      "source": [
        "# Get Word tokenizer from NLTK\n",
        "tokenizer = RegexpTokenizer(r'\\w+')\n",
        "\n",
        "# Word Tokenize text\n",
        "words = tokenizer.tokenize(input_text)\n",
        "print(\"Words:\")\n",
        "print(words)\n",
        "\n",
        "# Number of words\n",
        "print(\"\\n Number of Words:\", len(words))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Words:\n",
            "['Advanced', 'Topics', 'in', 'Data', 'Science', 'CS109b', 'is', 'the', 'second', 'half', 'of', 'a', 'one', 'year', 'introduction', 'to', 'data', 'science', 'Building', 'upon', 'the', 'material', 'in', 'Introduction', 'to', 'Data', 'Science', 'the', 'course', 'introduces', 'advanced', 'methods', 'for', 'data', 'wrangling', 'data', 'visualization', 'statistical', 'modeling', 'and', 'prediction', 'Topics', 'include', 'big', 'data', 'multiple', 'deep', 'learning', 'architectures', 'such', 'as', 'CNNs', 'RNNs', 'transformers', 'language', 'models', 'autoencoders', 'and', 'generative', 'models', 'as', 'well', 'as', 'basic', 'Bayesian', 'methods', 'nonlinear', 'statistical', 'models', 'and', 'unsupervised', 'learning']\n",
            "\n",
            " Number of Words: 72\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7BIxAG3j87Gy",
        "outputId": "8008d2fe-e724-4469-d895-39b1772afe85"
      },
      "source": [
        "# Remove stop words\n",
        "stop_words = set(stopwords.words('english')) \n",
        "\n",
        "# Words\n",
        "words = tokenizer.tokenize(input_text)\n",
        "\n",
        "# Remove stop words\n",
        "words = [w.lower() for w in words if w.lower() not in stop_words]\n",
        "print(\"Words:\")\n",
        "print(words)\n",
        "\n",
        "# Number of words\n",
        "print(\"\\nNumber of Words:\", len(words))\n",
        "\n",
        "# Number of unique words\n",
        "num_unique_words = set(words)\n",
        "print(\"Number of unique words (Vocabulary size):\",len(num_unique_words))\n",
        "\n",
        "print(\"\\nVocabulary:\",num_unique_words)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Words:\n",
            "['advanced', 'topics', 'data', 'science', 'cs109b', 'second', 'half', 'one', 'year', 'introduction', 'data', 'science', 'building', 'upon', 'material', 'introduction', 'data', 'science', 'course', 'introduces', 'advanced', 'methods', 'data', 'wrangling', 'data', 'visualization', 'statistical', 'modeling', 'prediction', 'topics', 'include', 'big', 'data', 'multiple', 'deep', 'learning', 'architectures', 'cnns', 'rnns', 'transformers', 'language', 'models', 'autoencoders', 'generative', 'models', 'well', 'basic', 'bayesian', 'methods', 'nonlinear', 'statistical', 'models', 'unsupervised', 'learning']\n",
            "\n",
            "Number of Words: 54\n",
            "Number of unique words (Vocabulary size): 39\n",
            "\n",
            "Vocabulary: {'modeling', 'generative', 'topics', 'year', 'wrangling', 'material', 'building', 'course', 'one', 'deep', 'architectures', 'well', 'science', 'transformers', 'bayesian', 'learning', 'rnns', 'prediction', 'big', 'methods', 'unsupervised', 'cs109b', 'multiple', 'visualization', 'autoencoders', 'introduces', 'basic', 'models', 'upon', 'language', 'cnns', 'data', 'include', 'second', 'introduction', 'statistical', 'advanced', 'half', 'nonlinear'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CPoylunzBQ-Q"
      },
      "source": [
        "#### **Text Vectorization using tf.keras**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aUvur1aa_cQg",
        "outputId": "b064f56e-ebf3-4ad8-ebee-44546d764436"
      },
      "source": [
        "# Words\n",
        "words = tokenizer.tokenize(input_text)\n",
        "num_unique_words = set(words)\n",
        "\n",
        "# Initialize Text Vectorizer\n",
        "text_vectorizer = TextVectorization(\n",
        "    max_tokens=len(num_unique_words)+2,\n",
        "    output_mode=\"int\"\n",
        ")\n",
        "\n",
        "\n",
        "# Generate Text Vector\n",
        "text_vectorizer.adapt(words)\n",
        "\n",
        "# Get Vocabulary\n",
        "vocabulary = text_vectorizer.get_vocabulary()\n",
        "vocabulary_size = len(vocabulary)\n",
        "print(\"Vocabulary Size:\",vocabulary_size)\n",
        "\n",
        "# Generate word index\n",
        "word_index = dict(zip(vocabulary, range(vocabulary_size)))\n",
        "\n",
        "print(\"vocabulary:\",len(vocabulary),vocabulary)\n",
        "print(\"word_index:\",word_index)\n",
        "\n",
        "print(\"\\nExample:\",text_vectorizer(\"data science is awesome\"))\n",
        "print(\"\\nExample:\",text_vectorizer(\"I like ice cream\"))"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Vocabulary Size: 51\n",
            "vocabulary: 51 ['', '[UNK]', 'data', 'the', 'science', 'models', 'as', 'and', 'topics', 'to', 'statistical', 'methods', 'learning', 'introduction', 'in', 'advanced', 'year', 'wrangling', 'well', 'visualization', 'upon', 'unsupervised', 'transformers', 'such', 'second', 'rnns', 'prediction', 'one', 'of', 'nonlinear', 'multiple', 'modeling', 'material', 'language', 'is', 'introduces', 'include', 'half', 'generative', 'for', 'deep', 'cs109b', 'course', 'cnns', 'building', 'big', 'bayesian', 'basic', 'autoencoders', 'architectures', 'a']\n",
            "word_index: {'': 0, '[UNK]': 1, 'data': 2, 'the': 3, 'science': 4, 'models': 5, 'as': 6, 'and': 7, 'topics': 8, 'to': 9, 'statistical': 10, 'methods': 11, 'learning': 12, 'introduction': 13, 'in': 14, 'advanced': 15, 'year': 16, 'wrangling': 17, 'well': 18, 'visualization': 19, 'upon': 20, 'unsupervised': 21, 'transformers': 22, 'such': 23, 'second': 24, 'rnns': 25, 'prediction': 26, 'one': 27, 'of': 28, 'nonlinear': 29, 'multiple': 30, 'modeling': 31, 'material': 32, 'language': 33, 'is': 34, 'introduces': 35, 'include': 36, 'half': 37, 'generative': 38, 'for': 39, 'deep': 40, 'cs109b': 41, 'course': 42, 'cnns': 43, 'building': 44, 'big': 45, 'bayesian': 46, 'basic': 47, 'autoencoders': 48, 'architectures': 49, 'a': 50}\n",
            "\n",
            "Example: tf.Tensor([ 2  4 34  1], shape=(4,), dtype=int64)\n",
            "\n",
            "Example: tf.Tensor([1 1 1 1], shape=(4,), dtype=int64)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vLtkd2kcSR18"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N0DEVkoPDUmS"
      },
      "source": [
        "## **Text Classification** <div id='textclass'>\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KSCXQYN5DaBG"
      },
      "source": [
        "### **Overview**\n",
        "\n",
        "In this section, we're going to be working with news articles from CNN. We will explore the dataset, prepare the data for modeling, and try different models, which includes simple networks, networks with embeddings, networks with pretrained embeddings and BERT.\n",
        "\n",
        "**The Task:** Classify news articles into three categories, namely politics, health, and entertainment."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Y-8tmPLEhQv"
      },
      "source": [
        "### **Dataset**\n",
        "\n",
        "The dataset consists of news articles pulled from CNN in the politics, health, and entertainment categories. There are about 300 articles in each category. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O9_q5-xzEwBI"
      },
      "source": [
        "#### **Download**\n",
        "\n",
        "Download the datasets to colab."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iiPS12t6E1ip",
        "outputId": "77a4d140-46df-4381-aab9-14291d8d49e6"
      },
      "source": [
        "start_time = time.time()\n",
        "# Dowload the news dataset\n",
        "download_file(\"https://storage.googleapis.com/cs109b/datasets/news300.zip\", base_path=\"datasets\", extract=True)\n",
        "# Download Glove pretrained embeddings\n",
        "download_file(\"https://github.com/shivasj/dataset-store/releases/download/v3.0/glove.6B.100d.txt.zip\", \n",
        "              base_path=\"embedding\", extract=True)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Download execution time (mins)\",execution_time)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Download execution time (mins) 0.11693284511566163\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CL_W-ztCFQHv"
      },
      "source": [
        "#### **Load Data**\n",
        "\n",
        "* Read-in data as lists.\n",
        "* Each element in data_x is the content of a sample, namely an news article. \n",
        "* Each element in data_y is the label of that article."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_-zGZNyVFW9d",
        "outputId": "f8de8e2e-7911-4ebd-8f57-c79f01ecf2c1"
      },
      "source": [
        "data_dir = os.path.join(\"datasets\",\"news300\")\n",
        "label_names = os.listdir(data_dir)\n",
        "\n",
        "# Number of unique labels\n",
        "num_classes = len(label_names) \n",
        "# Create label index for easy lookup\n",
        "label2index = dict((name, index) for index, name in enumerate(label_names))\n",
        "index2label = dict((index, name) for index, name in enumerate(label_names))\n",
        "\n",
        "print(\"Number of classes:\", num_classes)\n",
        "print(\"Labels:\", label_names)\n",
        "\n",
        "# Generate a list of labels and path to text\n",
        "data_x = []\n",
        "data_y = []\n",
        "\n",
        "for label in label_names:\n",
        "  text_files = os.listdir(os.path.join(data_dir,label))\n",
        "  data_x.extend([os.path.join(data_dir,label,f) for f in text_files])\n",
        "  data_y.extend([label for f in text_files])\n",
        "\n",
        "# Load the text content\n",
        "for idx, path in enumerate(data_x):\n",
        "  # Load text\n",
        "  with open(path) as file:\n",
        "    data_x[idx] = file.read()\n",
        "\n",
        "# Preview\n",
        "print(\"data_x count:\",len(data_x))\n",
        "print(\"data_y count:\",len(data_y))\n",
        "print(\"Label counts:\",np.unique(data_y, return_counts=True))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of classes: 3\n",
            "Labels: ['entertainment', 'health', 'politics']\n",
            "data_x count: 920\n",
            "data_y count: 920\n",
            "Label counts: (array(['entertainment', 'health', 'politics'], dtype='<U13'), array([310, 310, 300]))\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NMFGMoBxFdLM"
      },
      "source": [
        "#### **View Text**\n",
        "\n",
        "Let's take a look at the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlgFe4aiFjyl",
        "outputId": "c1b49f8b-11e1-45e3-fe6e-92ee5171d642"
      },
      "source": [
        "# Generate a random sample of index\n",
        "data_samples = np.random.randint(0,high=len(data_x)-1, size=10)\n",
        "for i,data_idx in enumerate(data_samples):\n",
        "  print(\"Label:\",data_y[data_idx],\", Text:\",data_x[data_idx])"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Label: health , Text: Dr. Sanjay Gupta's coronavirus podcast for March 25: Searching for treatments  (CNN) Currently there is no proven treatment or cure for Covid-19, but scientists around the globe are working to find one. In today's edition of \"Coronavirus: Fact vs. Fiction,\" CNN Chief Medical Correspondent Dr. Sanjay Gupta explains some of the drug names floating around and what we know about them.  You can listen on your favorite podcast app or read the transcript below: President Donald Trump: So chloroquine or hydroxychloroquine. Now, this is a common malaria drug. Dr. Sanjay Gupta: That was President Trump last Thursday.  Maybe you've been watching the White House briefings and heard from the president that an old drug is being repurposed as an experimental treatment for Covid-19.   Trump: And it's shown very encouraging — very, very encouraging early results.  And we're going to be able to make that drug available almost immediately.   Dr. Gupta: Last Friday, a reporter asked coronavirus task force member Dr. Anthony Fauci whether there was any evidence that chloroquine was effective against Covid-19. Fauci said, \"No.\" Dr. Anthony Fauci: The information that you're referring to specifically is anecdotal; it was not done in a controlled clinical trial. So you really can't make any definitive statement about it.  Dr. Gupta: If you're confused, you're not alone.   Let me start by saying this: There is currently no proven treatment or cure for the novel coronavirus. But I can see how that might sometimes be unclear, since some drug names are being talked about as if they may be already working.   Names like chloroquine and remdesivir. They're hard to pronounce -- and even harder to prove that they're effective.  So in this episode, I'll break down the latest information and also answer some of your questions about possible drug treatments for the coronavirus.   I'm Dr. Sanjay Gupta, CNN's Chief Medical Correspondent. And this is \"Coronavirus: Fact vs. Fiction.\"   Dr. Gupta: First, let's talk about how our government officials are describing a drug called chloroquine. Trump: This has been something that's been around for many years. It's been a phenomenal, strong, powerful drug for malaria. But we think it might work on this.   Dr. Gupta: Chloroquine is used to treat malaria, and has been around for decades. But it has not been approved as a treatment for the coronavirus. Here's CNN's medical analyst and infectious disease specialist, Dr. Celine Gounder.   Dr. Celine Gounder: This is not a slam dunk. This is early, promising research. But that doesn't mean this is going to work.  Dr. Gupta: The president also tweeted over the weekend that a related drug, hydroxychloroquine, in combination with an antibiotic commonly known as a Z-Pak, could become quote \"game changers.\"  This is largely based on a very small study in France that excluded some people who either left the hospital, stopped taking the drug due to side effects, or got worse -- including one person who died. We still don't have enough evidence that these drugs are effective in humans. That's why in some states, they are beginning to experiment. New York Gov. Andrew Cuomo: Hydroxychloroquine, which the president speaks about, and is optimistic about, and we hope for optimistic results, also. We're actually starting that today. Dr. Gupta: That's New York Gov. Andrew Cuomo. He recently announced that the state had procured thousands of doses of chloroquine and hydroxychloroquine and would begin trials starting Tuesday. The state will also begin testing another experimental treatment using the plasma of people who have recovered. It's called convalescent serum.  Cuomo: What it does is it takes the plasma from a person who has been infected with the virus, processes the plasma, and injects the antibodies into a person who is sick.   Dr. Gupta: The other drug name being floated around is an antiviral called remdesivir. It's already being tested on adults diagnosed with the coronavirus in the United States and China.  The Director of the US Centers for Disease Control and Prevention, Dr. Robert Redfield, discussed remdesivir in congressional testimony earlier this month.   CDC Director Robert Redfield: We're going to know probably by April whether that drug works or not, and that's important because that's a drug that can save lives if it works.  Dr. Gupta: Gilead Sciences, which manufactures remdesivir, is pulling back on emergency requests for the drug due to overwhelming demand. The company is instead focusing its efforts on giving out the drug in clinical trials, hoping to prove its effectiveness against Covid-19. I want to reiterate that we don't know how effective any of these treatments will be. While a number of patients have already received drugs like chloroquine and remdesivir, it's too early to know how much of an impact the drugs actually had. That's why doctors are conducting studies in the US, China and all over the world, to better understand what happens when you give these drugs to a Covid patient.  Getting the results could take months. And in the meantime, we have to be careful about creating false hope.    News report: A man in Arizona has died after ingesting chloroquine phosphate, believing that it would prevent him from contracting coronavirus. Dr. Gupta: Banner Health, a company that operates acute-care hospitals, released a statement on Monday confirming that a man in Arizona had died after taking a form of chloroquine used to clean aquariums. His wife is currently in critical care. NBC News spoke to the wife who said they learned of the drug's connection to the coronavirus during a news conference on TV. In Nigeria, health officials issued a warning about chloroquine, saying three people overdosed on the drug after hearing it described as a possible treatment.  Dr. Gupta: I can't stress enough how vital it is that you don't use or consume anything unless specifically recommended by your doctor.   You're likely to soon hear other drug names mentioned as well. Nevan Krogan, a senior investigator at the Gladstone Institute of Data Science and Biotechnology in San Francisco, worked on a study published last weekend that identified 69 existing drugs that could be tested against the coronavirus.  Nevan Krogan: In total, we identified 332 proteins talking to or connected to the coronaviral proteins. And we identified 69 different drugs and compounds that are known to target at least one of these 332 proteins. And this corresponds to 27 different FDA-approved drugs and the remaining are in clinical or pre-clinical trials.  Dr. Gupta: Krogan said testing out drugs that are already FDA-approved could drastically speed up the process of finding a treatment that is safe and effective for humans.  And then there's the prospect of a vaccine. Experts say one wouldn't be ready this year. Drug and vaccine tests take months or years in order to be proven safe for humans, and there are multiple stages of those trials. But Krogan is optimistic that the global response from scientists now will set a precedent for getting to a solution faster in the future. Krogan: For me, I would argue that what we're seeing is a new paradigm of how to do science. And I hope we're setting up an infrastructure here that could be beneficial, not just for Covid-19, but for the future, for Covid-22, Covid-24 [and] what other virus comes online over the next several years, and they will be coming. Dr. Gupta: Our best protection for now: social distancing, washing our hands, looking out for ourselves and our loved ones, trying to help out wherever we can, and behaving like we might have the virus. If you have questions, you can record them as a voice memo and email them to asksanjay@cnn.com -- we might even include them in the podcast.  We'll be back tomorrow. Thanks for listening.   \n",
            "Label: politics , Text: Obama pays tribute to Ginsburg and says her seat should not be filled until after next president sworn in  (CNN)Former President Barack Obama on Friday paid tribute to Supreme Court Justice Ruth Bader Ginsburg, calling on Senate Republicans to follow the precedent set when they refused to consider his Supreme Court nominee in 2016 and not consider a replacement for the high court until after the next president is sworn in. \"Ruth Bader Ginsburg fought to the end, through her cancer, with unwavering faith in our democracy and its ideals. That's how we remember her. But she also left instructions for how she wanted her legacy to be honored,\" Obama said in a statement of the liberal justice who died Friday at age 87. Days before her death, Ginsburg told her granddaughter that her \"most fervent wish is that I will not be replaced until a new president is installed,\" NPR reported.  Ginsburg's death -- and Senate Majority Leader Mitch McConnell's subsequent statement that \"(President Donald) Trump's nominee will receive a vote on the floor of the United States Senate\" -- opens up a political fight over the future of the court less than seven weeks before Election Day. The vacancy on the bench creates what many conservatives view as a once-in-a-generation opportunity to move the makeup of the court from its current split of five conservative justices and four liberal justices to a more dominant 6-3 majority. Obama on Friday pointed to the precedent set by Republicans in 2016 when they refused to fill the Supreme Court vacancy created by the death of Justice Antonin Scalia, even though he had nominated Merrick Garland for the seat in March of that year -- months before the presidential election.  McConnell -- then the leader of the Senate, as he is now -- insisted that not only would Garland not receive a full Senate floor vote but also that he would not even get a confirmation hearing in front of the Judiciary Committee, saying at the time that the \"American people should have a say in the court's direction.\" \"Four and a half years ago, when Republicans refused to hold a hearing or an up-or-down vote on Merrick Garland, they invented the principle that the Senate shouldn't fill an open seat on the Supreme Court before a new president was sworn in,\" Obama said. \"A basic principle of the law -- and of everyday fairness -- is that we apply rules with consistency, and not based on what's convenient or advantageous in the moment,\" he continued. \"The rule of law, the legitimacy of our courts, the fundamental workings of our democracy all depend on that basic principle. As votes are already being cast in this election, Republican Senators are now called to apply that standard.\" The issues before the court, the former President said, \"are too consequential to future generations for courts to be filled through anything less than an unimpeachable process.\" Obama's statement joined a chorus of Democrats, including Democratic nominee and former Vice President Joe Biden, mourning the late liberal justice and demanding that voters dictate the next president before her replacement is chosen. \"Tonight and in the coming days, we should focus on the loss of the justice, and her enduring legacy,\" Biden told reporters Friday night after returning to Delaware from a campaign event. \"But there is no doubt, let me be clear, that the voters should pick the president, and the president should pick the justice for the Senate to consider.\" Obama, in his statement, praised Ginsburg as a \"warrior for gender equality\" and \"relentless litigator and an incisive jurist\" who \"helped us see that discrimination on the basis of sex isn't about an abstract ideal of equality; that it doesn't only harm women; that it has real consequences for all of us.\" \"Justice Ginsburg inspired the generations who followed her, from the tiniest trick-or-treaters to law students burning the midnight oil to the most powerful leaders in the land,\" Obama wrote. \"Michelle and I admired her greatly, we're profoundly thankful for the legacy she left this country, and we offer our gratitude and our condolences to her children and grandchildren tonight.\" CNN's Caroline Kelly, Eric Bradner and Maeve Reston contributed to this report. \n",
            "Label: health , Text: Lewy body dementia: The life-changing disease that devastated Robin Williams  (CNN)Alzheimer's disease and dementia are two diseases that many Americans are all too familiar with, but there is another dementia that plagued the late comedian Robin Williams. It might be \"the most common disease you've never heard of,\" said Dr. James Galvin, a professor of neurology and director of the Lewy Body Dementia Research Center of Excellence at the University of Miami's Miller School of Medicine.  Williams had Lewy body dementia, which his family learned only after his death. It's often misdiagnosed as Alzheimer's or Parkinson's disease due to its early similarity to those other neurodegenerative diseases.  That unfortunate misconception is one focus of \"Robin's Wish,\" a documentary releasing September 1 about the final days of Williams, before he died by suicide in 2014. Affecting about 1.4 million Americans, Lewy body dementias — which include Lewy body dementia and Parkinson's disease dementia — are the second most common form of dementia after Alzheimer's disease, according to the Lewy Body Dementia Association.  Dementia is a disorder of mental processes characterized by memory disorders, personality changes and impaired reasoning due to brain disease or injury.  Lewy body dementia is associated with an accumulation of a protein called alpha-synuclein that \"builds up and deposits inside of cells and some classic areas in the brain,\" said Dr. Ford Vox, medical director of the Disorders of Consciousness Program at the Shepherd Center in Atlanta and a contributor for CNN. Parkinson's disease dementia, the other Lewy body dementia, starts as a movement disorder but progresses to include dementia and mood and behavioral changes. When working properly, alpha-synuclein — which is typically present in the brain and in small amounts in the heart, muscle and other tissues — might play a role in regulating neurotransmitters. But when this protein aggregates and forms masses (called Lewy bodies) within the brain, the consequences are severe.  The most common symptoms of LBD include impaired thinking, fluctuations in attention, problems with movement, visual hallucinations, sleep disorders, behavioral and mood issues and changes in bodily functions such as the ability to control urinating. Over time, people with LBD lose \"layer upon layer of ... that life that you've built,\" said Angela Taylor, the senior director of research and advocacy at the Lewy Body Dementia Association.   That's what happened to Williams, who had been diagnosed with Parkinson's disease in 2013.  It wasn't until his autopsy that his widow, Susan Schneider Williams, learned he actually had LBD. The film highlights how the disease devastated Williams' health.  \"My husband had unknowingly been battling a deadly disease,\" Schneider Williams said in the documentary's trailer. \"Nearly every region of his brain was under attack. He experienced himself disintegrating.\"   CNN founder Ted Turner is also battling the disease, as he revealed in a 2018 interview.  Experiences of dysfunction and ambiguity are common for many patients and their families. Here is what the disease really is, why it's difficult to identify and how it damages people's lives.  An elusive and insidious disease The first published cases of Lewy body dementia occurred in the mid-1960s, but it took two decades for the disorder to be recognized by medical researchers.  \"In the 1980s, as the molecular understanding of Alzheimer's improved, it became clear that a bunch of these people didn't seem to fit that (diagnosis),\" Galvin said.  For example, patients with LBD had visual hallucinations when most Alzheimer's patients didn't. They also had more parkinsonism — the signs and symptoms of Parkinson's disease, which include slowness, stiffness, tremors and imbalance — than Alzheimer's patients. \"It wasn't until the mid-'90s when a large group of people (the Dementia with Lewy Bodies Consortium) got together and coined the phrase 'dementia with Lewy bodies' and started to write diagnostic criteria that could be applied,\" Galvin added. \"And that really changed the game because once you have criteria, then people can start to be better classified.\"  Aside from the association with Lewy bodies — those abnormal accumulations of the protein alpha-synuclein in the brain — the exact cause of LBD is unknown.  Potential, but rare, genetic factors include higher levels of mutations of certain enzymes and a family gene that might make someone predisposed to the disease.  Sorting through the symptoms  Some patients exhibit movement disorders that doctors first diagnose as Parkinson's disease. If those patients later develop dementia, they would then be diagnosed with Parkinson's disease dementia.  Others may begin with cognitive or memory disorders mistaken for Alzheimer's disease. More specific changes in their cognitive function over time can lead to the diagnosis \"dementia with Lewy bodies.\"  Rarely will some individuals first show neuropsychiatric symptoms, which can include hallucinations, behavioral problems and difficulty with mental activities. When those appear simultaneously, that can prompt an initial diagnosis of LBD.  To specifically and accurately diagnose a person with LBD, doctors have to ask the right questions about his symptoms, Vox said. Delusions for Alzheimer's patients might occur late in the disease and be ill-formed, appearing as paranoia or mistrust — such as thinking a spouse is cheating. For LBD patients, delusions happen earlier and are well-formed misidentifications, such as looking at a loved one and thinking she has been replaced by an identical impostor. \"The more detailed the assessment,\" Galvin said, \"the easier it is to separate out the conditions.\"  Because Lewy body proteins can't be tested like Alzheimer's proteins can, cases of LBD are often diagnosed during hospitalization for something else, Vox said. Or diagnosis can happen postmortem, when the family requests an autopsy for closure, to gain more context for any doubts or to donate the brain for research, Taylor said.  Transforming mental, cognitive and physical health The symptoms may first hinder a person's ability to work, Taylor said. Then they can disrupt their ability to drive; manage their affairs and health; be socially active; dress themselves; and shower. A person might also become unable to control involuntary behaviors, Galvin said, resulting in constipation, drooling, low blood pressure or the inability to control urine or bowel movements. A person's inability to visually perceive the spatial relationships of objects can lead to car accidents or injuries. People with LBD can experience anxiety, depression and REM sleep disorder — in which people lose the muscle paralysis that normally occurs during deep stages of sleep and physically (and sometimes violently) act out their dreams. Once a person is finally diagnosed, the life expectancy is about four to five years, Vox said.  \"They're losing the essence of who they are slowly over time,\" Taylor said. \"That's a journey that is a very difficult one.\"  Research to improve diagnoses and treatments is underway, but there are currently no treatments for Lewy body dementia specifically. Most patients are treated with medications for Alzheimer's or Parkinson's disease, since the symptoms of LBD are similar. However, treating the various symptoms of LBD with medications not fine-tuned for the condition can be a \"real art\" and quickly fill up a patient's medicine cabinet, Vox said.   \"You have to weigh costs-benefits of treating this versus that, or get double effects of this medication and a little bit of that as well,\" he said.   Newfound challenges for patients and families Lewy body dementia can be a harrowing experience for both patients and their families.  Getting a diagnosis can be a matter of months- to yearslong \"doctor shopping,\" Galvin said.  Executive dysfunction can lead to behaviors that family members initially perceive as bad judgments. Delusions can make them frustrated and fearful.   \"As a caregiver, I think one of the challenges is recognizing that we cannot use the same skills and interpersonal dynamics that we came to rely on in our relationship with the person with LBD,\" Taylor said.  \"We have to develop new ones because you cannot reason with somebody who is having a hallucination or delusion. Sometimes you have to more step into their reality and empathize (and) learn a new way to offer assistance without them feeling like they're being treated like a child.\"   Living with Lewy body disease It's possible that the same healthy diet, sleep and exercise routines that have been found to mitigate symptoms of Alzheimer's and Parkinson's diseases might also help people with LBD.  \"So exercise is very important in Lewy body dementia, too,\" Taylor said, \"because it's biologically related to Parkinson's disease and shares a lot of the same symptoms.\"  For patients and families in need of support and guidance, the Lewy Body Dementia Association is equipped with such resources.  \"Nobody should face LBD alone,\" Taylor sasid. \"Not the person with LBD and not the family caregiver. This disease doesn't make anything really easy in life. And they shouldn't have to go through it without a guide and a support.\"   \n",
            "Label: politics , Text: New revelations reinforce concerns that Trump's political motives are a higher priority than Americans' health Washington (CNN)A series of new revelations about the federal government's coronavirus response could reinforce concerns about whether the Trump administration's political motives were a higher priority than the health of Americans.  The New York Times reported Thursday that a US Centers for Disease Control and Prevention recommendation narrowing the scope of who should get tested for coronavirus was not written by CDC scientists, but \"dropped\" into the CDC's public-facing website by the Department of Health and Human Services. The Washington Post recently revealed that this past spring, the US Postal Service and HHS were working on a plan to send masks to heavily infected areas and eventually nationwide. But the idea was reportedly nixed by the White House out of concern receiving masks could cause panic. And on Friday, President Donald Trump told reporters that there will be enough coronavirus vaccines for all Americans by April, once again contradicting estimates made by medical experts within his own administration. But thus far, despite Trump's optimistic outlook, no vaccine currently in trials has been approved by the US Food and Drug Administration.  Reacting to Trump's prediction, an administration health official cautioned that timing depends on the vaccine development process, which is still under way. The official went on to say that Americans may still not be able to get back to normal life until the third or fourth quarter of next year, essentially backing up what CDC Director Dr. Robert Redfield said earlier this week. The new reports suggest Trump's comments to journalist Bob Woodward in the early stages of the pandemic in the US trickled down to the different agencies responsible to the federal government's coronavirus response -- that despite knowing the coronavirus was \"deadly stuff,\" Trump \"wanted to always play it down.\"  Whether it was purposeful or not, in both stories, agencies appeared to opt for more Trump-friendly strategies downplaying the urgency of the pandemic.  According to the Times, the CDC's guidelines dropped in by HHS were published despite the objections of CDC scientists. And when they were made public, HHS did not subject the language to the CDC's rigorous scientific review process. A federal official close to the process similarly told CNN last month the new directive came from the top down. A source also told CNN on Friday that the guidance was sent to the CDC by HHS.  CNN previously reported that the change was made on August 24, updating its recommendation for coronavirus testing \"for all close contacts of persons with SARS-CoV-2 infection\" to stating that some people without symptoms may not need to be tested, even if they've been in close contact with someone known to have coronavirus. The change came after Trump said earlier in the summer that testing was a \"double-edged sword\" because, he argued, it showed more positive cases.  The President also said he wasn't kidding when he told rallygoers he had asked staff to slow down testing. But federal health officials have maintained that they have not been told to slow down coronavirus testing.  On Friday, the CDC updated the testing guidance once again, rolling back HHS' changes. The updated guidance once again stresses that anyone who has been in contact with an infected person should be tested for coronavirus.  The USPS and HHS, according to the Post, had a plan this spring to begin distributing face masks nationwide by first targeting shipments to the hardest hit areas of the country.  The plan had gone so far that the USPS had drafted a press release for the distribution plan.  But the White House scrapped the plan, instead opting for an HHS program, Project America Strong, to distribute \"reusable cotton face masks to critical infrastructure sectors, companies, healthcare facilities, and faith-based and community organizations across the country.\"   One administration official told the Post: \"There was concern from some in the White House Domestic Policy Council and the office of the vice president that households receiving masks might create concern or panic.\"  Speaking to reporters on Friday, the President said he didn't know why the USPS' plan to distribute face masks was canceled.  \"If those masks had gone out, and you look at the calculations, you model this on other countries, you see what has happened, and it seems like maybe 80% of the people who died could have been saved,\" Dr. Sanjay Gupta, CNN's chief medical correspondent, told \"New Day\" in response to the Post's report.  There was evidence by April, when the USPS had prepared for the mask distribution, that coronavirus could spread between asymptomatic individuals. That month, the administration recommended Americans wear cloth facial coverings.  Trump said at the time that the recommendations, which came after a week of heated deliberations inside the White House, were voluntary and that he would not partake. The President has since worn a mask infrequently in public and, most recently, questioned their effectiveness.  CNN's Nikki Carvajal and Jim Acosta contributed to this report. This story has been updated to reflect new reporting. \n",
            "Label: politics , Text: White House email says 'all contact tracing' is complete  (CNN)The White House told staff in an email on Tuesday that it had completed \"all contact tracing\" for positive Covid-19 cases identified at the White House, and urged anyone who hasn't been contacted and suspects they have had contact with someone infected by the virus to reach out to the White House Medical Office. The email, reviewed by CNN, was sent to staff working across the White House complex, following revelations of new infections that include President Donald Trump and first lady Melania Trump, as well as many top White House advisers. The West Wing had been reluctant to enforce any such regulations among staff, particularly with regard to masks, for fear of undermining the President's efforts to show that his administration has the pandemic under control.  But after several of the President's top aides, including Hope Hicks, press secretary Kayleigh McEnany and senior adviser Stephen Miller, tested positive in recent days, as well as other midlevel staffers, the White House has been forced to take rushed steps to prevent the spread from getting even worse. However, New York Times White House correspondent and CNN contributor Michael Shear, who tested positive for the virus following direct interaction with White House officials, told CNN late Tuesday that there's been no outreach by the White House to do contact tracing or to follow up on his condition. At least one other White House official told CNN that they've also alerted officials that they have had direct contact with positive White House personnel, and received no guidance on how to proceed. The email also laid out new guidance with regard to masks, mandatory random testing of employees, quarantining and coming to work with Covid-19 symptoms.  On contract tracing, the email said that \"the White House medical unit, with assistance from the CDC, has completed all contact tracing for positive COVID-19 cases that have been identified at the White House.\" It defined close contact \"as contact within six feet for over 15 minutes within 48 hours of symptoms or a positive COVID-19 test.\" On masks, the email notes: \"We continue to encourage staff to use a mask or facial coverings, especially when social distancing is not an option. As a reminder, we require everyone who enters the West Wing to wear a mask or facial covering.\"  The medical unit is supplying masks to those in need, and masks are also available \"at every entrance to the West Wing,\" the email said. Mandatory random Covid-19 testing is also being conducted for all employees working at the Executive Office of the President, known as EOP.  \"Failure to report to testing will be considered a refusal to test,\" the email notes, and states that deferrals of testing may be obtained by staff who have been teleworking for the past 30 days, plan to in the next 14 days, have been traveling or on previously approved leave. The email described new guidance on returning to the White House after quarantining, saying that \"if you have tested positive for Covid-19, are quarantining due to a close contact or are self-isolating due to symptoms, you MUST be cleared by the White House Medical Unit prior to returning to the EOP Campus. Staff who have fulfilled quarantining requirements (10 days after Covid diagnosis/14 days for close contacts) will be cleared for return to work upon receiving a negative Covid-19 test.\" Any White House staff experiencing Covid-19 symptoms, including sore throat, cough, fever, headache, new loss of taste or smell, muscle aches, chills, diarrhea or difficulty breathing, were asked to \"please stay home and do not come to work until you are free of any symptoms.\"             \n",
            "Label: entertainment , Text: Fox's Chris Wallace fact checks Trump  (CNN Business)In a video clip released Friday by Fox News, \"Fox News Sunday\" host Chris Wallace previewed his interview with President Donald Trump, in which he fact-checked Trump in real time by questioning his assertion that Joe Biden wants to \"abolish\" the police.  In the interview, Trump accused Democrats of running major cities \"poorly,\" and then went on to repeat his campaign's lie that the former VP and presumptive Democratic Party nominee for president wants to rid the country of police. \"Sir, he does not,\" Wallace shot back.  Trump doubled down, saying Biden had \"signed a charter\" with Sen. Bernie Sanders, a reference to a 110-page document with policy recommendations crafted by allies of the former vice president and his former rival for the presidency.  \"It says nothing about defunding the police,\" Wallace pointed out. Trump wasn't having it, responding, \"Oh really? It says abolish, it says. Let's go, get me the charter, please.\"  The video clip stopped there. But when Wallace previewed his Sunday interview with Fox anchor Bill Hemmer, he offered a hint as to what happened next.  Wallace said Trump \"went through\" the charter and \"found a lot of things that he objected to that Biden has agreed to, but couldn't find any indication -- because there isn't any -- that Joe Biden has sought to defund and abolish the police.\"   \n",
            "Label: health , Text: US government and Pfizer reach $1.95 billion deal to produce millions of Covid-19 vaccine doses  (CNN)The US Department of Health and Human Services and Department of Defense announced on Wednesday a $1.95 billion agreement with Pfizer to produce 100 million doses of a Covid-19 vaccine in the United States. The deal also allows the US government to acquire an additional 500 million doses.  The initial 100 million vaccines will belong to the federal government, although the vaccine will need emergency use authorization from the US Food and Drug Administration to be distributed. The vaccine developers, Pfizer and BioNTech, still need to complete a large Phase 3 clinical trial to show the vaccine effectively protects people from the coronavirus. If the vaccine is successful and receives EUA or licensure, nationwide delivery would begin in the fourth quarter of 2020, according to HHS. The Pfizer doses would be delivered to locations at the US government's direction. HHS Secretary Alex Azar said in a press release that the US government is collecting different vaccines through the Operation Warp Speed program in order to have at least one effective Covid-19 vaccine available to Americans. According to the World Health Organization, two dozen Covid-19 vaccines are in clinical trials around the world. The Pfizer vaccine would be available to American people at no cost, the HHS press release says. Health care professionals could charge insurers for vaccine administration. Any Covid-19 vaccine that is sponsored by the government will be free or affordable for the Americans, Azar said on CNBC Wednesday. \"For any vaccine that we have bought -- so for instance, the Pfizer vaccine -- those hundred million doses would actually be acquired by the US government, then given for free to Americans,\" Azar said. He said it was the same with the AstraZeneca and the Novovax vaccine, and they continue to be in discussion about the others. \"We will ensure that any vaccine that we're involved in sponsoring is either free to the American people or is affordable,\" Azar said. For the Pfizer vaccine, the Biomedical Advanced Research and Development Authority collaborated with the DoD Joint Program Executive Office for Chemical, Biological, Radiological and Nuclear Defense and Army Contracting Command to provide $1.95 billion for the production and nationwide delivery of the first 100 million doses. \"We've been committed to making the impossible possible by working tirelessly to develop and produce in record time a safe and effective vaccine to help bring an end to this global health crisis,\" Dr. Albert Bourla, Pfizer chairman and CEO said in a separate release from the company. \"We made the early decision to begin clinical work and large-scale manufacturing at our own risk to ensure that product would be available immediately if our clinical trials prove successful and an Emergency Use Authorization is granted.\" Preliminary data released in a pre-print paper this week by Pfizer and BioNTech said its Covid-19 vaccine appeared safe and elicited antibody and T cell immune responses in a Phase 1/2 trial. However, more research is needed; Pfizer and BioNTech said they could start a Phase 3 trial of the vaccine in late July if they receive regulatory approval.  \n",
            "Label: health , Text: UK Covid-19 trial ends hydroxychloroquine study because there's no evidence the drug benefits patients   (CNN)Researchers in the United Kingdom have put an abrupt stop to an arm of their Covid-19 trial that involves the antimalarial drug hydroxychloroquine. The Recovery trial, a large UK-based trial investigating potential coronavirus treatments, has stopped including hydroxychloroquine in its study due to there being \"no evidence of benefit,\" researchers announced on Friday. Other arms in the trial, which has enrolled more than 11,000 patients from 175 hospitals across the UK, will continue. \"We reviewed the data and concluded that there is no evidence of a beneficial effect of hydroxychloroquine in patients hospitalized with Covid and decided to stop enrolling patients to the hydroxychloroquine arm, with immediate effect, and that has been actioned this morning,\" Martin Landray, deputy chief investigator of  the trial and a professor at the University of Oxford, said during a media briefing on Friday. As part of the trial, 1,542 Covid patients were randomly selected to receive hydroxychloroquine as a treatment compared with 3,132 patients who received the usual standard care.  The data showed that after about 28 days, 25.7% of the patients who received hydroxychloroquine had died compared with 23.5% of patients who received usual care alone. \"That is not statistically significant, but as you can see from the numbers, that result shows that there's really no evidence of a benefit,\" Landray said.  \"I think we can say that this data convincingly rule out any meaningful mortality benefit,\" Landray said. \"Our conclusion is that this treatment does not reduce the risk of dying from Covid among hospital patients. That clearly has a significant importance for the way that patients are treated not only in the UK, but all around the world.\" Last week, the World Health Organization temporarily paused the hydroxychloroquine arms of its Solidarity Trial due to concerns surrounding the drug's safety and in order to review its own data. Then on Wednesday, after that review, WHO announced that it decided to resume studying hydroxychloroquine as a potential Covid-19 treatment in the trial. Peter Horby, chief investigator for the Recovery Trial and a professor at the University of Oxford, said on Friday that his colleagues and he have notified WHO about the data found in their trial and the decision to end this arm of the study. \"We've been on the telephone this morning with the World Health Organization,\" Horby said during Friday's presser. \"They will be convening their committee to reconsider their decision based on the events of today.\" WHO confirmed during a media briefing in Geneva on Friday that it had received notice from the organizers of the Recovery trial that the trial ended its hydroxychloroquine arm. \"As Solidarity and Recovery are two of the larger trials, and moreover they have very, very similar study designs, we have been in touch,\" Dr. Soumya Swaminathan, WHO chief scientist, said during the briefing. \"They informed us about the preliminary results, which they have gone to the press with. We await to see the final data analysis and the publication that's going to come out of it and certainly our committee will be considering these results as we go on,\" Swaminathan said. \"However, they are two distinct trials, with their own protocols, their own oversight committees and therefore we will continue for now and our committee will consider the data as it becomes available.\"  \n",
            "Label: politics , Text: Trump campaign adviser says rally protocols won't change after President's coronavirus diagnosis Washington (CNN)A senior adviser to President Donald Trump's reelection campaign said Sunday there won't be any additional safety protocols for upcoming rallies following the President's hospitalization after contracting Covid-19. Senior campaign adviser Jason Miller, when pressed by CNN's Ana Cabrera on the safety of the Trump's campaign rallies which have largely flaunted best public health practices, said the campaign would take the temperature of attendees while providing face masks and hand sanitizer -- the same steps that were in place before Trump's diagnosis.  \"You know what, that's been a very safe and responsible thing to do,\" Miller said. \"That's what we've done from the beginning of this.\" His comments, paired with Trump's Sunday photo-op in which he left the hospital with his security detail so he could ride in an SUV passing supporters, raise more questions about whether the President and his campaign grasp the seriousness of a highly contagious and deadly disease. This, even as Trump's doctors earlier Sunday provided concerning details about the President's condition to reporters, including several alarming drops in his oxygen levels. The President has experienced \"two episodes of transient drops in his oxygen saturation,\" Trump's physician, Navy Cmdr. Dr. Sean Conley said.  The first significant episode occurred late Friday morning when, Conley said, the President had \"a high fever and his oxygen saturation was transiently dipping below 94%.\"  The President was given oxygen at that point, Conley said, answering a question he had evaded during his Saturday briefing. Still, Miller's comments underscore the importance that Republicans believe rallies play in Trump's White House bid.  The Trump campaign and White House paused in-person rallies for months during the pandemic, but as the President's poll numbers lagged, rallies were put back on Trump's schedule.  Earlier Sunday, Miller even claimed that Democratic presidential nominee Joe Biden uses face masks as a \"prop.\" \"I would say that with regard to Joe Biden, I think too often he's used the mask as a prop,\" Miller told ABC's George Stephanopoulos. \"(Wearing a) mask is very important, but even if he's -- he could be 20, 30 feet away from the nearest person and still have the mask on.\" CNN's Maeve Reston, Dan Merica, Ryan Nobles and Donald Judd contributed to this report.  \n",
            "Label: entertainment , Text: 'Tenet' release delayed to August  (CNN)The theatrical release of Christopher Nolan's \"Tenet\" has been delayed again. As theaters have closed and only gradually begun to reopen in places due to the coronavirus pandemic, Warner Bros. has moved release of the sci-fi movie back twice, from July 17 to July 31, and now to Aug. 12.  \"Warner Bros. is committed to bringing Tenet to audiences in theaters, on the big screen, when exhibitors are ready and public health officials say it's time,\" the studio announced in a statement Thursday. \"In this moment what we need to be is flexible, and we are not treating this as a traditional movie release. We are choosing to open the movie mid-week to allow audiences to discover the film in their own time, and we plan to play longer, over an extended play period far beyond the norm, to develop a very different yet successful release strategy.\" Although the plot remains mysterious, the movie's trailers show espionage is a theme.  The film stars John David Washington, Robert Pattinson, Elizabeth Debicki, Dimple Kapadia and Michael Caine. Warner Bros. and CNN share parent company WarnerMedia.  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "li9USkFGGOGL"
      },
      "source": [
        "#### **Split Data** \n",
        "We split data into train and validation by randomly selecting 20% as the validation set."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oqYrRaEiGRjU",
        "outputId": "8a82a9d0-5483-47c9-d7e2-507c75d7f8da"
      },
      "source": [
        "validation_percent = 0.20\n",
        "\n",
        "# Split data into train / validate\n",
        "train_x, validate_x, train_y, validate_y = train_test_split(data_x, data_y, test_size=validation_percent)\n",
        "\n",
        "print(\"train_x count:\",len(train_x))\n",
        "print(\"validate_x count:\",len(validate_x))"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_x count: 736\n",
            "validate_x count: 184\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EiwNjdq1GZjG"
      },
      "source": [
        "### **Build Data Pipelines**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NzhR2UFXGjAh"
      },
      "source": [
        "#### **Text Vectorization**\n",
        "\n",
        "[Reference](https://www.tensorflow.org/api_docs/python/tf/keras/layers/experimental/preprocessing/TextVectorization)\n",
        "\n",
        "Since machines cannot read text directly, we need to transform text into numerical vectors. Here is a common procedure of generating Text Vectors.\n",
        "- Standardize each sample (usually lowercasing + punctuation stripping)\n",
        "- Split each sample into substrings (usually words)\n",
        "- Recombine substrings into tokens (usually ngrams)\n",
        "- Index tokens (associate a unique int value with each token)\n",
        "- Transform each sample using this index, either into a vector of ints or a dense float vector"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OyBjXXX7HQnv"
      },
      "source": [
        "# Text Vectorization\n",
        "def standardize_text(input_text):\n",
        "  # Convert to lowercase\n",
        "  lowercase = tf.strings.lower(input_text)\n",
        "  # Remove HTML tags\n",
        "  stripped_html = tf.strings.regex_replace(lowercase, \"<br />\", \" \")\n",
        "  return tf.strings.regex_replace(\n",
        "      stripped_html, \"[%s]\" % re.escape(string.punctuation), \"\"\n",
        "  )"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pbT2Ad_HHROx",
        "outputId": "fe5a9b48-6845-4f89-f059-b9008c28ae71"
      },
      "source": [
        "# Define parameters for TextVectorization\n",
        "# max_token controls the vocabulary size based on frequency\n",
        "# output_sequence_length controls the length of each vector. If set, \n",
        "# the initial vector would be padded or truncated to match the specified length.\n",
        "\n",
        "max_features = 15000\n",
        "sequence_length = 1000\n",
        "\n",
        "# Initialize Text Vectorizer\n",
        "text_vectorizer = TextVectorization(\n",
        "    standardize=standardize_text,\n",
        "    max_tokens=max_features,\n",
        "    output_mode=\"int\",\n",
        "    output_sequence_length=sequence_length,\n",
        ")\n",
        "\n",
        "# Create the vocabulary of entire dataset\n",
        "text_data = tf.data.Dataset.from_tensor_slices(data_x)\n",
        "\n",
        "# Generate Text Vector\n",
        "start_time = time.time()\n",
        "text_vectorizer.adapt(text_data.batch(64))\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Execution time (mins)\",execution_time)\n",
        "\n",
        "# Get Vocabulary\n",
        "vocabulary = text_vectorizer.get_vocabulary()\n",
        "vocabulary_size = len(vocabulary)\n",
        "print(\"Vocabulary Size:\",vocabulary_size)\n",
        "# Generate word index\n",
        "word_index = dict(zip(vocabulary, range(vocabulary_size)))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Execution time (mins) 0.007613853613535563\n",
            "Vocabulary Size: 15000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D5agxNn6QQOJ",
        "outputId": "757d0c47-70b7-4375-c0e1-a0762f45b2a4"
      },
      "source": [
        "# Check Vocabulary : 0 is reserved for padding and index 1 is reserved for \"out of vocabulary\" tokens\n",
        "print(\"Vocabulary:\",vocabulary[:20])\n",
        "print(\"Vocabulary Size:\",len(vocabulary))"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Vocabulary: ['', '[UNK]', 'the', 'to', 'and', 'of', 'a', 'in', 'that', 'for', 'is', 'on', 'said', 'with', 'as', 'it', 'have', 'are', 'be', 'at']\n",
            "Vocabulary Size: 15000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C-Swja1aZr2f",
        "outputId": "92110968-620c-4cba-8ecc-021c646f3f48"
      },
      "source": [
        "# Test our text vectorizer\n",
        "test_text = data_x[data_samples[0]]\n",
        "print(test_text)\n",
        "test_text_vector = text_vectorizer([test_text])\n",
        "print(\"Shape:\",test_text_vector.shape)\n",
        "# display only the first 20 tokens of the sample 0\n",
        "print(test_text_vector[0,:20])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Dr. Sanjay Gupta's coronavirus podcast for March 25: Searching for treatments  (CNN) Currently there is no proven treatment or cure for Covid-19, but scientists around the globe are working to find one. In today's edition of \"Coronavirus: Fact vs. Fiction,\" CNN Chief Medical Correspondent Dr. Sanjay Gupta explains some of the drug names floating around and what we know about them.  You can listen on your favorite podcast app or read the transcript below: President Donald Trump: So chloroquine or hydroxychloroquine. Now, this is a common malaria drug. Dr. Sanjay Gupta: That was President Trump last Thursday.  Maybe you've been watching the White House briefings and heard from the president that an old drug is being repurposed as an experimental treatment for Covid-19.   Trump: And it's shown very encouraging — very, very encouraging early results.  And we're going to be able to make that drug available almost immediately.   Dr. Gupta: Last Friday, a reporter asked coronavirus task force member Dr. Anthony Fauci whether there was any evidence that chloroquine was effective against Covid-19. Fauci said, \"No.\" Dr. Anthony Fauci: The information that you're referring to specifically is anecdotal; it was not done in a controlled clinical trial. So you really can't make any definitive statement about it.  Dr. Gupta: If you're confused, you're not alone.   Let me start by saying this: There is currently no proven treatment or cure for the novel coronavirus. But I can see how that might sometimes be unclear, since some drug names are being talked about as if they may be already working.   Names like chloroquine and remdesivir. They're hard to pronounce -- and even harder to prove that they're effective.  So in this episode, I'll break down the latest information and also answer some of your questions about possible drug treatments for the coronavirus.   I'm Dr. Sanjay Gupta, CNN's Chief Medical Correspondent. And this is \"Coronavirus: Fact vs. Fiction.\"   Dr. Gupta: First, let's talk about how our government officials are describing a drug called chloroquine. Trump: This has been something that's been around for many years. It's been a phenomenal, strong, powerful drug for malaria. But we think it might work on this.   Dr. Gupta: Chloroquine is used to treat malaria, and has been around for decades. But it has not been approved as a treatment for the coronavirus. Here's CNN's medical analyst and infectious disease specialist, Dr. Celine Gounder.   Dr. Celine Gounder: This is not a slam dunk. This is early, promising research. But that doesn't mean this is going to work.  Dr. Gupta: The president also tweeted over the weekend that a related drug, hydroxychloroquine, in combination with an antibiotic commonly known as a Z-Pak, could become quote \"game changers.\"  This is largely based on a very small study in France that excluded some people who either left the hospital, stopped taking the drug due to side effects, or got worse -- including one person who died. We still don't have enough evidence that these drugs are effective in humans. That's why in some states, they are beginning to experiment. New York Gov. Andrew Cuomo: Hydroxychloroquine, which the president speaks about, and is optimistic about, and we hope for optimistic results, also. We're actually starting that today. Dr. Gupta: That's New York Gov. Andrew Cuomo. He recently announced that the state had procured thousands of doses of chloroquine and hydroxychloroquine and would begin trials starting Tuesday. The state will also begin testing another experimental treatment using the plasma of people who have recovered. It's called convalescent serum.  Cuomo: What it does is it takes the plasma from a person who has been infected with the virus, processes the plasma, and injects the antibodies into a person who is sick.   Dr. Gupta: The other drug name being floated around is an antiviral called remdesivir. It's already being tested on adults diagnosed with the coronavirus in the United States and China.  The Director of the US Centers for Disease Control and Prevention, Dr. Robert Redfield, discussed remdesivir in congressional testimony earlier this month.   CDC Director Robert Redfield: We're going to know probably by April whether that drug works or not, and that's important because that's a drug that can save lives if it works.  Dr. Gupta: Gilead Sciences, which manufactures remdesivir, is pulling back on emergency requests for the drug due to overwhelming demand. The company is instead focusing its efforts on giving out the drug in clinical trials, hoping to prove its effectiveness against Covid-19. I want to reiterate that we don't know how effective any of these treatments will be. While a number of patients have already received drugs like chloroquine and remdesivir, it's too early to know how much of an impact the drugs actually had. That's why doctors are conducting studies in the US, China and all over the world, to better understand what happens when you give these drugs to a Covid patient.  Getting the results could take months. And in the meantime, we have to be careful about creating false hope.    News report: A man in Arizona has died after ingesting chloroquine phosphate, believing that it would prevent him from contracting coronavirus. Dr. Gupta: Banner Health, a company that operates acute-care hospitals, released a statement on Monday confirming that a man in Arizona had died after taking a form of chloroquine used to clean aquariums. His wife is currently in critical care. NBC News spoke to the wife who said they learned of the drug's connection to the coronavirus during a news conference on TV. In Nigeria, health officials issued a warning about chloroquine, saying three people overdosed on the drug after hearing it described as a possible treatment.  Dr. Gupta: I can't stress enough how vital it is that you don't use or consume anything unless specifically recommended by your doctor.   You're likely to soon hear other drug names mentioned as well. Nevan Krogan, a senior investigator at the Gladstone Institute of Data Science and Biotechnology in San Francisco, worked on a study published last weekend that identified 69 existing drugs that could be tested against the coronavirus.  Nevan Krogan: In total, we identified 332 proteins talking to or connected to the coronaviral proteins. And we identified 69 different drugs and compounds that are known to target at least one of these 332 proteins. And this corresponds to 27 different FDA-approved drugs and the remaining are in clinical or pre-clinical trials.  Dr. Gupta: Krogan said testing out drugs that are already FDA-approved could drastically speed up the process of finding a treatment that is safe and effective for humans.  And then there's the prospect of a vaccine. Experts say one wouldn't be ready this year. Drug and vaccine tests take months or years in order to be proven safe for humans, and there are multiple stages of those trials. But Krogan is optimistic that the global response from scientists now will set a precedent for getting to a solution faster in the future. Krogan: For me, I would argue that what we're seeing is a new paradigm of how to do science. And I hope we're setting up an infrastructure here that could be beneficial, not just for Covid-19, but for the future, for Covid-22, Covid-24 [and] what other virus comes online over the next several years, and they will be coming. Dr. Gupta: Our best protection for now: social distancing, washing our hands, looking out for ourselves and our loved ones, trying to help out wherever we can, and behaving like we might have the virus. If you have questions, you can record them as a voice memo and email them to asksanjay@cnn.com -- we might even include them in the podcast.  We'll be back tomorrow. Thanks for listening.   \n",
            "Shape: (1, 1000)\n",
            "tf.Tensor(\n",
            "[ 118 1044 4377   54 1139    9  353 1156 5013    9 2132   85  766   65\n",
            "   10   84 4154  456   31 3090], shape=(20,), dtype=int64)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rb78KgtEYmoY"
      },
      "source": [
        "#### **Create TF Datasets**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Flhms4f1fwTs",
        "outputId": "4fd7ab63-d974-40ba-ea70-bab427e05075"
      },
      "source": [
        "BATCH_SIZE = 32\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = len(train_x)\n",
        "VALIDATION_SHUFFLE_BUFFER_SIZE = len(validate_x)\n",
        "\n",
        "# Convert all y labels to numbers\n",
        "train_processed_y = [label2index[label] for label in train_y]\n",
        "validate_processed_y = [label2index[label] for label in validate_y]\n",
        "\n",
        "# Converts to y to binary class matrix (One-hot-encoded)\n",
        "train_processed_y = to_categorical(train_processed_y, num_classes=num_classes, dtype='float32')\n",
        "validate_processed_y = to_categorical(validate_processed_y, num_classes=num_classes, dtype='float32')\n",
        "\n",
        "# Vectorize Text\n",
        "def vectorize_text(text, label=None):\n",
        "  text = tf.expand_dims(text, -1)\n",
        "  text = text_vectorizer(text)\n",
        "  if label is None:\n",
        "    return text\n",
        "  else:\n",
        "    return text, label\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices((train_x, train_processed_y))\n",
        "validation_data = tf.data.Dataset.from_tensor_slices((validate_x, validate_processed_y))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(BATCH_SIZE)\n",
        "train_data = train_data.map(vectorize_text, num_parallel_calls=AUTOTUNE)\n",
        "train_data = train_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "##################\n",
        "# Validation data\n",
        "##################\n",
        "validation_data = validation_data.shuffle(buffer_size=VALIDATION_SHUFFLE_BUFFER_SIZE)\n",
        "validation_data = validation_data.batch(BATCH_SIZE)\n",
        "validation_data = validation_data.map(vectorize_text, num_parallel_calls=AUTOTUNE)\n",
        "validation_data = validation_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "print(\"train_data\",train_data)\n",
        "print(\"validation_data\",validation_data)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <PrefetchDataset shapes: ((None, 1000), (None, 3)), types: (tf.int64, tf.float32)>\n",
            "validation_data <PrefetchDataset shapes: ((None, 1000), (None, 3)), types: (tf.int64, tf.float32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-PkYCQ-WhVo0"
      },
      "source": [
        "### **Text Classificaton Models**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ai3CktenhL6W"
      },
      "source": [
        "#### **Simple Fully Connected Network**\n",
        "\n",
        "* We will start with a simple fully connected neural network. \n",
        "* In this model, each layer is a dense layer\n",
        "* Wer use activation function in  the hidden layers as ReLU. \n",
        "* Since our task is a multiclass classification problem, we use softmax as the activation function in the output layer."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wy1ckZaEhv2C"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4UmfM0n4hhLX"
      },
      "source": [
        "def build_simple_fcn(num_classes, sequence_length):\n",
        "  # Set the model name as\n",
        "  model_name = 'simple_fcn_'+str(int(time.time()))\n",
        "\n",
        "  # Model input\n",
        "  model_input = keras.layers.Input(shape=(sequence_length))\n",
        "\n",
        "  hidden = keras.layers.Dense(1024, activation=\"relu\")(model_input)\n",
        "  hidden = keras.layers.Dense(1024, activation=\"relu\")(hidden)\n",
        "  hidden = keras.layers.Dense(512, activation=\"relu\")(hidden)\n",
        "  hidden = keras.layers.Dense(512, activation=\"relu\")(hidden)\n",
        "\n",
        "  # Output Layer\n",
        "  output = keras.layers.Dense(units=num_classes, activation='softmax')(hidden)\n",
        "\n",
        "  # Create model\n",
        "  model = Model(inputs=model_input, outputs=output, name=model_name)\n",
        "\n",
        "  return model"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qrCCBnRZhzU2"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "noC6N3fgh2Jz",
        "outputId": "9322620f-e7cb-43a9-a35d-ba3957a17e85"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 0.01\n",
        "epochs = 10\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_simple_fcn(num_classes, sequence_length)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate)\n",
        "# Loss\n",
        "loss = keras.losses.categorical_crossentropy\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        validation_data=validation_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)\n",
        "\n",
        "evaluate_save_model(model, validation_data, training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"simple_fcn_1616760408\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 1000)]            0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1024)              1025024   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1024)              1049600   \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 512)               262656    \n",
            "_________________________________________________________________\n",
            "dense_4 (Dense)              (None, 3)                 1539      \n",
            "=================================================================\n",
            "Total params: 2,863,619\n",
            "Trainable params: 2,863,619\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "23/23 [==============================] - 2s 28ms/step - loss: 157329.1710 - accuracy: 0.3440 - val_loss: 9.0789 - val_accuracy: 0.3641\n",
            "Epoch 2/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 203.0526 - accuracy: 0.4463 - val_loss: 67.2437 - val_accuracy: 0.4674\n",
            "Epoch 3/10\n",
            "23/23 [==============================] - 0s 11ms/step - loss: 108.2696 - accuracy: 0.4758 - val_loss: 23.8362 - val_accuracy: 0.4457\n",
            "Epoch 4/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 26.1180 - accuracy: 0.5230 - val_loss: 3.4707 - val_accuracy: 0.4946\n",
            "Epoch 5/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 138.2837 - accuracy: 0.4555 - val_loss: 24.3919 - val_accuracy: 0.5163\n",
            "Epoch 6/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 39.0609 - accuracy: 0.3981 - val_loss: 1.0970 - val_accuracy: 0.3641\n",
            "Epoch 7/10\n",
            "23/23 [==============================] - 0s 11ms/step - loss: 195.5813 - accuracy: 0.3705 - val_loss: 1.0854 - val_accuracy: 0.5326\n",
            "Epoch 8/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 1.6521 - accuracy: 0.5194 - val_loss: 1.0834 - val_accuracy: 0.5272\n",
            "Epoch 9/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 1.2959 - accuracy: 0.5224 - val_loss: 1.0544 - val_accuracy: 0.5272\n",
            "Epoch 10/10\n",
            "23/23 [==============================] - 0s 10ms/step - loss: 0.9795 - accuracy: 0.5499 - val_loss: 1.0237 - val_accuracy: 0.5272\n",
            "Training execution time (mins) 0.08018585443496704\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "6/6 [==============================] - 0s 4ms/step - loss: 1.0237 - accuracy: 0.5272\n",
            "[1.0237090587615967, 0.5271739363670349]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PRIjKzQojj-"
      },
      "source": [
        "#### **Simple Fully Connected Network with Embedding**\n",
        "\n",
        "* Let's add an embedding layer to the previous simple fully connected network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iIRS8n0pojuG"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Owlq4v42k713"
      },
      "source": [
        "def build_simple_fcn_with_emb(num_classes,sequence_length, vocab_size, embedding_dim):\n",
        "  # Set the model name as\n",
        "  model_name = 'simple_fcn_emb'+str(int(time.time()))\n",
        "\n",
        "  # Model input\n",
        "  model_input = keras.layers.Input(shape=(sequence_length))\n",
        "\n",
        "  hidden = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim)(model_input)\n",
        "  hidden = keras.layers.Flatten()(hidden)\n",
        "  hidden = keras.layers.Dense(1024, activation=\"relu\")(hidden)\n",
        "  hidden = keras.layers.Dense(512, activation=\"relu\")(hidden)\n",
        "\n",
        "  # Output Layer\n",
        "  output = keras.layers.Dense(units=num_classes, activation='softmax')(hidden)\n",
        "\n",
        "  # Create model\n",
        "  model = Model(inputs=model_input, outputs=output, name=model_name)\n",
        "\n",
        "  return model"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xtKPRDoRok4t"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "30vFbWP1lYp-",
        "outputId": "f6804e02-7b95-4575-c4e4-977d0935b362"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 0.01\n",
        "epochs = 10\n",
        "embedding_dim = 100\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_simple_fcn_with_emb(num_classes, sequence_length, vocabulary_size,embedding_dim)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate)\n",
        "# Loss\n",
        "loss = keras.losses.categorical_crossentropy\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        validation_data=validation_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)\n",
        "\n",
        "evaluate_save_model(model, validation_data, training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"simple_fcn_emb1616760413\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 1000)]            0         \n",
            "_________________________________________________________________\n",
            "embedding (Embedding)        (None, 1000, 100)         1500000   \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 100000)            0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1024)              102401024 \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 512)               524800    \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 3)                 1539      \n",
            "=================================================================\n",
            "Total params: 104,427,363\n",
            "Trainable params: 104,427,363\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "23/23 [==============================] - 2s 48ms/step - loss: 42.1889 - accuracy: 0.3584 - val_loss: 0.9024 - val_accuracy: 0.6196\n",
            "Epoch 2/10\n",
            "23/23 [==============================] - 1s 41ms/step - loss: 1.0447 - accuracy: 0.6197 - val_loss: 0.9278 - val_accuracy: 0.6685\n",
            "Epoch 3/10\n",
            "23/23 [==============================] - 1s 40ms/step - loss: 0.4073 - accuracy: 0.8516 - val_loss: 1.1458 - val_accuracy: 0.6413\n",
            "Epoch 4/10\n",
            "23/23 [==============================] - 1s 41ms/step - loss: 0.2140 - accuracy: 0.9121 - val_loss: 0.7915 - val_accuracy: 0.7446\n",
            "Epoch 5/10\n",
            "23/23 [==============================] - 1s 40ms/step - loss: 0.0550 - accuracy: 0.9784 - val_loss: 1.3588 - val_accuracy: 0.7174\n",
            "Epoch 6/10\n",
            "23/23 [==============================] - 1s 40ms/step - loss: 0.1036 - accuracy: 0.9541 - val_loss: 1.1888 - val_accuracy: 0.7391\n",
            "Epoch 7/10\n",
            "23/23 [==============================] - 1s 40ms/step - loss: 0.0672 - accuracy: 0.9751 - val_loss: 0.9953 - val_accuracy: 0.7663\n",
            "Epoch 8/10\n",
            "23/23 [==============================] - 1s 40ms/step - loss: 0.0467 - accuracy: 0.9729 - val_loss: 0.9884 - val_accuracy: 0.8533\n",
            "Epoch 9/10\n",
            "23/23 [==============================] - 1s 41ms/step - loss: 0.0317 - accuracy: 0.9816 - val_loss: 1.0441 - val_accuracy: 0.8315\n",
            "Epoch 10/10\n",
            "23/23 [==============================] - 1s 41ms/step - loss: 0.0258 - accuracy: 0.9896 - val_loss: 0.9574 - val_accuracy: 0.8478\n",
            "Training execution time (mins) 0.17329726616541544\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "6/6 [==============================] - 0s 9ms/step - loss: 0.9574 - accuracy: 0.8478\n",
            "[0.9574431777000427, 0.8478260636329651]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q8G_rVh4pXYP"
      },
      "source": [
        "#### **Conv1D Network with Embedding**\n",
        "\n",
        "* Next let us use Conv1D layers to build the model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibP5Yzs1pkpI"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LnjH2mPZplGb"
      },
      "source": [
        "def build_conv1d_emb(num_classes,sequence_length, vocab_size, embedding_dim):\n",
        "  # Set the model name as\n",
        "  model_name = 'conv1d_emb_'+str(int(time.time()))\n",
        "\n",
        "  # Model input\n",
        "  model_input = keras.layers.Input(shape=(sequence_length))\n",
        "\n",
        "  # Embedding Layer\n",
        "  hidden = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim, name=\"embedding\")(model_input)\n",
        "\n",
        "  # Conv1D + Global Max Pooling\n",
        "  hidden = keras.layers.Conv1D(filters=256, kernel_size=5, padding=\"valid\", activation=\"relu\", strides=3)(hidden)\n",
        "  hidden = keras.layers.GlobalMaxPooling1D()(hidden)\n",
        "\n",
        "  # Dense Layer\n",
        "  hidden = keras.layers.Dense(units=128, activation=\"relu\")(hidden)\n",
        "\n",
        "  # Output Layer\n",
        "  output = keras.layers.Dense(units=num_classes, activation='softmax')(hidden)\n",
        "\n",
        "  # Create model\n",
        "  model = Model(inputs=model_input, outputs=output, name=model_name)\n",
        "\n",
        "  return model"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hRVqDzM9plY1"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "71XD3yrkpm3k",
        "outputId": "c6e10780-84d0-45eb-b633-d49c39487cdc"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 0.01\n",
        "epochs = 10\n",
        "embedding_dim = 100\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_conv1d_emb(num_classes, sequence_length, vocabulary_size,embedding_dim)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate)\n",
        "# Loss\n",
        "loss = keras.losses.categorical_crossentropy\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        validation_data=validation_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)\n",
        "\n",
        "evaluate_save_model(model, validation_data, training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"conv1d_emb_1616760431\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 1000)]            0         \n",
            "_________________________________________________________________\n",
            "embedding (Embedding)        (None, 1000, 100)         1500000   \n",
            "_________________________________________________________________\n",
            "conv1d (Conv1D)              (None, 332, 256)          128256    \n",
            "_________________________________________________________________\n",
            "global_max_pooling1d (Global (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 128)               32896     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 3)                 387       \n",
            "=================================================================\n",
            "Total params: 1,661,539\n",
            "Trainable params: 1,661,539\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "23/23 [==============================] - 15s 42ms/step - loss: 1.0600 - accuracy: 0.4228 - val_loss: 0.4351 - val_accuracy: 0.8533\n",
            "Epoch 2/10\n",
            "23/23 [==============================] - 1s 34ms/step - loss: 0.2033 - accuracy: 0.9209 - val_loss: 0.4248 - val_accuracy: 0.8533\n",
            "Epoch 3/10\n",
            "23/23 [==============================] - 1s 35ms/step - loss: 0.0481 - accuracy: 0.9893 - val_loss: 0.6345 - val_accuracy: 0.8804\n",
            "Epoch 4/10\n",
            "23/23 [==============================] - 1s 34ms/step - loss: 0.0062 - accuracy: 0.9997 - val_loss: 0.4709 - val_accuracy: 0.9239\n",
            "Epoch 5/10\n",
            "23/23 [==============================] - 1s 34ms/step - loss: 0.0055 - accuracy: 0.9991 - val_loss: 0.5373 - val_accuracy: 0.9130\n",
            "Epoch 6/10\n",
            "23/23 [==============================] - 1s 34ms/step - loss: 0.0044 - accuracy: 0.9994 - val_loss: 0.5191 - val_accuracy: 0.9239\n",
            "Epoch 7/10\n",
            "23/23 [==============================] - 1s 37ms/step - loss: 0.0062 - accuracy: 0.9983 - val_loss: 0.5106 - val_accuracy: 0.9293\n",
            "Epoch 8/10\n",
            "23/23 [==============================] - 1s 37ms/step - loss: 0.0083 - accuracy: 0.9970 - val_loss: 0.5084 - val_accuracy: 0.9239\n",
            "Epoch 9/10\n",
            "23/23 [==============================] - 1s 38ms/step - loss: 0.0036 - accuracy: 0.9995 - val_loss: 0.5185 - val_accuracy: 0.9293\n",
            "Epoch 10/10\n",
            "23/23 [==============================] - 1s 39ms/step - loss: 0.0035 - accuracy: 0.9991 - val_loss: 0.5298 - val_accuracy: 0.9130\n",
            "Training execution time (mins) 0.3879239002863566\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "6/6 [==============================] - 0s 7ms/step - loss: 0.5298 - accuracy: 0.9130\n",
            "[0.52984619140625, 0.9130434989929199]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9-DRUEUrqneV"
      },
      "source": [
        "#### **Conv1D Network with pretrained Embedding**\n",
        "\n",
        "* Alternatively, we could initialize embeddings with pre-trained word embeddings.\n",
        "* Specifically, let's try GloVe embeddings. GloVe stands for Global Vectors, which is an open-source project developed by Stanford. It contains pre-trained word representations in various sizes, including 50-dimensional, 100-dimensional, 200-dimensional, and 300-dimensional.\n",
        "\n",
        "* In this model, we choose the 100d version.\n",
        "\n",
        "[Reference](http://nlp.stanford.edu/projects/glove/)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ysPtujGrDEW"
      },
      "source": [
        "##### Prepare Embedding\n",
        "\n",
        "We need to prepare the pretrained embedding to use in our model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2rPmjefQrEbV",
        "outputId": "89caf1e5-1b23-435b-ea70-94e3480a17af"
      },
      "source": [
        "EMBEDDING_FILE = os.path.join(\"embedding\",\"glove.6B.100d.txt\")\n",
        "\n",
        "embeddings_index = {}\n",
        "with open(EMBEDDING_FILE) as f:\n",
        "    for line in f:\n",
        "        word, coefs = line.split(maxsplit=1)\n",
        "        coefs = np.fromstring(coefs, \"f\", sep=\" \")\n",
        "        embeddings_index[word] = coefs\n",
        "\n",
        "print(\"Number of word vectors:\",len(embeddings_index))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of word vectors: 400000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PWX6yc1lrPba",
        "outputId": "fc8286a5-cdd9-4881-f657-5d2a16d86d46"
      },
      "source": [
        "# View some word embeddings\n",
        "sample_embeddings_words = list(embeddings_index.keys())[:10]\n",
        "for word in sample_embeddings_words:\n",
        "  print(word,\":\",embeddings_index[word][:5],\", Shape:\", embeddings_index[word].shape)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "the : [-0.038194 -0.24487   0.72812  -0.39961   0.083172] , Shape: (100,)\n",
            ", : [-0.10767  0.11053  0.59812 -0.54361  0.67396] , Shape: (100,)\n",
            ". : [-0.33979  0.20941  0.46348 -0.64792 -0.38377] , Shape: (100,)\n",
            "of : [-0.1529  -0.24279  0.89837  0.16996  0.53516] , Shape: (100,)\n",
            "to : [-0.1897    0.050024  0.19084  -0.049184 -0.089737] , Shape: (100,)\n",
            "and : [-0.071953  0.23127   0.023731 -0.50638   0.33923 ] , Shape: (100,)\n",
            "in : [ 0.085703 -0.22201   0.16569   0.13373   0.38239 ] , Shape: (100,)\n",
            "a : [-0.27086   0.044006 -0.02026  -0.17395   0.6444  ] , Shape: (100,)\n",
            "\" : [-0.30457 -0.23645  0.17576 -0.72854 -0.28343] , Shape: (100,)\n",
            "'s : [ 0.58854 -0.2025   0.73479 -0.68338 -0.19675] , Shape: (100,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4I6liGOrskzq",
        "outputId": "c48a769e-02da-41f7-83bb-5a39a2d8d68d"
      },
      "source": [
        "# Prepare embedding matrix\n",
        "embedding_dim = 100\n",
        "embedding_matrix = np.zeros((max_features, embedding_dim))\n",
        "oov = {}    \n",
        "n_covered = 0\n",
        "n_oov = 0\n",
        "for word, i in word_index.items():\n",
        "    embedding_vector = embeddings_index.get(word)\n",
        "    if embedding_vector is not None:\n",
        "      embedding_matrix[i] = embedding_vector\n",
        "    else:\n",
        "      n_oov += 1\n",
        "\n",
        "text_coverage = (vocabulary_size-n_oov)/vocabulary_size\n",
        "print(\"Text Coverage:\",text_coverage)\n",
        "\n",
        "print(\"Embedding Matrix, Shape\" ,embedding_matrix.shape)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Text Coverage: 0.9396\n",
            "Embedding Matrix, Shape (15000, 100)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lkke6u9Phr_x",
        "outputId": "610654d8-8068-4e82-cc4e-e6c57719c81f"
      },
      "source": [
        "# Test oov\n",
        "print(embeddings_index.get('covid'))"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z8LBspeaq1o1"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JwTWKgEkq2Ji"
      },
      "source": [
        "def build_conv1d_pretrained_emb(num_classes,sequence_length, vocab_size, embedding_dim):\n",
        "  # Set the model name as\n",
        "  model_name = 'conv1d_pretrained_emb_'+str(int(time.time()))\n",
        "\n",
        "  # Model input\n",
        "  model_input = keras.layers.Input(shape=(sequence_length))\n",
        "\n",
        "  # Embedding Layer, with pre-trained weights\n",
        "  hidden = keras.layers.Embedding(input_dim=vocab_size, \n",
        "                            output_dim=embedding_dim, \n",
        "                            embeddings_initializer=keras.initializers.Constant(embedding_matrix), # Load pre-trained weights\n",
        "                            trainable=False, # Set Trainable to False\n",
        "                            name=\"embedding\")(model_input)\n",
        "\n",
        "  # Conv1D + Global Max Pooling\n",
        "  hidden = keras.layers.Conv1D(filters=256, kernel_size=5, padding=\"valid\", activation=\"relu\", strides=3)(hidden)\n",
        "  hidden = keras.layers.GlobalMaxPooling1D()(hidden)\n",
        "\n",
        "  # Dense Layer\n",
        "  hidden = keras.layers.Dense(units=128, activation=\"relu\")(hidden)\n",
        "\n",
        "  # Output Layer\n",
        "  output = keras.layers.Dense(units=num_classes, activation='softmax')(hidden)\n",
        "\n",
        "  # Create model\n",
        "  model = Model(inputs=model_input, outputs=output, name=model_name)\n",
        "\n",
        "  return model"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rMUIeujhq2eR"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ODEPecS5q7ZL",
        "outputId": "22b312e1-f71e-4574-db4d-082883d22a77"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 0.01\n",
        "epochs = 10\n",
        "embedding_dim = 100\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_conv1d_pretrained_emb(num_classes, sequence_length, vocabulary_size,embedding_dim)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate)\n",
        "# Loss\n",
        "loss = keras.losses.categorical_crossentropy\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        validation_data=validation_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)\n",
        "\n",
        "evaluate_save_model(model, validation_data, training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"conv1d_pretrained_emb_1616760461\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 1000)]            0         \n",
            "_________________________________________________________________\n",
            "embedding (Embedding)        (None, 1000, 100)         1500000   \n",
            "_________________________________________________________________\n",
            "conv1d (Conv1D)              (None, 332, 256)          128256    \n",
            "_________________________________________________________________\n",
            "global_max_pooling1d (Global (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 128)               32896     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 3)                 387       \n",
            "=================================================================\n",
            "Total params: 1,661,539\n",
            "Trainable params: 161,539\n",
            "Non-trainable params: 1,500,000\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "23/23 [==============================] - 1s 28ms/step - loss: 2.3250 - accuracy: 0.4602 - val_loss: 0.4107 - val_accuracy: 0.8424\n",
            "Epoch 2/10\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 0.2660 - accuracy: 0.9161 - val_loss: 0.3532 - val_accuracy: 0.9130\n",
            "Epoch 3/10\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 0.1369 - accuracy: 0.9689 - val_loss: 0.3441 - val_accuracy: 0.8913\n",
            "Epoch 4/10\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 0.0253 - accuracy: 0.9992 - val_loss: 0.3498 - val_accuracy: 0.9022\n",
            "Epoch 5/10\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 0.0113 - accuracy: 0.9978 - val_loss: 0.3392 - val_accuracy: 0.9076\n",
            "Epoch 6/10\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 0.0089 - accuracy: 0.9978 - val_loss: 0.4057 - val_accuracy: 0.9130\n",
            "Epoch 7/10\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 0.0064 - accuracy: 0.9994 - val_loss: 0.4457 - val_accuracy: 0.9022\n",
            "Epoch 8/10\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 0.0033 - accuracy: 0.9996 - val_loss: 0.4804 - val_accuracy: 0.9022\n",
            "Epoch 9/10\n",
            "23/23 [==============================] - 0s 15ms/step - loss: 0.0028 - accuracy: 0.9999 - val_loss: 0.5169 - val_accuracy: 0.9022\n",
            "Epoch 10/10\n",
            "23/23 [==============================] - 0s 14ms/step - loss: 0.0022 - accuracy: 0.9996 - val_loss: 0.5910 - val_accuracy: 0.9076\n",
            "Training execution time (mins) 0.07613791227340698\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "6/6 [==============================] - 0s 7ms/step - loss: 0.5910 - accuracy: 0.9076\n",
            "[0.5909943580627441, 0.907608687877655]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HhGhQzRzxNh6"
      },
      "source": [
        "### **Text Classification using BERT**\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vwtDtNZHxtrS"
      },
      "source": [
        "#### **Build Data Pipelines**\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BhYDzS5VyI-E"
      },
      "source": [
        "##### Text Tokenization ([Reference](https://huggingface.co/transformers/model_doc/bert.html#berttokenizer))"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164,
          "referenced_widgets": [
            "bd7cb140373349a69733f7ba6dd3bb8e",
            "61006bc8418642718062850fd81aa2d0",
            "8eabe58784644ccdbef2c7961ef6556e",
            "532e1c2641564a8b88e6eb18bf28c59b",
            "33e69f2234a049f08f45e21314a9e423",
            "b569d8ebb9304bf08e15e251d661490f",
            "038c3aba67dc4dd68016b977d8c40197",
            "99fdf7e14c194e60946fc931621b3895",
            "b9dc69fb0a6141fdbccff664f4d08e07",
            "f14248c95e3247ccab31cf183ae1bae8",
            "f7ad52b889db496abb41efdd71028078",
            "3833d2f4432147a9a222bde9c43bf7bf",
            "2249013dbaf34391a3088f1a13172fb1",
            "65f8f08dbc9c4562912656f5a1cb7f59",
            "b646fd44a8e84852b0b553589be796e9",
            "83e07cc57cdf4a3f9ba9250608b1e7d7",
            "a133466ab23d47e69723c5e69e7b6dc2",
            "f4753c5cc4044edf8687c0f83e01a5fa",
            "4198aad8bda64c5292ba1d1f4898e558",
            "c048473f8b824b35b5233a79c21cbe64",
            "3a9d70dfada345f2aa6dfa695fbaa9c4",
            "2ca90f05671b42558014716ed74fb1b3",
            "4b126bd709814154a6e30e8bb66c15d1",
            "d4107fd782dc45e8af8dfb5df897d825"
          ]
        },
        "id": "hn6i1qNAxwKv",
        "outputId": "ed31d850-f88a-4a20-dd25-c7ba9d2e0143"
      },
      "source": [
        "# Tokenizer\n",
        "tokenizer=BertTokenizer.from_pretrained('bert-base-uncased',do_lower_case=True)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "bd7cb140373349a69733f7ba6dd3bb8e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=231508.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "b9dc69fb0a6141fdbccff664f4d08e07",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=28.0, style=ProgressStyle(description_w…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a133466ab23d47e69723c5e69e7b6dc2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=466062.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L1m7crjvyanM"
      },
      "source": [
        "* Let's see two examples of tokenization. We could encode a single sentence with encode_plus, or we could tokenize multiple sentences at the same time with batch_encode_plus."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_HDscXOybDN",
        "outputId": "fd5b6d44-90a7-405b-c34b-75085e35da0c"
      },
      "source": [
        "# Tokenizer encode_plus\n",
        "text = \"What you need to know about using them safely amid the pandemic\"\n",
        "outputs = tokenizer.encode_plus(text, \n",
        "                  add_special_tokens = True, # add [CLS], [SEP]\n",
        "                  max_length = 15, # max length of the text that can go to BERT (<=512)\n",
        "                  padding='max_length',\n",
        "                  return_attention_mask = True, # add attention mask to not focus on pad tokens\n",
        "                  truncation='longest_first',\n",
        "                  return_tensors=\"tf\"\n",
        "              )\n",
        "print(\"Tokenizer Output:\",outputs)\n",
        "\n",
        "# Tokenizer batch_encode_plus\n",
        "text = [\"What you need to know about using them safely amid the pandemic\", \n",
        "        \"A third of Medicare enrollees with coronavirus ended up in the hospital\"]\n",
        "outputs = tokenizer.batch_encode_plus(text, \n",
        "        return_tensors='tf',\n",
        "        add_special_tokens = True, # add [CLS], [SEP]\n",
        "        return_token_type_ids=True,\n",
        "        padding='max_length',\n",
        "        truncation='longest_first',\n",
        "        max_length=15\n",
        "      )\n",
        "print(\"Tokenizer Output:\",outputs)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tokenizer Output: {'input_ids': <tf.Tensor: shape=(1, 15), dtype=int32, numpy=\n",
            "array([[  101,  2054,  2017,  2342,  2000,  2113,  2055,  2478,  2068,\n",
            "         9689, 13463,  1996,  6090,  3207,   102]], dtype=int32)>, 'token_type_ids': <tf.Tensor: shape=(1, 15), dtype=int32, numpy=array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)>, 'attention_mask': <tf.Tensor: shape=(1, 15), dtype=int32, numpy=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=int32)>}\n",
            "Tokenizer Output: {'input_ids': <tf.Tensor: shape=(2, 15), dtype=int32, numpy=\n",
            "array([[  101,  2054,  2017,  2342,  2000,  2113,  2055,  2478,  2068,\n",
            "         9689, 13463,  1996,  6090,  3207,   102],\n",
            "       [  101,  1037,  2353,  1997, 27615, 25612, 10285,  2007, 21887,\n",
            "        23350,  3092,  2039,  1999,  1996,   102]], dtype=int32)>, 'token_type_ids': <tf.Tensor: shape=(2, 15), dtype=int32, numpy=\n",
            "array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
            "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)>, 'attention_mask': <tf.Tensor: shape=(2, 15), dtype=int32, numpy=\n",
            "array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n",
            "       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], dtype=int32)>}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KH9mT7hMysCy"
      },
      "source": [
        "* Input ids: are the only required parameters to be passed to the model as input. They are token indices, numerical representations of tokens building the sequences that will be used as input by the model.\n",
        "* Attention mask: is an optional argument used when batching sequences together. This argument indicates to the model which tokens should be attended to, and which should not.\n",
        "* Token type ids: Some models’ purpose is to do sequence classification or question answering. These require two different sequences to be joined in a single “input_ids” entry, which usually is performed with the help of special tokens, such as the classifier ([CLS]) and separator ([SEP]) tokens. For example, the BERT model builds its two sequence input as such:\n",
        "\n",
        "* Here, we will tokenize news articles. To setup for BERT, we need to add special tokens,  namely [CLS] at the beginning and [SEP] at the end of each sentence. Also, we need to pad or truncate all sentences to a single constant length."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WI10hcYZysfI",
        "outputId": "fb6f2f04-ac5d-4564-dbe5-3f244ec4731d"
      },
      "source": [
        "# Feature constraints\n",
        "sequence_length = 256\n",
        "\n",
        "# Train\n",
        "train_x_processed = tokenizer.batch_encode_plus(\n",
        "        train_x,\n",
        "        return_tensors='tf',\n",
        "        add_special_tokens = True, # add [CLS], [SEP]\n",
        "        return_token_type_ids=True,\n",
        "        padding='max_length',\n",
        "        max_length=sequence_length,\n",
        "        return_attention_mask = True,\n",
        "        truncation='longest_first'\n",
        "    )\n",
        "\n",
        "# Validation\n",
        "validate_x_processed = tokenizer.batch_encode_plus(\n",
        "        validate_x,\n",
        "        return_tensors='tf',\n",
        "        add_special_tokens = True, # add [CLS], [SEP]\n",
        "        return_token_type_ids=True,\n",
        "        padding='max_length',\n",
        "        max_length=sequence_length,\n",
        "        return_attention_mask = True,\n",
        "        truncation='longest_first'\n",
        "    )\n",
        "\n",
        "print(train_x_processed.keys())"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['input_ids', 'token_type_ids', 'attention_mask'])\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gI6j44wkyzeg",
        "outputId": "ea6e23ef-67b1-420e-884b-fa63201d8ab3"
      },
      "source": [
        "print(\"train_x_processed shape:\", train_x_processed[\"input_ids\"].shape)\n",
        "print(\"validate_x_processed shape:\", validate_x_processed[\"input_ids\"].shape)\n",
        "# First sample\n",
        "print(\"First sample:\")\n",
        "print(\"input_ids:\",train_x_processed[\"input_ids\"][0][:10])\n",
        "print(\"token_type_ids:\",train_x_processed[\"token_type_ids\"][0][:10])\n",
        "print(\"attention_mask:\",train_x_processed[\"attention_mask\"][0][:10])\n",
        "# Second sample\n",
        "print(\"Second sample:\")\n",
        "print(\"input_ids:\",train_x_processed[\"input_ids\"][1][:10])\n",
        "print(\"token_type_ids:\",train_x_processed[\"token_type_ids\"][1][:10])\n",
        "print(\"attention_mask:\",train_x_processed[\"attention_mask\"][1][:10])"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_x_processed shape: (736, 256)\n",
            "validate_x_processed shape: (184, 256)\n",
            "First sample:\n",
            "input_ids: tf.Tensor([  101  8398  1998 28514  1005  1055  3510  1997 15106 11014], shape=(10,), dtype=int32)\n",
            "token_type_ids: tf.Tensor([0 0 0 0 0 0 0 0 0 0], shape=(10,), dtype=int32)\n",
            "attention_mask: tf.Tensor([1 1 1 1 1 1 1 1 1 1], shape=(10,), dtype=int32)\n",
            "Second sample:\n",
            "input_ids: tf.Tensor([  101  2668 20897  2075  1998  3806 11865  7834  1024 24209], shape=(10,), dtype=int32)\n",
            "token_type_ids: tf.Tensor([0 0 0 0 0 0 0 0 0 0], shape=(10,), dtype=int32)\n",
            "attention_mask: tf.Tensor([1 1 1 1 1 1 1 1 1 1], shape=(10,), dtype=int32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ui1qorrHy5fq"
      },
      "source": [
        "##### Create TF Datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cWsOGyKGy6Ar",
        "outputId": "f871991e-4909-4acc-ee21-025ad0480131"
      },
      "source": [
        "batch_size = 8\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = len(train_x)\n",
        "VALIDATION_SHUFFLE_BUFFER_SIZE = len(validate_x)\n",
        "\n",
        "# Convert all y labels to numbers\n",
        "train_processed_y = [label2index[label] for label in train_y]\n",
        "validate_processed_y = [label2index[label] for label in validate_y]\n",
        "\n",
        "# Converts to y to binary class matrix (One-hot-encoded)\n",
        "train_processed_y = to_categorical(train_processed_y, num_classes=num_classes, dtype='int32')\n",
        "validate_processed_y = to_categorical(validate_processed_y, num_classes=num_classes, dtype='int32')\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices(((train_x_processed[\"input_ids\"],\n",
        "                                                  train_x_processed[\"token_type_ids\"],\n",
        "                                                  train_x_processed[\"attention_mask\"]), train_processed_y))\n",
        "validation_data = tf.data.Dataset.from_tensor_slices(((validate_x_processed[\"input_ids\"],\n",
        "                                                  validate_x_processed[\"token_type_ids\"],\n",
        "                                                  validate_x_processed[\"attention_mask\"]), validate_processed_y))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(batch_size)\n",
        "train_data = train_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "##################\n",
        "# Validation data\n",
        "##################\n",
        "validation_data = validation_data.shuffle(buffer_size=VALIDATION_SHUFFLE_BUFFER_SIZE)\n",
        "validation_data = validation_data.batch(batch_size)\n",
        "validation_data = validation_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "print(\"train_data\",train_data)\n",
        "print(\"validation_data\",validation_data)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <PrefetchDataset shapes: (((None, 256), (None, 256), (None, 256)), (None, 3)), types: ((tf.int32, tf.int32, tf.int32), tf.int32)>\n",
            "validation_data <PrefetchDataset shapes: (((None, 256), (None, 256), (None, 256)), (None, 3)), types: ((tf.int32, tf.int32, tf.int32), tf.int32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S_JbwVDkzRVR"
      },
      "source": [
        "#### **Build Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5cVSmAw6zRwy"
      },
      "source": [
        "def build_pretrained_bert(num_classes):\n",
        "  # Set the model name as\n",
        "  model_name = 'bert_pretrained_'+str(int(time.time()))\n",
        "  model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=num_classes,name=model_name)\n",
        "  return model"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eyVDKAuczSZe"
      },
      "source": [
        "#### **Train**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "2014beb754014fee8260e23432510da6",
            "e923e9eab19246c59618a544f28b3000",
            "d69abd44831944c8ac43a34a265bbe32",
            "7fca96588a714ebcb929387dddf4e72a",
            "edc32e2fe3e54120b16daff1dcfa9080",
            "2cbf77b0663f4958a987d25d9e56c8df",
            "a2c242ce2de349a6b9ff8f865c55fe66",
            "94980c5bd53c463caedaad8d96f8bca9",
            "4d3dd3df54604f5c9f5cb1c777f1c72c",
            "df5b145e34c34f2ea2f64b282408254f",
            "e5568d53c5f54bcf8d19c4c1f1127453",
            "c6632a1004b64d718a8ce6cf05dbaee9",
            "9b18be7fda204fd680e1252cf9a08c3c",
            "311f64ffde004a77ba85cc4ac9c5e466",
            "6f4f56ce02b14d3080f91258af262656",
            "da19c9339cf44b5789ce248c123b9f8f"
          ]
        },
        "id": "jvMRbguHzUgs",
        "outputId": "feff817a-5148-422b-8af1-284c1ed90e21"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 2e-5\n",
        "epochs = 5\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_pretrained_bert(num_classes)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate, epsilon=1e-08)\n",
        "# Loss\n",
        "loss = keras.losses.CategoricalCrossentropy(from_logits=True)\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        validation_data=validation_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)\n",
        "\n",
        "evaluate_save_model(model, validation_data, training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2014beb754014fee8260e23432510da6",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=433.0, style=ProgressStyle(description_…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "4d3dd3df54604f5c9f5cb1c777f1c72c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=536063208.0, style=ProgressStyle(descri…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "All model checkpoint layers were used when initializing TFBertForSequenceClassification.\n",
            "\n",
            "Some layers of TFBertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Model: \"bert_pretrained_1616760488\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "bert (TFBertMainLayer)       multiple                  109482240 \n",
            "_________________________________________________________________\n",
            "dropout_37 (Dropout)         multiple                  0         \n",
            "_________________________________________________________________\n",
            "classifier (Dense)           multiple                  2307      \n",
            "=================================================================\n",
            "Total params: 109,484,547\n",
            "Trainable params: 109,484,547\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/5\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:AutoGraph could not transform <bound method Socket.send of <zmq.sugar.socket.Socket object at 0x7fdeca643ec0>> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING: AutoGraph could not transform <bound method Socket.send of <zmq.sugar.socket.Socket object at 0x7fdeca643ec0>> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: module, class, method, function, traceback, frame, or code object was expected, got cython_function_or_method\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING:tensorflow:AutoGraph could not transform <function wrap at 0x7fdee5ef3c20> and will run it as-is.\n",
            "Cause: while/else statement not yet supported\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING: AutoGraph could not transform <function wrap at 0x7fdee5ef3c20> and will run it as-is.\n",
            "Cause: while/else statement not yet supported\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "92/92 [==============================] - ETA: 0s - loss: 0.8080 - accuracy: 0.6412WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "92/92 [==============================] - 77s 320ms/step - loss: 0.8052 - accuracy: 0.6430 - val_loss: 0.3217 - val_accuracy: 0.8913\n",
            "Epoch 2/5\n",
            "92/92 [==============================] - 27s 292ms/step - loss: 0.1484 - accuracy: 0.9609 - val_loss: 0.2856 - val_accuracy: 0.9239\n",
            "Epoch 3/5\n",
            "92/92 [==============================] - 27s 292ms/step - loss: 0.1488 - accuracy: 0.9646 - val_loss: 0.1744 - val_accuracy: 0.9674\n",
            "Epoch 4/5\n",
            "92/92 [==============================] - 27s 292ms/step - loss: 0.0293 - accuracy: 0.9973 - val_loss: 0.1886 - val_accuracy: 0.9620\n",
            "Epoch 5/5\n",
            "92/92 [==============================] - 27s 292ms/step - loss: 0.0399 - accuracy: 0.9910 - val_loss: 0.1552 - val_accuracy: 0.9565\n",
            "Training execution time (mins) 3.0808246692021686\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "23/23 [==============================] - 2s 100ms/step - loss: 0.1552 - accuracy: 0.9565\n",
            "[0.15516014397144318, 0.95652174949646]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CfbJdStSz4vm"
      },
      "source": [
        "### **Compare all Models**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "KmLMsnCcz689",
        "outputId": "18e30e81-9f1a-4c52-ca1c-fcb80b52848c"
      },
      "source": [
        "models_store_path = \"models\"\n",
        "\n",
        "models_metrics_list = glob(models_store_path+\"/*_metrics.json\")\n",
        "\n",
        "all_models_metrics = []\n",
        "for mm_file in models_metrics_list:\n",
        "  with open(mm_file) as json_file:\n",
        "    model_metrics = json.load(json_file)\n",
        "    all_models_metrics.append(model_metrics)\n",
        "\n",
        "# Load metrics to dataframe\n",
        "view_metrics = pd.DataFrame(data=all_models_metrics)\n",
        "\n",
        "# Format columns\n",
        "view_metrics['accuracy'] = view_metrics['accuracy']*100\n",
        "view_metrics['accuracy'] = view_metrics['accuracy'].map('{:,.2f}%'.format)\n",
        "\n",
        "view_metrics['trainable_parameters'] = view_metrics['trainable_parameters'].map('{:,.0f}'.format)\n",
        "view_metrics['execution_time'] = view_metrics['execution_time'].map('{:,.2f} mins'.format)\n",
        "view_metrics['loss'] = view_metrics['loss'].map('{:,.2f}'.format)\n",
        "view_metrics['model_size'] = view_metrics['model_size']/1000000\n",
        "view_metrics['model_size'] = view_metrics['model_size'].map('{:,.0f} MB'.format)\n",
        "\n",
        "# Filter columns\n",
        "view_metrics = view_metrics[[\"trainable_parameters\",\"execution_time\",\"loss\",\n",
        "                             \"accuracy\",\"model_size\",\"learning_rate\",\"epochs\",\"name\"]]\n",
        "view_metrics = view_metrics.sort_values(by=['accuracy'],ascending=False)\n",
        "view_metrics.head(10)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trainable_parameters</th>\n",
              "      <th>execution_time</th>\n",
              "      <th>loss</th>\n",
              "      <th>accuracy</th>\n",
              "      <th>model_size</th>\n",
              "      <th>learning_rate</th>\n",
              "      <th>epochs</th>\n",
              "      <th>name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>109,484,547</td>\n",
              "      <td>3.08 mins</td>\n",
              "      <td>0.16</td>\n",
              "      <td>95.65%</td>\n",
              "      <td>438 MB</td>\n",
              "      <td>0.00002</td>\n",
              "      <td>5</td>\n",
              "      <td>bert_pretrained_1616760488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1,661,539</td>\n",
              "      <td>0.39 mins</td>\n",
              "      <td>0.53</td>\n",
              "      <td>91.30%</td>\n",
              "      <td>7 MB</td>\n",
              "      <td>0.01000</td>\n",
              "      <td>10</td>\n",
              "      <td>conv1d_emb_1616760431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>161,539</td>\n",
              "      <td>0.08 mins</td>\n",
              "      <td>0.59</td>\n",
              "      <td>90.76%</td>\n",
              "      <td>7 MB</td>\n",
              "      <td>0.01000</td>\n",
              "      <td>10</td>\n",
              "      <td>conv1d_pretrained_emb_1616760461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>104,427,363</td>\n",
              "      <td>0.17 mins</td>\n",
              "      <td>0.96</td>\n",
              "      <td>84.78%</td>\n",
              "      <td>418 MB</td>\n",
              "      <td>0.01000</td>\n",
              "      <td>10</td>\n",
              "      <td>simple_fcn_emb1616760413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2,863,619</td>\n",
              "      <td>0.08 mins</td>\n",
              "      <td>1.02</td>\n",
              "      <td>52.72%</td>\n",
              "      <td>11 MB</td>\n",
              "      <td>0.01000</td>\n",
              "      <td>10</td>\n",
              "      <td>simple_fcn_1616760408</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  trainable_parameters execution_time  ... epochs                              name\n",
              "0          109,484,547      3.08 mins  ...      5        bert_pretrained_1616760488\n",
              "3            1,661,539      0.39 mins  ...     10             conv1d_emb_1616760431\n",
              "2              161,539      0.08 mins  ...     10  conv1d_pretrained_emb_1616760461\n",
              "1          104,427,363      0.17 mins  ...     10          simple_fcn_emb1616760413\n",
              "4            2,863,619      0.08 mins  ...     10             simple_fcn_1616760408\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JnbpNpXxSN0e"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "672Pmg30YiXt"
      },
      "source": [
        "## **Text Generation using Language Models: GPT2** <div id='gpt2'>\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9jtf0FTqYuAX"
      },
      "source": [
        "### **Overview** <div id='gpt2_overview'>\n",
        "\n",
        "**Language Model**: \n",
        "\n",
        "A model that understands language and how words appear in context to one another. The model is trained using unsupervised approaches such as next word prediction in a sentence or next sentence prediction.\n",
        "\n",
        "\n",
        "**Comparing GPT2 with BERT**:\n",
        "\n",
        "<table>\n",
        "<tr><td width=\"400\"><strong>GPT2</strong></td><td width=\"400\"><strong>BERT</strong><td></tr>\n",
        "<tr><td>Auto-regressive model (A word is predicted using words from its left context only)</td><td>Masked Language Model</td></tr>\n",
        "<tr><td>Made up of only the Decoder with stacked transformer blocks</td><td>Made up of only the Encoder with stacked transformer blocks</td></tr>\n",
        "\n",
        "<tr><td>Unidirectional language model</td><td>Bidirectional language model</td></tr>\n",
        "<tr><td>Good for writing text</td><td>Good for fill in the blanks</td></tr>\n",
        "</table>\n",
        "\n",
        "<br>\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GlspO5LA7JaM"
      },
      "source": [
        "\n",
        "**GPT-2** is a large transformer-based language model with 1.5 billion parameters, trained on a dataset of 8 million web pages. GPT-2 is trained with a simple objective: predict the next word, given all of the previous words within some text. The diversity of the dataset causes this simple goal to contain naturally occurring demonstrations of many tasks across diverse domains."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OyE1_j4G6mof"
      },
      "source": [
        "### **GPT2 Pretrained Lanaguage Model** <div id='gpt2_pretrained'>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wB6uwb0R7vm2"
      },
      "source": [
        "#### **Tokenizer for GPT2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164,
          "referenced_widgets": [
            "c77a98ef39f54e469c4350ff5bb64dcd",
            "269cad2975b449138d31e724c337505d",
            "af1cd47308be469387b46d962541d267",
            "603f65912b4d44df9cdf01d0cc776949",
            "a1d58e683ecc4834810d6cbdc5892093",
            "92b16fe604144d9cac8bbddf5bb84974",
            "4bb9e163df894848b03fde6e9d4a59b3",
            "51a19f20335c4cd6944cfe8ff5dcbd56",
            "2331a7cf9ab54cba9e34917a231d8e78",
            "b7845d98dc4d4dc8a62f2ed237262490",
            "88abfd2f5bba43e081ac196c3347b579",
            "6babee1ec4be4c20b61b56e4e29937e9",
            "dac93ccc4576440ebd0f304a922327ae",
            "92c9181ab17e45fd8b9290598e979ef4",
            "7d54fd5fc8f94894be543152a4a5a30b",
            "725111193a6f4e9b87cba50cd126b140",
            "a639875265a843129b34584fce44deaf",
            "d54a598740154e19ad9a143c048b6ecf",
            "3d7bea6dcd0f4f64b084941d80d38bf6",
            "d303ed373991459b92179ac216c88c2a",
            "e35774014588425c80c7bff9c7ffe974",
            "dc9d367a162e4845bc5ab1d5640b11a7",
            "383e24511f65467dbccb693a06567b8a",
            "51207f89f8694a86ab8d0773f46526ee"
          ]
        },
        "id": "QSzrsIKZ7yzd",
        "outputId": "aa2a8517-df78-4eaa-c870-c1526c23208f"
      },
      "source": [
        "# Tokenizer - Load the tokenizer specific to gpt2 training\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c77a98ef39f54e469c4350ff5bb64dcd",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1042301.0, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2331a7cf9ab54cba9e34917a231d8e78",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=456318.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a639875265a843129b34584fce44deaf",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1355256.0, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LFlh-kxC8C87"
      },
      "source": [
        "#### **Load GPT2 Pretrained Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203,
          "referenced_widgets": [
            "370b2313a4a04a81988c9fcd3bdf3f13",
            "3390b4f8e397462bb4c2c4443f499053",
            "827770180fd64a38a3f7473a88ee4b44",
            "256b1c45f5984294aee241de951b1fee",
            "4673fcbbc5984c4d9eaf179680f3fbae",
            "3b315533c6dc421eae284b28017fab5c",
            "9f9256c98120462ab6cf0181ad8e3ef7",
            "10cb68fea8a24c57ae0167ed39bdaf2b",
            "91d85031e0904ea4b5f53fb49cf83f50",
            "5c38d744cc884c57a3b1229344d818df",
            "50913834190f4703b30d4ec546d15ffb",
            "8b50338ff43446e194b1c3bfdf82eba4",
            "e3fd416d36734929bf22dbceea7a4a85",
            "f83c42203ed4457abda311a166c75ff5",
            "30b77804c085434198c65705f4a21bdc",
            "80bfed32ef5e4b06a7b6eafd9f6947da"
          ]
        },
        "id": "dBTfWiVS8IbN",
        "outputId": "7c49e933-624b-4b7a-e0b5-11db922797c9"
      },
      "source": [
        "# Model - Load pretrained GPT Language Model\n",
        "model = TFGPT2LMHeadModel.from_pretrained(\"gpt2\", pad_token_id=tokenizer.eos_token_id)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "370b2313a4a04a81988c9fcd3bdf3f13",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=665.0, style=ProgressStyle(description_…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "91d85031e0904ea4b5f53fb49cf83f50",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=497933648.0, style=ProgressStyle(descri…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "All model checkpoint layers were used when initializing TFGPT2LMHeadModel.\n",
            "\n",
            "All the layers of TFGPT2LMHeadModel were initialized from the model checkpoint at gpt2.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFGPT2LMHeadModel for predictions without further training.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N64mbTwxWVxU"
      },
      "source": [
        "#### **Understand GPT2 Model Output**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IkIO1DR1Yq78",
        "outputId": "b185c25c-da5f-4caf-f00f-7666e9c2a6fa"
      },
      "source": [
        "print(model.config)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "GPT2Config {\n",
            "  \"_name_or_path\": \"gpt2\",\n",
            "  \"activation_function\": \"gelu_new\",\n",
            "  \"architectures\": [\n",
            "    \"GPT2LMHeadModel\"\n",
            "  ],\n",
            "  \"attn_pdrop\": 0.1,\n",
            "  \"bos_token_id\": 50256,\n",
            "  \"embd_pdrop\": 0.1,\n",
            "  \"eos_token_id\": 50256,\n",
            "  \"gradient_checkpointing\": false,\n",
            "  \"initializer_range\": 0.02,\n",
            "  \"layer_norm_epsilon\": 1e-05,\n",
            "  \"model_type\": \"gpt2\",\n",
            "  \"n_ctx\": 1024,\n",
            "  \"n_embd\": 768,\n",
            "  \"n_head\": 12,\n",
            "  \"n_inner\": null,\n",
            "  \"n_layer\": 12,\n",
            "  \"n_positions\": 1024,\n",
            "  \"pad_token_id\": 50256,\n",
            "  \"resid_pdrop\": 0.1,\n",
            "  \"summary_activation\": null,\n",
            "  \"summary_first_dropout\": 0.1,\n",
            "  \"summary_proj_to_labels\": true,\n",
            "  \"summary_type\": \"cls_index\",\n",
            "  \"summary_use_proj\": true,\n",
            "  \"task_specific_params\": {\n",
            "    \"text-generation\": {\n",
            "      \"do_sample\": true,\n",
            "      \"max_length\": 50\n",
            "    }\n",
            "  },\n",
            "  \"transformers_version\": \"4.4.1\",\n",
            "  \"use_cache\": true,\n",
            "  \"vocab_size\": 50257\n",
            "}\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yH3brjF2WcBb",
        "outputId": "0888f4f5-9c05-4d50-d665-e18fb62e3609"
      },
      "source": [
        "# Input text\n",
        "input_text = \"How to make ice cream\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "model_outputs = model(input_ids=input_ids)\n",
        "print(type(model_outputs))\n",
        "# Reference for TFCausalLMOutputWithPast: https://huggingface.co/transformers/main_classes/output.html\n",
        "# loss: Optional[tf.Tensor]\n",
        "# logits: tf.Tensor => (batch_size, sequence_length, config.vocab_size)\n",
        "# past_key_values: Optional[List[tf.Tensor]]\n",
        "# hidden_states: Optional[Tuple[tf.Tensor]]\n",
        "# attentions: Optional[Tuple[tf.Tensor]]\n",
        "\n",
        "# Get the logits from output\n",
        "logits = model_outputs.logits\n",
        "print(\"logits.shape:\",logits.shape)\n",
        "print(\"logits:\",logits)\n",
        "\n",
        "# Get the last predicted token logits\n",
        "next_token_logits = logits[:, -1, :].numpy()\n",
        "next_token_logits = next_token_logits[0]\n",
        "next_token_probs = tf.nn.softmax(next_token_logits).numpy()\n",
        "print(\"next_token_logits.shape:\",next_token_logits.shape)\n",
        "print(\"next_token_logits:\",next_token_logits)\n",
        "print(\"next_token_probs:\",next_token_probs)"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[2437  284  787 4771 8566]], shape=(1, 5), dtype=int32)\n",
            "<class 'transformers.modeling_tf_outputs.TFCausalLMOutputWithPast'>\n",
            "logits.shape: (1, 5, 50257)\n",
            "logits: tf.Tensor(\n",
            "[[[ -34.018307  -33.696945  -37.407646 ...  -41.297718  -40.304005\n",
            "    -33.973164]\n",
            "  [-126.08545  -125.78109  -130.03444  ... -131.88132  -133.75713\n",
            "   -125.15636 ]\n",
            "  [ -86.445984  -86.96768   -91.71701  ...  -90.98091   -95.10483\n",
            "    -86.84499 ]\n",
            "  [ -81.66431   -83.30806   -86.07782  ...  -91.175766  -91.10269\n",
            "    -84.193954]\n",
            "  [-101.158966 -103.60024  -109.770035 ... -111.63823  -113.98953\n",
            "   -103.066246]]], shape=(1, 5, 50257), dtype=float32)\n",
            "next_token_logits.shape: (50257,)\n",
            "next_token_logits: [-101.158966 -103.60024  -109.770035 ... -111.63823  -113.98953\n",
            " -103.066246]\n",
            "next_token_probs: [7.5792102e-03 6.5976765e-04 1.3800167e-06 ... 2.1307757e-07 2.0294568e-08\n",
            " 1.1253894e-03]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hJkh4b0lZrso",
        "outputId": "da0159e6-9fe8-403f-a516-606c622f355d"
      },
      "source": [
        "next_token = np.argmax(next_token_logits, axis=-1)\n",
        "print(next_token,\":\",tokenizer.decode([next_token]))"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "351 :  with\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "TdSbwl4hbeni",
        "outputId": "10474daa-30fa-457a-c7a3-a53e523f5a81"
      },
      "source": [
        "logits_idx = np.argsort(-next_token_logits, axis=-1)\n",
        "# Pick the top n tokens\n",
        "top_n = 50\n",
        "top_idx = logits_idx[:top_n]\n",
        "top_logits = next_token_logits[top_idx]\n",
        "top_probs = next_token_probs[top_idx]\n",
        "top_tokens = [tokenizer.decode([token]) for token in top_idx]\n",
        "\n",
        "# print(len(top_idx),top_idx)\n",
        "# print(len(top_logits),top_logits)\n",
        "# print(len(top_tokens),top_tokens)\n",
        "\n",
        "# Plot top logits\n",
        "plt.subplots(figsize=(18,6))\n",
        "ax = sns.barplot(x=top_tokens, y=top_probs, ci=None)\n",
        "# Turn the xlabels vertical.\n",
        "ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha=\"center\")\n",
        "ax.grid(True)\n",
        "plt.title(\"Top {0} tokens\".format(top_n))\n",
        "plt.ylabel('Probability')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3TOHEO43V3w2"
      },
      "source": [
        "#### **Generate Text**\n",
        "\n",
        "There are two ways GPT2 can generate text:\n",
        "* Generate unconditional text: We start with <|endoftext|> which is a special start token to have the model generate words on its own.\n",
        "* Generating conditional text: We provide a starting prompt and then GPT2 continues generatting text on that topic.\n",
        "\n",
        "There are also diferent methods on how words are picked when generating text:\n",
        "* Greedy search\n",
        "* Beam search\n",
        "* Top k sampling\n",
        "* Top p sampling\n",
        "\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/gpt2/laguage_generation_methods.svg\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JLm5W4yC8jSw"
      },
      "source": [
        "##### Greedy Search\n",
        "\n",
        "Greedy search will simply select the word with the highest probability as its next word: $w_t = argmax_{w}P(w | w_{1:t-1})$ at each timestep $t$. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 86
        },
        "id": "2AEjJiVQ8l13",
        "outputId": "51b27cb6-fc5d-45d3-d089-4130bf166494"
      },
      "source": [
        "# Input text\n",
        "input_text = \"How to make ice cream\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "# max_length is the maximum length of the whole text, including input words and generated ones.\n",
        "outputs = model.generate(input_ids, max_length=50,num_return_sequences=1)\n",
        "\n",
        "print(\"Generated text:\")\n",
        "display(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[2437  284  787 4771 8566]], shape=(1, 5), dtype=int32)\n",
            "Generated text:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'How to make ice cream with ice cream?\\n\\nThe answer is simple: make ice cream with ice cream.\\n\\nThe ice cream is made with ice cream.\\n\\nThe ice cream is made with ice cream.\\n\\nThe ice cream'"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wbP6_QtqFhOj"
      },
      "source": [
        "##### Beam Search\n",
        "\n",
        "Beam search is an improved version of greedy search. It has a hyperparameter named beam size, $k$ . At time step 1, we select to $k$ tokens with the highest conditional probabilities. Each of them will be the first token of $k$ candidate output sequences, respectively. At each subsequent time step, based on the $k$ candidate output sequences at the previous time step, we continue to select $k$ candidate output sequences with the highest conditional probabilities."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aOKgX_tFFh5x",
        "outputId": "245a1e88-0589-4b8c-dcdc-33719d02d041"
      },
      "source": [
        "# Input text\n",
        "input_text = \"How to make ice cream\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "# Generate output\n",
        "outputs = model.generate(\n",
        "    input_ids,  \n",
        "    max_length=50, \n",
        "    num_beams=3, \n",
        "    early_stopping=False\n",
        ")\n",
        "\n",
        "print(\"Generated text:\")\n",
        "print(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[2437  284  787 4771 8566]], shape=(1, 5), dtype=int32)\n",
            "Generated text:\n",
            "How to make ice cream with ice cream?\n",
            "\n",
            "You can make ice cream with ice cream.\n",
            "\n",
            "You can make ice cream with ice cream.\n",
            "\n",
            "You can make ice cream with ice cream.\n",
            "\n",
            "You can make ice cream with\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iAgkNI5lGeDO"
      },
      "source": [
        "##### Top k Sampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XzqddNy7Gle3",
        "outputId": "f12a3397-19a7-4fd0-c0f5-f7822b7f9c5f"
      },
      "source": [
        "# Input text\n",
        "input_text = \"How to make ice cream\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "# Generate output\n",
        "outputs = model.generate(\n",
        "    input_ids, \n",
        "    do_sample=True, \n",
        "    max_length=30, \n",
        "    top_k=50\n",
        ")\n",
        "\n",
        "print(\"Generated text:\")\n",
        "print(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[2437  284  787 4771 8566]], shape=(1, 5), dtype=int32)\n",
            "Generated text:\n",
            "How to make ice cream and other snacks.\n",
            "\n",
            "5. How to make candy, other sweets, and snack-to-go items.\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dySPEL4wGlzQ"
      },
      "source": [
        "##### Top p Sampling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QAeaiM8oG8ky",
        "outputId": "20ba21da-c7d3-47ca-de0f-4d42ed66e327"
      },
      "source": [
        "# Input text\n",
        "input_text = \"How to make ice cream\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "# Generate output\n",
        "outputs = model.generate(\n",
        "    input_ids, \n",
        "    do_sample=True, \n",
        "    max_length=75, \n",
        "    top_p=0.80, \n",
        "    top_k=0\n",
        ")\n",
        "\n",
        "print(\"Generated text:\")\n",
        "print(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[2437  284  787 4771 8566]], shape=(1, 5), dtype=int32)\n",
            "Generated text:\n",
            "How to make ice cream on the ice, doesn't it?\n",
            "\n",
            "Not really. I think it's probably better if we just melt it with ice cream, and we'll find something to take out of it.\n",
            "\n",
            "But it's always best to start off by melting it with ice cream.\n",
            "\n",
            "What happens when you pour it over the ice?\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2v2UlOdOP5cF"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6fCKypQkPlOd"
      },
      "source": [
        "### **<font color='red'>Break Out Room</font> 🎊🎉** <div id='gpt2_breakout'>\n",
        "\n",
        "For this break out room go to this [notebook](https://colab.research.google.com/drive/1vaGR49GAEo6td-dNba5O1R3Fo4jqA65p?usp=sharing) and have fun writing text 😁 \n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1qXEkgLHHOys"
      },
      "source": [
        "### **Finetune GPT-2 Lanaguage Model** <div id='gpt2_finetune'>\n",
        "\n",
        "In this section, we're going to be working with news articles from CNN related to covid-19. We will explore the dataset, prepare the data for finetuning GPT2.\n",
        "\n",
        "**The Task:** Finetune GPT2 to build a language model on news articles related to health, specifically covid-19 related articles."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C3f3_gGXHViC"
      },
      "source": [
        "#### **Download Dataset**\n",
        "\n",
        "Download the datasets to colab."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "egOka1XlMwWD",
        "outputId": "d27e4332-a39b-40d1-e295-9f24a882fa8b"
      },
      "source": [
        "start_time = time.time()\n",
        "# Dowload the news about covid dataset\n",
        "download_file(\"https://storage.googleapis.com/cs109b/datasets/covid.zip\", base_path=\"datasets\", extract=True)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Download execution time (mins)\",execution_time)"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Download execution time (mins) 0.013502029577891032\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BeRlscziOFqe"
      },
      "source": [
        "#### **Load Data**\n",
        "\n",
        "* Read-in data as lists."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YhzSkToQNDtu",
        "outputId": "5c51b208-4989-41fe-f863-ec0e365bbfe7"
      },
      "source": [
        "data_dir = os.path.join(\"datasets\",\"covid\")\n",
        "\n",
        "# Load all the paths to text files\n",
        "training_data = []\n",
        "text_files = os.listdir(data_dir)\n",
        "training_data.extend([os.path.join(data_dir,f) for f in text_files])\n",
        "\n",
        "# Subset your training data for demo, full datset can take a long time to train\n",
        "subset_data = True\n",
        "if subset_data:\n",
        "  training_data = training_data[:300]\n",
        "\n",
        "# Load the text content\n",
        "for idx, path in enumerate(training_data):\n",
        "  # Load text\n",
        "  with open(path) as file:\n",
        "    training_data[idx] = file.read()\n",
        "\n",
        "print(\"training_data count:\",len(training_data))"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "training_data count: 300\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vuVI0fRaOJ6V"
      },
      "source": [
        "#### **View Text**\n",
        "\n",
        "Let's take a look at the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vOnaQxrdNquT",
        "outputId": "604c106e-11aa-4358-e2cf-409c464ec02f"
      },
      "source": [
        "# Generate a random sample of index\n",
        "data_samples = np.random.randint(0,high=len(training_data)-1, size=10)\n",
        "for i,data_idx in enumerate(data_samples):\n",
        "  print(\"Text:\",training_data[data_idx])"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Text: Air quality in US dramatically worse than in prior years, says new 'State of the Air' report  (CNN)The air quality in the United States is dramatically declining, leaving about 150 million people -- nearly half of America's population -- breathing unhealthy, heavily polluted air, according to the newly released \"State of the Air\" 2020 report by the American Lung Association. \"We're moving in the wrong direction, with nearly nine million more people breathing dirty air than in last year's report,\" said Paul Billings, the national senior vice president of public policy for the American Lung Association. That's particularly bad news for people like Tim Seib, a 37-year-old New York City regional theater director who has suffered from asthma his entire life.  \"Knowing we've let our air get worse is maddening to me because air quality directly affects my day to day health,\" Seib said. \"It's not a political stance, it's not an ideology thing.\" \"When asthma symptoms start, you don't know when your next full breath of air is going to come. It almost feels like you're drowning,\" Seib continued.  \"I don't think until you've walked in the shoes of someone with respiratory issues (that) you really understand how scary that can be.\" 50th anniversary of Clean Air Act This year marks the 50th anniversary of the Clean Air Act, which charged the US Environmental Protection Agency with regulating all sources of air emissions. The goal was to reduce air pollution and acid rain, increase air quality and visibility, slow climate change and protect the ozone layer.  According to the EPA, the act is responsible for a 50% decline in emissions of key air pollutants since 1990, the year when a new series of amendments were passed. Under the Trump administration, however, a number of those protections have been rolled back or have gone unregulated. It's that lack of enforcement -- along with worsening climate change -- which has lead to the recent reversal of air quality gains, the report said. \"If there's no environmental cop on the beat, we know that polluters will skirt the rules of the law, will cheat and will increase emissions,\" Billings said. \"And pollution will increase. It has increased.\" Environmental advocacy groups were equally critical. \"Around the world, toxic air kills 5 million people every year and, as this report makes clear, the US has a long way to go to better protect communities.\" said Sarah Vogel, vice president for health at the Environmental Defense Fund.  \"Unfortunately, the Trump administration is still trying to weaken existing safeguards and allow even more dangerous pollution in our air,\" Vogel said. \"At a time when our lung health is more endangered than ever before, our leaders should be taking firm measures to clean up our air. Instead, the Trump administration has weakened clean air standards and ignored scientific evidence for stronger particulate matter safeguards,\" said Bill Magavern, policy director for the Coalition for Clean Air. An EPA spokesperson provided the following response: \"The United States is a global leader in clean air progress, and the Lung Association paints a pessimistic picture based upon a problematic methodology. EPA methods for determining air quality, which are based on the Clean Air Act and the latest science, show continued improvements in measures of U.S. air quality in recent years and into the future.\" Increases in types of pollution The 21st annual \"State of the Air\" report analyzed data from 2016, 2017 and 2018 -- three of the five hottest years in recorded history in the world, the report said. Those warmer temperatures contributed to the rise of ozone levels in many places in the US, the report found, affecting more than 137 million people. Breathing in ozone, or smog, can cause asthma attacks, shortness of breath, and trigger coughing, the report said. The heat from increasing climate change also contributed to wildfires, especially in western states, which spiked particulate pollution levels to dangerous levels, the report said.  Particulate matter is a mixture of solid and liquid matter found in the air. Dust, dirt and smoke particles are larger but there are also extremely small, inhalable particulates that can't be seen with the naked eye. Those are called PM 2.5 because their size is generally 2.5 micrometers or less. That's really tiny. As a comparison, an average human hair is 30 times larger than a PM 2.5 particle. Because they are so small, these particulates can get deep into our airways and wreak havoc with our lungs and bodily functions. The report found nine western cities reached their worst levels of particulate pollution ever recorded: Fairbanks, Alaska; Yakima, Washington; Las Vegas, Nevada; Phoenix, Arizona; Spokane, Washington; and the following cities in California -- Chico, Salinas, Redding and Santa Maria.  In contrast, the cities with the cleanest air, defined as no high ozone or high particle pollution days over the three-year period of the sudy, were Bangor, Maine; Honolulu, Hawaii; Wilmington, North Carolina; and Burlington, Vermont.  \"The report finds the air quality in some communities has improved, but the 'State of the Air' finds that far too many people are still breathing unhealthy air,\" said American Lung Association President and CEO Harold Wimmer in a statement. \"Climate change continues to degrade air quality and increase the risk of air pollution harming health,\" Wimmer said.  Significant health impacts Even short-term exposure to particulate pollution can trigger cardiovascular issues, strokes and asthma attacks as well as contribute to the development of dementia, studies show. Air pollution is also increasing the risk of dying from Covid-19, the disease caused by the novel coronavirus. A recent Harvard study found US counties with the highest levels of air pollution had significantly higher death rates from COVID-19 than counties with much lower levels. Seib lives in the Harlem district of New York City, which has been extremely hard hit by Covid-19. He caught a milder form of the virus a few weeks ago, and even that was frightening for him.  \"All my life, my asthma symptoms have gotten worse at night,\" he said. \"So the Covid symptoms just kept intensifying and it was scary to go to bed at night not knowing if I was going to wake up in the middle of an asthma attack or be more compromised than I was when I went to sleep.\" Knowing what it is like to struggle for breath, Seib finds it hard to understand why any regulations to protect US air quality would be cut or relaxed. \"So my message would be, please just try to see it through someone's eyes, like myself or God forbid, someone who has even even worse symptoms or health concerns,\" Seib said. \"Because we don't have a ton of options out there, and it's a very scary and very real thing to wake up to everyday.\"  Correction: A previous version of this story include a quote from Paul Billings that misstated the number of people exposed to dirty air in the 2020 \"State of the Air\" report. They have revised the quote and this article has been updated to reflect that. \n",
            "Text: US coronavirus death toll passes 90,000 but influential model lowers its prediction  (CNN)A key coronavirus model has revised its death projection for the United States slightly downward, now forecasting that 143,360 people will die by August 4. That's about 3,700 fewer deaths than the Institute for Health Metrics and Evaluation (IMHE) model foresaw when last updated about a week ago. The news comes as the coronavirus death toll in the United States has passed another somber milestone. More than 90,000 people now have died, and more than 1.5 million people have been infected, according to Johns Hopkins University data.  The shift in the model's fatalities forecast is small, but it marks a departure from recent increases in the model's death projections, which have been largely based on increases in mobility across the country and the easing of social distancing measures.  As people have been moving around more -- and as social distancing measures have been relaxed -- the model has projected more deaths. But one researcher at the IHME at the University of Washington, who program the model, said that fewer people are forecasted to die in certain parts of the country. \"We were pretty surprised,\" said Chris Murray, the chairman of the school's Health Metrics Sciences department. \"We were expecting to probably go up because of the big surge in mobility.\" Murray told CNN's Anderson Cooper that they didn't find a correlation between mobility and deaths. They believe the difference lies in the number of individuals wearing masks and that people are being careful to keep their distance from others. Submit your questions about school during the pandemic Good news emerges from a vaccine trial  As research teams scramble to create or test vaccines, one company announced a milestone in its progress Monday. The biotech company Moderna said eight trial participants developed neutralizing antibodies to coronavirus. Neutralizing antibodies bind to the virus, disabling it from attacking human cells. If future studies go well, the company's vaccine could be available to the public as early as January, said Moderna Chief Medical Officer Dr. Tal Zaks. But the results of the study, which was led by the National Institutes Health, have not been peer reviewed. And there's much more work to be done, Zaks said.   \"We are going to have to conduct formal efficacy trials where you vaccinate many, many people, and then you monitor them in the ensuing months to make sure they don't get sick,\" he said. The announcement was one of Monday's developments that prompted President Donald Trump to call it \"a very big day therapeutically, cure-wise and vaccine-wise.\" The President later told reporters he has been taking the drug hydroxychloroquine for a couple of weeks. Trump, who had tested negative for the coronavirus, said he heard positive things about the drug. \"Because I think it's good; I've heard a lot of good stories. And if it's not good, I'll tell you right. I'm not going to get hurt by it,\" he said.  Millions more can go to the gym and retail stores  On Monday, Massachusetts became the 49th state to be fully or partially reopened. Gov. Charlie Baker said he's allowing manufacturing and construction sites to reopen immediately. \"We've all been doing our jobs to fight (coronavirus), and as a result, positive case rates are moving in the right direction and hospitalizations are down,\" Baker said. All public transportation riders in the Boston area must continue wearing face masks. Baker said more sectors of the economy will be allowed to open in phases, with the next one starting May 25. Florida entered its first full phase of reopening Monday, allowing restaurants, retail stores and gyms across the state to reopen with certain restrictions.  California, the first state to issue a statewide stay-at-home order, is now in its second of four reopening phases.  \"I deeply understand the stress and anxiety that people have, that entire dreams have been torn asunder because of the shutdowns, their savings account depleted and their credit ratings destroyed,\" Gov. Gavin Newsom said. Texas, one of the first to start reopening, had its highest single-day increase in new cases over the weekend. Restaurants, movie theaters and malls have been open for more than two weeks, but the governor has attributed an increase in coronavirus cases to more testing.  Why it'll take weeks to see the health effects of reopening And in New York, New Jersey, Connecticut and Delaware, beaches will be open for Memorial Day weekend, with restrictions. But with greater freedoms come more responsibilities to prevent a resurgence of coronavirus -- which would lead to another blow to the economy.  That includes wearing masks in public, Ohio Gov. Mike DeWine said.  \"About 90% of our economy is back open because we thought it was a huge risk not to reopen,\" DeWine said Sunday. If the situation gets worse, \"we're prepared to do what we have to do to pull back,\" he said.  \"We don't want to be like some of the other countries we've seen where they shut down, opened up, and now are starting to shut down again,\" DeWine said. \"And it's in everyone's collective hands how we act in the next month or two, whether or not we're going to be in that position.\"  In Georgia, Gov. Brian Kemp also said the state will keep tracking the numbers and \"will take whatever action is necessary to protect the lives and the livelihoods of all Georgians.\" Connecticut on Wednesday will be the last state to start reopening. Officials announced a website with \"strict safety guidelines\" that businesses must meet before reopening. Where each state stands in the reopening process Testing increases, but so do concerns about accuracy Health and Human Services Secretary Alex Azar said the US has conducted more than 10 million coronavirus tests, and the federal government is deploying rapid tests to meatpacking facilities and nursing homes. But there are new concerns about the accuracy of some diagnostic tests, which are supposed to determine whether someone currently has the virus.  AdventHealth said about 35,000 coronavirus tests -- 33,000 of which were conducted in Florida -- have been deemed unreliable because problems at a processing lab. AdventHealth declined to name the lab, but said it was \"working diligently\" to notify people who may be affected. The news comes after concerns about the accuracy of antibody tests, which are supposed to tell whether you've been exposed to the virus in the past.  Health officials stress that it's too early to know whether having coronavirus antibodies means you have long-term immunity against a second infection -- or if you have immunity at all.  Your coronavirus questions, answered Highest rate of cases? Navajo Nation The Navajo Nation, with the rate of 2,304.41 cases of Covid-19 cases per 100,000 people, has surpassed New York and New Jersey for the highest per-capita infection rate. There are at least 4,002 infections in the Navajo Nation, which spans parts of Arizona, New Mexico, and Utah.  The Native American territory had a population of 173,667, according to the 2010 census. The president of the Navajo Nation, Jonathan Nez, attributed the virus' spread among his people to close living conditions and the area being a \"food desert.\" \"Most of our food and supplies come from the 13 shopping centers, convenience stores, and gas stations throughout the Navajo,\" Nez said  He added the Nation was also testing for coronavirus at a higher rate than states. CNN's Elizabeth Cohen, Steve Almasy, Roxanne Garcia, Kristina Sgueglia, Kevin Bohn, Artemis Moshtaghian, Wesley Bruer, Maggie Fox and Giulia McDonnell Nieto del Rio contributed to this report.  \n",
            "Text: Inside an ER during the coronavirus outbreak \n",
            "Text: Allergy warning for Pfizer/BioNTech vaccine after UK health workers with allergy history suffer reaction London (CNN)People with a \"significant history of allergic reactions\" should not be given the Pfizer/BioNTech coronavirus vaccine, UK health authorities said Wednesday, after two health care workers experienced symptoms after receiving a shot the day before.  The precautionary advice was given after the pair \"responded adversely\" following their shots on the first day of the mass vaccination rollout in the UK, National Health Service England said Wednesday. The two staff members -- who both carried an adrenaline auto injector and had a history of allergic reactions -- developed symptoms of anaphylactoid reaction after receiving the vaccine on Tuesday. Thousands overall were vaccinated in the UK on Tuesday, NHS England told CNN on Wednesday. \"As is common with new vaccines the MHRA [Medicines and Healthcare products Regulatory Agency] have advised on a precautionary basis that people with a significant history of allergic reactions do not receive this vaccination after two people with a history of significant allergic reactions responded adversely yesterday,\" said Stephen Powis, the national medical director for NHS England, in a statement. \"Both are recovering well.\"  The MHRA issued new advice to health care professionals stating that any person with a significant allergic reaction to a vaccine, medicine or food -- such as previous history of anaphylactoid reaction, or those who have been advised to carry an adrenaline autoinjector -- should not receive the Pfizer/BioNtech vaccine. The advice also states that vaccines \"should only be carried out in facilities where resuscitation measures are available.\" \"We are fully investigating the two reports that have been reported to us as a matter of priority,\" an MHRA spokesperson said. \"Once all the information has been reviewed we will communicate updated advice,\" the spokesperson added. They advised anyone with a history of a significant allergic reaction due to receive the Pfizer/BioNTech vaccine to speak to the health care professional administering the vaccine. Pfizer said in a statement that it had been advised by the UK regulator of \"two yellow card reports that may be associated with allergic reaction\" due to administration of the vaccine.  \"As a precautionary measure, the MHRA has issued temporary guidance to the NHS while it conducts an investigation in order to fully understand each case and its causes. Pfizer and BioNTech are supporting the MHRA in the investigation,\" the statement said. \"In the pivotal phase 3 clinical trial, this vaccine was generally well tolerated with no serious safety concerns reported by the independent Data Monitoring Committee. The trial has enrolled over 44,000 participants to date, over 42,000 of whom have received a second vaccination.\" Documents released on Tuesday by the US Food and Drug Administration (FDA) said the Pfizer/BioNTech trial data indicated that there were potentially slightly more adverse responses thought to be allergic reactions among the vaccine group compared with the placebo group, at 0.63% compared with 0.51%. Pfizer's trial protocol shows that people with a history of severe allergic reaction (e.g., anaphylaxis) \"to any component of the study intervention\" were not able to take part. Stephen Evans, professor of pharmacoepidemiology at the London School of Hygiene & Tropical Medicine, told the UK's Science Media Centre that the increase was only \"small\" but said there was \"a lot of uncertainty around that estimate.\" He said that \"some people won't know if they have hypersensitivity to some constituents of the vaccine.\" He backed the MHRA advice for people who carry an EpiPen to delay having a vaccination until the reason for the allergic reaction has been clarified. But he said the news did not mean the general public should be anxious. Peter Openshaw, professor of experimental medicine at Imperial College London, said: \"As with all food and medications, there is a very small chance of an allergic reaction to any vaccine. \"The fact that we know so soon about these two allergic reactions and that the regulator has acted on this to issue precautionary advice shows that this monitoring system is working well.\" Vaccine expert Dr. Paul Offit told CNN that allergic reactions to vaccines were not uncommon: \"Certainly, vaccines can cause severe allergic reactions. In the United States, roughly one of every 1.4 million doses of vaccines is complicated by a severe allergic reaction.\" He said that rather than a \"blanket recommendation\" for people with allergies, \"the smarter thing to do would be to try and look at these two patients and see what specific component of the vaccine they were allergic to.\" Offit said people should realize that there are immediate treatments for allergic reaction. \"That's why you're hanging out in the doctor's office,\" he said, before warning that the reports of allergic reactions \"will only serve as yet another way to scare people.\" Saffron Cordery, deputy chief executive of NHS Providers, told Sky News on Sunday that the authorization and approval process for the Pfizer/BioNTech vaccine \"has been incredibly robust.\" The head of Britain's medicines regulator also put out assurances on Sunday, saying the Pfizer/BioNTech shot was \"as safe as any general vaccine.\" US drug giant Pfizer and German company BioNTech have said there are \"no serious safety concerns\" over the vaccine.  The US Centers for Disease Control and Prevention typically advises telling a provider if you have \"any severe, life-threatening allergies\" before taking any vaccine. Allergies are also a consideration with other Covid-19 vaccines that have not yet been approved.  During Chinese company Sinovac's Phase 2 trial, one volunteer in the high dose group had a severe allergic reaction within 48 hours of the first dose, which researchers said may be related to the vaccine. The volunteer was treated for the reaction and recovered within three days. The same volunteer did not have a similar allergic reaction to the second shot.  CNN's Jen Christensen and Schams Elwazer contributed reporting. \n",
            "Text: How fighting coronavirus taught me about the gift of connection \n",
            "Text: The US has lost 500,000 lives to Covid-19. Now Americans face a serious crossroads in the pandemic  Programming note: Watch \"We Remember 500,000: A National Memorial Service for Covid-19,\" hosted by CNN's Jake Tapper, Monday at 11 p.m. ET.  (CNN)A nightmare of this magnitude seemed unfathomable just a year ago.   Half a million US lives have been lost to Covid-19. That's more than the number of Americans killed in World War II.  The victims of this silent enemy were young and old, spanning all backgrounds and corners of the country.  President Joe Biden spoke at a candlelighting ceremony to mark the grim milestone.  \"As a nation, we can't accept such a cruel fate. We've been fighting this pandemic for so long. We have to resist becoming numb to the sorrow,\" the President said. \"We have to resist viewing each life as a statistic or a blur or on the news. We must do so to honor the dead, but equally important care for the living, those they left behind.\" Biden also participated in a moment of silence, standing by 500 lighted candles outside the White House, joined by first lady Jill Biden, Vice President Kamala Harris and second gentleman Doug Emhoff.  A flag atop the White House and flags at the US Capitol were lowered to half-staff Monday afternoon. The pandemic is far from over as more than 1,200 American deaths were reported Monday. But Americans can steer its course -- and help prevent many more families from suffering inconsolable grief.  Major challenges ahead As numbers of new cases and hospitalizations go down, however, reports of highly contagious variants go up.  \"I am worried about this variant -- the B.1.1.7 variant (first found in the UK),\" said Dr. Peter Hotez, dean of the National School of Tropical Medicine at Baylor College of Medicine. \"If that takes over, the numbers are going to start to spiral up again. There's no end to what the death toll will look like unless we can vaccinate ahead of it.\"  But as the number of vaccinations slowly increase, some Americans say they won't get a Covid-19 vaccine -- hurting the chances of herd immunity and hindering a return to normal life.  Where we stand with vaccinations More than 44.1 million Americans have received at least one dose of their two-dose vaccines, according to the US Centers for Disease Control and Prevention.  About 19.4 million have been fully vaccinated. That's about 5.9% of the US population -- far less than the estimated 70% to 85% of Americans who would need to be immune to reach herd immunity.  Some states are still grappling with vaccine delays after severe weather walloped much of the country last week. But the US will likely be caught up by the middle of this week, said Dr. Anthony Fauci, director of the National Institute of Allergy and Infectious Diseases.  \"Obviously it is a setback because you'd like to see the steady flow of vaccine getting out there to get into people's arms, but we can play pretty good catch-up,\" Fauci told NBC on Sunday.  To speed up vaccinations, some experts have suggested delaying second vaccine doses to get more first doses into people's arms.  Both vaccines on the US market -- developed by Pfizer-BioNTech and Moderna -- require two doses, the second of which are intended to be administered 21 days and 28 days after the first, respectively. Fauci told CNN Sunday the US is currently sticking with the vaccine schedule that is backed up by data from clinical trials.  \"The science points directly towards continuing with what we know ... from the clinical trial,\" he said. Good news (for now) on cases and hospitalizations Nationwide, the rates of new Covid-19 cases, hospitalizations and deaths are declining. The number of patients hospitalized with Covid-19 has fallen for the 40th day in a row, according to the COVID Tracking Project.  Daily deaths have declined 24% this past week compared to the previous week, according to data from Johns Hopkins University.  Dr. Rochelle Walensky, director of the CDC, earlier Monday touted encouraging numbers in declining new cases, deaths, and hospital admissions, but also offered a note of caution.  The seven-day average of deaths reported each day is at its the lowest since the beginning of December, she said.   At a White House coronavirus task force briefing held before the death toll was updated, Walensky noted the falling death rate but said the total number of Covid-19 fatalities is \"a truly tragic reminder of the enormity of this pandemic, and the loss it has afflicted on our personal lives and our communities. While the pandemic is heading in the right direction there is still much work to do.\" About 1,700 cases of coronavirus variants strains first spotted in the UK, South Africa and Brazil have been reported in the US, according to the CDC.  But that figure is probably nowhere near the actual number of variant cases in the US, since the US has lagged behind dozens of other countries in genome sequencing per 1,000 Covid-19 cases.  Walensky has said the US has ramped up sequencing to find variants and will keep doing so. The vast majority of variant cases so far involve the highly contagious B.1.1.7 variant first detected in the UK.  Experts with the University of Washington's Institute for Health Metrics and Evaluation (IHME) said over the weekend that while the B.1.1.7 strain likely accounts for less than 20% of current infections in the US, that number will likely soar to 80% by late April.  'Now is not the time to let your guard down' What happens next largely depends on personal responsibility and how many people get vaccinated, the IHME team said.  \"Managing the epidemic in the next four months depends critically on scaling up vaccination, trying to increase the fraction of adults willing to be vaccinated above three-quarters, and strongly encouraging continued mask use and avoiding situations where transmission is likely, such as indoor dining, going to bars, or indoor gatherings with individuals outside the household,\" the team wrote. The American Medical Association, the American Hospital Association and the American Nurses Association also pleaded for Americans to help quash the pandemic. \"With new, more contagious variants of the virus circulating throughout the U.S., now is not the time to let your guard down and scale back on the measures that we know will work to prevent further illness and deaths -- wearing masks, practicing physical distancing, and washing hands,\" a joint statement said.  Why we could be wearing masks next winter, too Some Americans have discovered an unexpected perk to wearing masks in the winter -- they protect against brutally cold air, not just against coronavirus.  And Americans might be wearing them next winter, when some health experts say Covid-19 might flare up again. Fauci hopes that doesn't happen, he said, adding it's \"possible\" people may be wearing masks in 2022.  There may be other ways everyday life will be different from the past, said infectious disease specialist and epidemiologist Dr. Celine Gounder. \"I do think we're looking at some new normals. I think the handshake, for example, is probably going away,\" she said. \"I do think masks in the cough/cold/flu season in the winter months would make a lot of sense. That clearly, really insulated the Southeast Asian countries from some of the worst of this, understanding the importance of wearing masks.\" For those who have already been vaccinated, health experts say they should keep wearing a mask. That's because it takes weeks for vaccines to fully kick in and because vaccines don't guarantee a person won't pass coronavirus on to others.  \"It's estimated that about 70% of Americans must be vaccinated before we get to herd immunity through vaccination,\" CNN medical analyst Dr. Leana Wen said. \"That's the point where enough people have the immune protection that the virus won't spread anymore.\" And slowing the transmission of coronavirus also hinders the chances of the virus mutating further.  \"The evidence was pretty compelling by last March or April that uniform wearing of masks would reduce transmission of this disease,\" National Institutes of Health Director Dr. Francis Collins told \"Axios on HBO\" on Sunday. The politicization of face masks probably led to many unnecessary deaths, he said. \"A mask is nothing more than a life-saving medical device, and yet it got categorized in all sorts of other ways that were not factual, not scientific and, frankly, dangerous,\" he added. \"And I think you can make a case that tens of thousands of people died as a result.\"  CNN's Virginia Langmaid, DJ Judd, Amanda Watts, Jessica Firger, Naomi Thomas and Michael Nedelman contributed to this report.  \n",
            "Text: Video reveals lung damage in US coronavirus patient: 'People need to take this seriously'  (CNN)A video shows the lungs of a man who had been asymptomatic a few days earlier.  Now, the patient has Covid-19 and his lungs are failing to function properly, said Dr. Keith Mortman, the chief of thoracic surgery at George Washington University Hospital. The Washington, D.C., hospital recently released a 3D video of the coronavirus patient's lungs.  The imagery shows extensive damage to the lungs of a generally healthy 59-year-old male with high blood pressure, Mortman said. Since becoming seriously ill, the patient requires a ventilator to help him breathe, but even on the highest setting, it's not enough. He also needs another machine that circulates and then oxygenates his blood, Mortman said.  \"This is not a 70, 80-year-old immunosuppressed, diabetic patient,\" Mortman said. \"Other than high blood pressure, he has no other significant medical issues. This is a guy who's minding his own business and gets it ... If we were to repeat the 360VR images now, that is one week later, there is a chance that the infection and inflammatory process could be worse.\"  Areas marked in yellow on the video represent infected and inflamed parts of the lung, Mortman said. When the lungs encounter a viral infection, the organ will start to seal the virus off. From the scan, it is clear that the damage isn't localized to a single area, but instead covers massive swaths of both lungs, showing how rapidly and aggressively the infection can take hold, even in younger patients. A patient with healthy lungs would have no yellow on the scan, he said. The patient remains in critical condition in the ICU. \"For these patients who essentially present in progressive respiratory failure, the damage to the lungs is rapid and widespread (as evidenced in the VR video),\" Mortman said in an email. \"Unfortunately, once damaged to this degree, the lungs can take a long time to heal. For approximately 2-4% (depending on which numbers you believe) of patients with Covid-19, the damage is irreversible and they will succumb to the disease.\" The coronavirus is primarily respiratory in nature. It \"gets into the mucus membranes, and then it's in the lung. The way the body tries to control that is with inflammation,\" Mortman said.  The yellow marks both infection and inflammation. \"So you get this pretty strong inflammatory process in the lungs in the body's attempt to control the infection,\" Mortman said. Inflammation prevents the lungs from being able to oxygenate the blood and to remove carbon dioxide. That would cause a patient to gasp, or inhale a lot of air to balance the oxygen and carbon dioxide levels The images suggest that the words to describe common symptoms -- coughing and shortness of breath -- can't really capture the impact of the virus on the body. In some people, Mortman said, the damage will be irreversible -- making it imperative that Americans heed advice on social distancing and self-isolation.  \"I want people to see this and understand what this can do,\" Mortman said. \"People need to take this seriously.\" The hospital typically uses the CT imaging technology that produced the video for cancer screenings and to plan surgeries. But for the first time, the technology has now been applied to fighting the novel coronavirus.   \"A lot of us, we are walking in the dark with this,\" Mortman said. \"So we want to understand it as best we can. This was our first patient, but I am sure he is the first of what will likely become many in the coming weeks.\"  \n",
            "Text: The opioid epidemic was already a national crisis. Covid-19 could be making things worse  (CNN)Before the Covid-19 pandemic, the nation was in the throes of another public health crisis: the opioid epidemic. More than 2 million Americans struggle with opioid use disorder, and about 130 Americans on average die every day from an opioid overdose. Opioids account for a majority of drug overdose deaths, the leading cause of accidental death in the US. It's a crisis that's been a priority for officials at the federal, state and local levels for years. Now, the coronavirus has disrupted all matters of life across the country -- including efforts to combat the nation's opioid problem.  Walk-in clinics and syringe exchange programs have been closed. Community support groups are meeting virtually.  Some who struggle with substance abuse are homeless or incarcerated and can't comply with social distancing guidelines, while those who can are left isolated and at risk. On top of all that, the pandemic is causing massive stress -- a primary driver of relapse.  \"This changing, very strange world that we're living through could serve as a trigger for people to return to drug use,\" said Daliah Heller, director of drug use initiatives at the public health organization Vital Strategies. \"And that brings a great potential for overdose with it.\" As local officials report spikes in overdose calls and deaths, experts and advocates say they're concerned the coronavirus pandemic is making an already serious problem worse. Local officials are reporting overdose spikes County coroners, law enforcement and emergency responders around the country are reporting spikes in overdose calls and deaths -- and they're concerned that's connected to Covid-19. Franklin County, Ohio, reported 28 non-fatal overdoses from last Friday night to Saturday night. The previous Friday, the county had six overdose deaths, which coroner Anahi Ortiz had described as a \"surge\" in a Facebook post. Ortiz wrote in a Facebook post on Sunday that Franklin County had seen a 50% increase in fatal overdoses from January to April 15. Sixty-two people died of overdoses in the month of April alone, she wrote.  Niagara County in New York reported last month that drug overdoses spiked 35% from January 1 to April 6, compared to the same time last year. And in Jacksonville, Florida, the fire and rescue chief said the city saw a 20% increase in overdose calls from February to March. It's too soon to determine whether such reports are evidence of a larger trend, said Nora Volkow, director of the National Institute on Drug Abuse. Federal and state data on fatal and non-fatal overdoses for the past few months are not yet available, while coroners and medical examiners are overwhelmed with cases of Covid-19 and may not have the resources to follow up on overdose deaths, she said. \"We do not know,\" Volkow said, of whether more people are overdosing in connection with Covid-19. \"In many cases, we will likely never know.\" But she predicts that some communities will \"absolutely\" see an uptick in overdoses. Public health services are disrupted There are a few reasons that experts are concerned about a potential coronavirus-related increase in opioid overdoses. For one, harm reduction programs across the country have been experiencing reduced capacity given the pandemic, Heller said.  Though many states have defined such services as essential in their stay-at-home orders, some programs have had to restrict access or reduce staffing because of a lack of funding or personal protective equipment for their workers. Federal agencies have eased some regulations that have mitigated the risks of overdoses and Covid-19 infection, Heller said. For example, patients receiving medication-assisted treatment for opioid use disorder often have to visit a provider daily for a dose of methadone. But because such visits could expose both patients and health care workers to Covid-19, the Substance Abuse and Mental Health Services Administration (SAMHSA) is temporarily allowing treatment programs to provide patients with two to four weeks' worth of methadone doses to take home.  Meanwhile, the Drug Enforcement Administration (DEA) has also relaxed telehealth restrictions around prescriptions for buprenorphine, another medication-assisted treatment. Still, for people who lack health insurance or high-speed internet access, there are barriers. People are engaging risky behaviors In some communities, services that treat addiction or prevent overdoses, such as needle exchange programs, are on hold -- leading people to engage in risky behaviors.  Jamie Favaro is the founder of Next Distro, a harm reduction organization that provides syringes and the overdose-reversing naloxone online and through the mail. She said her organization is receiving about five times as many requests as usual because people haven't had access to sterile syringes. A significant volume of requests is coming from people in Ohio, Kentucky and West Virginia, she said.  Recently, she said, a client in West Virginia requested syringes after sharing a single needle with three other people for a week. The exchange programs in their area were shut down, the client said, and there was nowhere else to get syringes. Other clients have reached out saying they are also reusing syringes or have had needles break off in their skin, she said. \"I'm very fearful that we're going to see an HIV spike and a Hepatitis C spike, as well as an overdose spike in areas where the needle exchange programs have shut down,\" Favaro said. More harm reduction programs around the country are beginning to mail syringes and naloxone to people who use opioids, Favaro added. County health departments are ramping up naloxone distribution to protect against overdoses too. But the coronavirus pandemic presents challenges there as well. When someone overdoses on opioids, another person generally administers naloxone to reverse those effects. Because of social distancing, Volkow said, it's possible that some individuals may not have anyone else around to administer the life-saving medication. The drug supply is affected Another reason people are at heightened risk of opioid overdoses has to do with how Covid-19 has affected the nation's illicit drug supply, experts say. Illegal drugs are typically smuggled into the US from other countries, but border restrictions brought on by the pandemic could theoretically decrease drug access in some areas, Volkow said. On the surface, Heller said, that might seem like a good thing. But a limited supply could drive dealers to increase the potency of products to meet demand, mixing powerful, synthetic opioids like fentanyl into drugs and putting those who use them at a greater risk of overdose.  Less access to drugs could also drive users to seek out other, unfamiliar drug sources -- or risk withdrawal. Stress could drive people to relapse Finally, the social isolation brought on by the coronavirus pandemic is leaving people especially vulnerable. Some support groups for people experiencing opioid addiction or for those in recovery are now taking place over Zoom, Volkow said. But the virtual contact often just isn't the same.  \"One of the most powerful interventions is to keep people in treatment is that social network,\" she said. \"Isolation can lead you to seek out some relief, like starting to take drugs.\" It will be a while before we know the true effects that Covid-19 has had on those who struggle with opioid use disorders, Volkow said. But already, there are many reasons to worry.  \n",
            "Text: What every new mom should know about returning to work  (CNN)Many new moms spend their days luxuriating in their newborn's company. Maybe they've got three weeks, or six, even six months or a year of full-time motherhood, in which they can devote themselves completely to their children.  But 72% of mothers work. Over 64% of mothers are co- or primary breadwinners, defined as married or unmarried women who either outearn their partners or bring home at least a quarter of the household's income through their wages. And most of us have absolutely no idea how to mesh our new roles as mothers with our jobs. The secret to work/life balance? I've always thought it was: Pick one.  That's because there are very few models for how to be mothers and workers successfully at the same time. Gen X women are the first raised with the expectation of doing it all, and yet little in our society has changed at the emotional or structural level to support us having careers and families. Ali Velez Alderfer, mom to a three-year-old son, wants to help with that struggle. Her new book, \"The Working Mom's Handbook: A Survival Guide for Returning to Work After Having A Baby,\" is \"the road map I wished I had been given to help me navigate the emotions, politics, and logistics of being a working mom,\" she wrote. The book goes narrow and wide, including the logistics of freezing breast milk and how to handle the avalanche of postpartum emotions.   An associate producer of global programming for CNN and former staff writer at Buzzfeed, Alderfer outlines her own experiences as a working mother; what every newly pregnant mom should be thinking about; and how to work and parent in a world in crisis.  CNN: When you were pregnant, what were you imagining about going back to work?  Ali Velez Alderfer: I didn't have a clear picture of what it would look like. I was in the nesting phase and preparing for baby at home. I knew that my mom would be coming out to help for as long as she could, but I hadn't thought beyond that. I wasn't thinking about day care until it was almost too late, and that caused a lot of anxiety. I really didn't think about that transition enough when I was pregnant. That's part of why I wanted to write this book. CNN: What do you mean by \"too late\"? Alderfer: A few weeks before returning back to work, my husband and I tried to sign up our baby for day care and everything was full. The waitlist for infants was up to 18 months — and 18 months later, he'd no longer be an infant.  People should start thinking about their child care needs as early as possible. It's all part of the process of having a baby. Whenever one of my friends tells me they're expecting, I say, \"Start looking into child care now.\" It's one of the things that nobody told me. It's my No. 1 warning to expectant moms. CNN: This book focuses a lot on decisions and choices, but not all women have the luxury of choice. Alderfer: I know that not everybody has the luxury of full-time child care, whether that's a nanny or a nanny-share or day care. Single moms or moms who work in more demanding jobs or odd hours, of if you work in retail or service — most of those people are working because they need to and they can't afford to miss a shift. But the message is the same for everyone: Try as hard as you can to build a community. Make your village. If you don't have a close family, emotionally or geographically, some people have found a lot of support in moms' groups, online or in person, which are free to join and help you find people in your area in a similar situation — someone who can take your kid for the afternoon while you pick up a swing shift.  There isn't a perfect system. There are no perfect answers. Whatever you can work out that's right for you is right.  CNN: You talk about how the concept of \"having it all\" has affected working moms. It's an ideal that, it turns out, is pretty hard to achieve.  Alderfer: I was the first person in my family to graduate from a four-year college. The expectations were very high of having a career and being successful. But I'm the only daughter, so my parents also wanted to see me get married and start a family. When I graduated from graduate school, one relative said, \"You should be married by now and have at least a kid or two.\" I still feel that pressure. On paper, I do have it all. I have a nice house in the suburbs, a spouse, a child, a great job. But there are a lot of anxious and stressful moments when I feel like I'm not succeeding in any one area, and I'm constantly redefining what having it all means.  The day I turn off my phone and spend the day with my family, I feel like I'm missing something at work. Or, I nailed that thing at work today and had a successful moment and was recognized, but I missed dinner with my kid. Or one day everything is great, and the next day, everything goes to hell, I miss a deadline and my kid has a fever and I don't have any child care because it's a pandemic and my dog threw up on the stairs.  It's important to be honest with yourself about what you can and cannot handle, and to redefine \"having it all\" as needed. A lot of women shift priorities after they become mothers. Some decide they want to spend more time at home with their families and can't handle the stress. Others need a break from home life or they need the income. You have to be self-aware and know your priorities.  There are many valid choices, but you have to make that choice for yourself. No matter what, you're going to need help, some kind of village, whether it's made up of family or friends or employees. And asking for help is a sign of strength. You can't have it all, all by yourself.  CNN: Explain the concept of \"mommy tracking.\" Alderfer: It's this unwritten policy that employers or managers put into effect, sometimes unwittingly and sometimes in the form of literal discrimination. They assume that after a woman becomes a mother, she can't or doesn't want to handle the same responsibilities.  Sometimes it's a totally subconscious thing where people are trying to be sensitive or give a break to a mom returning from leave, but they end up underestimating what she's capable of or wants. When a new mom comes back to work, they're put on this mommy track, where people say, \"Oh, she'll have doctors' appointments and soccer games. She's not going to be able to handle the same workload.\" But that's not their decision to make. Sometimes she's passed over for promotions or advancement. And nobody ever assumes that a man who comes back to work after becoming a father is weaker for it. Often, women come back to work stronger because they've learned to multitask in new ways. We're more powerful because we have all these new skills.  CNN: But there are doctors' appointments. And fatigue. So how do we handle these new realities and also make sure we're not tracked? Alderfer: Transparency is the key from both sides: Sitting down with your manager and saying, \"I'm ready for more.\" Or: \"I need to do less.\" Sometimes my partner goes to the doctor and I go to work; it's not only the mom's responsibility to parent 100% of the time. CNN: You spend some time in this book educating women about their legal rights when it comes to breastfeeding and family leave. What's missing in public policy?  Alderfer: I am a very big supporter of the idea of universal child care. It's insane in this country, the amount of money people pay for child care. If there was an affordable, sliding-scale option for child care from birth to school age, parents could feel supported in their community and go out and work to earn a living, not to just pay for child care. There are also many changes employers could make. Many of them have free food or gyms as perks. Why not on-site child care? If parents were supported in that way, that could be revolutionary. Workplace productivity would be so much greater.  CNN: How did the way you see your book and its mission change when Covid-19 hit? Alderfer: I started writing this book in mid-February, and I'd just gotten this perfect schedule for work, writing and child-rearing. I felt like I was nailing it. And then Covid hit and school closed and I was working from home, no commute to clear my head and no child care. It definitely threw a wrench into the book-writing process, but it made me more motivated to work hard and get it done. I wanted to speak to the enormous challenges parents are facing right now, but I also wanted to evolve that to parenting in any sort of crisis with anything that's unexpected or creating added struggles. That means taking the time to react and grieve for whatever has changed, and to adapt and move past it and work hard to create this new normal. Give yourself a little bit of grace as schedules and rules go by the wayside in survival mode. CNN: You have multiple lists of \"things that are OK.\" What's the inspiration behind this, and why do women need to be reminded that it's OK to hate pumping, be super anxious, cry at work or go out for drinks? Alderfer: There is so much pressure to be a supermom. I wanted to remind women and moms that we're all human, that we all have these moments of weakness and moments of strength. It's OK to feel like you're failing, but it's also OK to be proud of your success. It's OK to want to talk about your kid all the time and wear the same outfit for three days in a row. It's also OK to not want to talk about your kid at work and to not cry about leaving your kid in day care. I want moms and all parents to know that whatever you're feeling or thinking, it's OK. It's OK to be whatever kind of working mom you are.  As long as my kid goes to bed healthy and happy, that's OK parenting. And when he's not, I find ways to support and take care of him. You have to find what works for your family. Lisa Selin Davis is the author of \"Tomboy: The Surprising History and Future of Girls Who Dare to Be Different.\"  \n",
            "Text: 5 science-backed ways to stop Covid-19 pandemic stress right now   (CNN)We are living in a tsunami of stress. Hospitals are flooded with patients as Covid-19 cases surge to unprecedented heights. Over half of all Americans know someone who has been hospitalized with the virus or has died. Small businesses are drowning. Millions are unemployed. Unemployment benefits are trickling away while Congress is in deadlock about what to do. And parents are at their wits' end while trying to teach and work. Could it be worse? Yes, because it's the holidays. In normal times, that alone would be enough to overwhelm our coping skills. But this is 2020 -- and on top of everything else, we have a duty to protect our loved ones despite our need for togetherness. \"I think it could be even more of a challenge than what we saw with Thanksgiving,\" Dr. Anthony Fauci, director of the National Institute of Allergy and Infectious Diseases, told CNN's John Berman Monday.  \"I hope that people realize that and understand that as difficult as this is, nobody wants to modify -- if not essentially shut down -- their holiday season, but we are in a very critical time in this country right now.\" Pressure-cooked brains also don't work well, sending less blood flow to such frontal-lobe executive functions as creativity, compassion and emotional regulation. Those are the cognitive functions we need in order to manage uncertainty, take productive action and remain hopeful. But there are ways to short-circuit feelings of panic and helplessness, even in a pandemic. Here are five expert-vetted ways on how to put an end to stress and take back control. Simply stop and breathe Just stop and breathe -- but deeply.  \"We can stop the physiology of stress dead in its tracks by ramping up our parasympathetic nervous system,\" said stress management expert Dr. Cynthia Ackrill, an editor for \"Contentment\" magazine, produced by the American Institute of Stress. \"If a man's chasing us with a knife, we probably don't want to do that,\" she continued. \"But if we're creating most of the stress between our ears, we can reverse that with slow deep breathing and progressive relaxation -- things that invoke the relaxation response, which is your parasympathetic nervous system pushing you back into balance.\" There are a variety of deep-breathing techniques experts recommend, but \"the best research is behind six in, six out,\" Ackrill said. Take a deep breath to a slow count of six, making sure that you can feel your stomach rise with your hand as it fills with air.  \"When we're stressed, we tend to be breathing at the top of our lungs, and we're not using our full lung capacity,\" Ackrill said.  \"One of the important things is you want to use what is called soft belly breathing. To soften your belly, let the diaphragm descend, push out on your belly a little bit and bring the breath down into that part,\" she said. Release your breath to the same slow count of six. Pause and begin again. Repeat until you feel your body relax.  Learn your triggers The best time to practice deep breathing or other relaxation techniques is before you're in full panic mode. That means learning your body's telltale cues -- the early signs that stress is taking hold. Perhaps your shoulders get tight, your neck tense, your stomach sours or you have the beginnings of a headache. \"You want to back up from the crash to the beginning of swerving into the wrong lane,\" Ackrill explains. \"We're not used to checking in with our bodies so it takes a bit of practice. But learning your subtle signs is a really lovely skill that lets you adjust on the fly.\" Not sure what your stress face looks like? Ask your kids or partner.  \"They can probably tell you the minute you start to slide off the rails,\" Ackrill said. \"Oh, oh, Mom's doing that thing with her eyebrow. Don't ask Mom for that right now.\" Move in slow motion One way to interrupt the stress circuits in the brain is to literally slow down your movements, according to Michelle Anne, a certified professional coach with training in neuroscience and leadership. \"And when I say slowing down I mean, you're talking slow, you're walking slow, you slow your thinking down, too,\" Anne said.  Doing so allows your body to move from the sympathetic system's fight-or-flight to the parasympathetic relaxation mode, Anne said. \"Slowing down is the most profound thing that can heighten your awareness,\" she said.\"Otherwise your brain is in that default mode network, and it's just going to respond automatically with words or actions you're not even thinking about.\"  Stay in the present Another way to interrupt the stress response is to ground yourself in the moment. \"Feel your feet on the floor. Feel your bottom on the chair. Be aware of the heaviness,\" Ackrill said. \"It brings you back to the present. It feels grounding.\" Another technique Ackrill recommends requires focusing on all five senses.  \"Acknowledge five things you see around you, four things that you can touch, three things you can hear, two things you can smell and one thing you can taste,\" Ackrill explained. \"What you're doing is completely coming into the present ... by focusing your brain on a kind of interesting but nonthreatening task.\" Anne recommends pressing your right arm across your chest until it presses against your left shoulder, as if you're doing a stretch. It's especially useful in interpersonal conflicts when you feel yourself losing control. \"If you press your arm against the left shoulder, your brain now cannot fully engage with what the other person is saying. Your brain is more concerned about the sensation in the body,\" Anne said. \"Then the second thing I have people do is just relax their shoulders. The brain always does what you tell it,\" Anne added.  \"It brings you back into the body versus having you completely absorbed in what they're doing or what they're feeling. It's a way of taking back control of yourself.\"  Make a list There's just too much to do -- so much that your brain can't store it all. You can feel the pressure rising as you ping-pong from one task to the other, frightened that something is falling through the cracks. \"My mother calls it hopscotching when the brain jumps from one thing to the next,\" Ackrill said. \"Whatever you call it, it translates into 'I don't have what it takes to manage the stress.' And that's when it's toxic.\" Fight back by making a list of all the items on your to-do list. Separate by work, home, school or whatever makes sense for you -- and keep it by your side to add each new chore. The act of getting those items onto paper and out of your head is freeing, and there is the added pleasure of accomplishment when you cross off each chore from your list. \"I call it the stress dump,\" Ackril said. \"First you get calm, then you get clear of what you were doing -- you're making your list. Then you can start to get curious about how you're going to get it done.\" That might mean asking others for help -- which is not failure, she stressed. \"You get the courage to ask for what you need, or push back on a deadline,\" Ackrill said. \"You give some compassion to the people who are dealing with you, and you give some compassion to yourself for having to do this.\" Still feeling stuck? One way to process your feelings is to write them out until the emotion feels captured on paper and you feel the emotional charge lessen. You can also reach out to a friend or loved one \"you trust to hold you safely\" -- and choose carefully. Ackrill suggested asking yourself: \"Is this person truly helping you cope with the emotional load?\" Practice makes perfect Of course, the best way to make these techniques a part of your stress reduction toolkit is to practice them as often as possible. In other words, make them a habit. \"Many of us were brought up thinking there's just a pill for everything and got us away from practicing some of the skills,\" Ackrill said. \"When you learn the skills, you're ramping up your coping confidence, you're pushing yourself up that curve.\"  \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fdumdfzoOW9t"
      },
      "source": [
        "#### **Tokenize data for GPT2**\n",
        "\n",
        "We will use the `distilgpt2` version of pre trained GPT2 model to tokenize text"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235,
          "referenced_widgets": [
            "f1af76cea7934916a5e418693e03584d",
            "86b336a43b8d4e87af71f046cc14eb3c",
            "2d8aa9425e2d42008806f0908c3fe970",
            "7d0b674e147e40118e8df69452d38200",
            "cec82038fd694ddbbebdc25af2dc3f33",
            "bd7501de07ad4cb1a96b02105e615060",
            "8b497572d9f940608482ece254ae3ae4",
            "5143799410c64f58a50624054fd9ace5",
            "64ca7f9d0a6b4ca68a7226e840dca1da",
            "fd541c61b2464564b6fa75fa51977df1",
            "008a5f65c956452782a433c89da6eab0",
            "9df0bbe0a77a40bf8743114334fcfe62",
            "a2a4ad335dfa460aaa71892e423b598c",
            "0867e73fcd9645a9b507f7f8d02c189a",
            "77db1782c753446e831b18227f5f6463",
            "1b17722ef90c4ac38d9676e35444c7a4",
            "c6892cfbdf444ef3bda2355caa7ee0d6",
            "beb0239a9c8d4881b39600905793e447",
            "f5901e20833b41bfb967ad199295e213",
            "80cff6ea398649a2ac73355d00cfec30",
            "3213b3d4f9fa483794de19ca615b5e8d",
            "dd711b24744f48d586c97ea98551c9bf",
            "a6361857f1334b3bbd80b9f7fe0055ec",
            "5f6ad09d698a404e8f6e7bc45f4f1ecc"
          ]
        },
        "id": "v9BU2RDwOZvg",
        "outputId": "956c676e-8ac9-43cc-e391-fc629506943c"
      },
      "source": [
        "# Load tokenizer\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"distilgpt2\")\n",
        "\n",
        "# Tokenize data\n",
        "training_data_tokenized = []\n",
        "for data in training_data:\n",
        "  tokenized_text = tokenizer.encode(data)\n",
        "  training_data_tokenized.append(tokenized_text)\n",
        "\n",
        "print(len(training_data_tokenized))\n",
        "print(len(training_data_tokenized[0]),training_data_tokenized[0][:20])"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "f1af76cea7934916a5e418693e03584d",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1042301.0, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "64ca7f9d0a6b4ca68a7226e840dca1da",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=456318.0, style=ProgressStyle(descripti…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "c6892cfbdf444ef3bda2355caa7ee0d6",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=1355256.0, style=ProgressStyle(descript…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Token indices sequence length is longer than the specified maximum sequence length for this model (1862 > 1024). Running this sequence through the model will result in indexing errors\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "300\n",
            "549 [47667, 12319, 20409, 3015, 284, 4313, 38477, 7509, 14, 42787, 11251, 3055, 39751, 312, 12, 1129, 12319, 287, 262, 1578]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gs1upcsBO8aZ"
      },
      "source": [
        "#### **Generate Training Data**\n",
        "\n",
        "For the training we need inputs and lables but we only have news article texts. In lecture we learnt that language models are trained in a smei supervised way where we generate inputs and labels from the input text. \n",
        "\n",
        "<br>\n",
        "\n",
        "To generate inputs and lables for training we will chunk the input text into blocks of size `100`. Then our labels will be the same as inputs but one position shifted to the right."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FApsJd9RPEEk",
        "outputId": "f078415a-c3da-451a-e943-1de3e9e62274"
      },
      "source": [
        "# Split into blocks\n",
        "training_chunks = []\n",
        "block_size = 100\n",
        "for tokenized_text in training_data_tokenized:\n",
        "  for i in range(0, len(tokenized_text) - block_size + 1, block_size):  # Truncate in block of block_size\n",
        "      training_chunks.append(tokenized_text[i:i + block_size])\n",
        "\n",
        "# Generate inputs and labels\n",
        "inputs = []\n",
        "labels = []\n",
        "for ex in training_chunks:\n",
        "    inputs.append(ex[:-1])\n",
        "    labels.append(ex[1:])\n",
        "\n",
        "print(\"inputs length:\",len(inputs))\n",
        "print(\"labels length:\",len(labels))"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "inputs length: 3934\n",
            "labels length: 3934\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eLce4hYwcNxB",
        "outputId": "18ff514d-85a9-4153-a3bf-0bed1caff706"
      },
      "source": [
        "print(\"input:\",len(inputs[0]),inputs[0][:20])\n",
        "print(\"labels:\",len(labels[0]),labels[0][:20])"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "input: 99 [47667, 12319, 20409, 3015, 284, 4313, 38477, 7509, 14, 42787, 11251, 3055, 39751, 312, 12, 1129, 12319, 287, 262, 1578]\n",
            "labels: 99 [12319, 20409, 3015, 284, 4313, 38477, 7509, 14, 42787, 11251, 3055, 39751, 312, 12, 1129, 12319, 287, 262, 1578, 1829]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zSWaGRmAb7yu",
        "outputId": "f2ee300b-a276-4763-8176-5665f746bf7e"
      },
      "source": [
        "BATCH_SIZE = 12\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = len(inputs)\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices((inputs, labels))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(BATCH_SIZE, drop_remainder=True)\n",
        "train_data = train_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "print(\"train_data\",train_data)"
      ],
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <PrefetchDataset shapes: ((12, 99), (12, 99)), types: (tf.int32, tf.int32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_8j2gQjsPEQ_"
      },
      "source": [
        "#### **Train/Finetune GPT2 Pretrained Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "10a5f76a6b934d25b012fe9bd0396c1c",
            "372d74f711f8444e9b0d5fff1a3ec6e2",
            "68db071119f943e285db60a1184d12c7",
            "c7868ead3a9e46df894388840354a361",
            "e90b731bbf28443fb46db38ca996c6a7",
            "e90c33a81d204ca1b8e2a26fcc051d91",
            "d65184605999454ab71ff4cd7f073a6d",
            "317be3315254404d9c02dc7e9541f097",
            "2d3cafe8687c49929647514b7b24e6a5",
            "b4f5edd29c6e4ac0b7a58873a03a3637",
            "f380bdb09f0a47158aa5ce3c417015fc",
            "abaa07543c94441bae88588978aeff10",
            "d1c5b16f6fc541e789bd926ba63bd254",
            "a03e863ac41c40cfb85e7bc4fb39b045",
            "f6db2d14bee5486e866ce69a4d01f866",
            "35e06662b55b45bc8007620168e95f3f"
          ]
        },
        "id": "-viOvb6hPR6e",
        "outputId": "dbdc8589-9c24-4a63-f2c2-24bfccf3d27f"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "learning_rate = 3e-5 \n",
        "epsilon=1e-08\n",
        "clipnorm=1.0\n",
        "epochs = 30\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = TFGPT2LMHeadModel.from_pretrained(\"distilgpt2\")\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(learning_rate=learning_rate, epsilon=epsilon, clipnorm=clipnorm)\n",
        "# Loss\n",
        "loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "metric = keras.metrics.SparseCategoricalAccuracy('accuracy')\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=[loss, *[None] * model.config.n_layer],\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=[metric])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data, # train_data.take(1000) for testing\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "10a5f76a6b934d25b012fe9bd0396c1c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=762.0, style=ProgressStyle(description_…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2d3cafe8687c49929647514b7b24e6a5",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "HBox(children=(FloatProgress(value=0.0, description='Downloading', max=327744160.0, style=ProgressStyle(descri…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "All model checkpoint layers were used when initializing TFGPT2LMHeadModel.\n",
            "\n",
            "All the layers of TFGPT2LMHeadModel were initialized from the model checkpoint at distilgpt2.\n",
            "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFGPT2LMHeadModel for predictions without further training.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Model: \"tfgp_t2lm_head_model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "transformer (TFGPT2MainLayer multiple                  81912576  \n",
            "=================================================================\n",
            "Total params: 81,912,576\n",
            "Trainable params: 81,912,576\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Epoch 1/30\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "WARNING:tensorflow:The parameters `output_attentions`, `output_hidden_states` and `use_cache` cannot be updated when calling a model.They have to be set to True/False in the config object (i.e.: `config=XConfig.from_pretrained('name', output_attentions=True)`).\n",
            "WARNING:tensorflow:The parameter `return_dict` cannot be set in graph mode and will always be set to `True`.\n",
            "327/327 [==============================] - 83s 230ms/step - loss: 3.6690 - logits_loss: 3.6690 - logits_accuracy: 0.3241 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0017 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 2/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 3.3414 - logits_loss: 3.3414 - logits_accuracy: 0.3535 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 3/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 3.2365 - logits_loss: 3.2365 - logits_accuracy: 0.3655 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 4/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 3.1465 - logits_loss: 3.1465 - logits_accuracy: 0.3759 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 5/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 3.0583 - logits_loss: 3.0583 - logits_accuracy: 0.3865 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 6/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 3.0031 - logits_loss: 3.0031 - logits_accuracy: 0.3916 - past_key_values_1_accuracy: 0.0014 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0011 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 7/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.9201 - logits_loss: 2.9201 - logits_accuracy: 0.4032 - past_key_values_1_accuracy: 0.0014 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 8/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 2.8667 - logits_loss: 2.8667 - logits_accuracy: 0.4096 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 9/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.7948 - logits_loss: 2.7948 - logits_accuracy: 0.4166 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 10/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.7576 - logits_loss: 2.7576 - logits_accuracy: 0.4223 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0027 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 11/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.6874 - logits_loss: 2.6874 - logits_accuracy: 0.4338 - past_key_values_1_accuracy: 0.0014 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 12/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.6326 - logits_loss: 2.6326 - logits_accuracy: 0.4393 - past_key_values_1_accuracy: 0.0014 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 13/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.5891 - logits_loss: 2.5891 - logits_accuracy: 0.4449 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0013 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 14/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 2.5296 - logits_loss: 2.5296 - logits_accuracy: 0.4534 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0015 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 15/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.4794 - logits_loss: 2.4794 - logits_accuracy: 0.4599 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 16/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.4254 - logits_loss: 2.4254 - logits_accuracy: 0.4677 - past_key_values_1_accuracy: 0.0016 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 17/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.3761 - logits_loss: 2.3761 - logits_accuracy: 0.4739 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0015 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 18/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 2.3344 - logits_loss: 2.3344 - logits_accuracy: 0.4814 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 19/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 2.2873 - logits_loss: 2.2873 - logits_accuracy: 0.4891 - past_key_values_1_accuracy: 0.0016 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0013 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 20/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.2385 - logits_loss: 2.2385 - logits_accuracy: 0.4966 - past_key_values_1_accuracy: 0.0014 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0027 - past_key_values_4_accuracy: 0.0013 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 21/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.1889 - logits_loss: 2.1889 - logits_accuracy: 0.5039 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0027 - past_key_values_4_accuracy: 0.0013 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 22/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.1437 - logits_loss: 2.1437 - logits_accuracy: 0.5102 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0013 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 23/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.0954 - logits_loss: 2.0954 - logits_accuracy: 0.5179 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 24/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.0475 - logits_loss: 2.0475 - logits_accuracy: 0.5257 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0027 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 25/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 2.0194 - logits_loss: 2.0194 - logits_accuracy: 0.5295 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0025 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 26/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 1.9734 - logits_loss: 1.9734 - logits_accuracy: 0.5371 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0015 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0013 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 27/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 1.9290 - logits_loss: 1.9290 - logits_accuracy: 0.5453 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0013 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 28/30\n",
            "327/327 [==============================] - 75s 229ms/step - loss: 1.8870 - logits_loss: 1.8870 - logits_accuracy: 0.5523 - past_key_values_1_accuracy: 0.0016 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0012\n",
            "Epoch 29/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 1.8559 - logits_loss: 1.8559 - logits_accuracy: 0.5582 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0014 - past_key_values_3_accuracy: 0.0026 - past_key_values_4_accuracy: 0.0013 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Epoch 30/30\n",
            "327/327 [==============================] - 75s 230ms/step - loss: 1.8054 - logits_loss: 1.8054 - logits_accuracy: 0.5675 - past_key_values_1_accuracy: 0.0015 - past_key_values_2_accuracy: 0.0015 - past_key_values_3_accuracy: 0.0027 - past_key_values_4_accuracy: 0.0014 - past_key_values_5_accuracy: 0.0012 - past_key_values_6_accuracy: 0.0013\n",
            "Training execution time (mins) 37.67215454181035\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wfgtfb5SPc9h"
      },
      "source": [
        "#### **Generate Text**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "id": "-fcKZUlenHCE",
        "outputId": "a89e31ca-9982-4707-d9fc-0a7ed41431bc"
      },
      "source": [
        "# Input text\n",
        "input_text = \"how is covid affecting\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "print(\"input_ids\",input_ids)\n",
        "\n",
        "# Generate outout\n",
        "outputs = model.generate(\n",
        "    input_ids, \n",
        "    do_sample=True, \n",
        "    max_length=75, \n",
        "    top_p=0.80, \n",
        "    top_k=0\n",
        ")\n",
        "\n",
        "print(\"Generated text:\")\n",
        "display(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Setting `pad_token_id` to 50256 (first `eos_token_id`) to generate sequence\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "input_ids tf.Tensor([[ 4919   318 39849   312 13891]], shape=(1, 5), dtype=int32)\n",
            "Generated text:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'how is covid affecting the whole country?  Dr. Ashish Jha, assistant professor of preventive medicine at Harvard Medical School, answered that there is no question about that. \"The idea that it\\'s like some kind of blanket immunity is something that we don\\'t really understand. The idea that it affects the whole country is completely ridiculous. I think we need to look'"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 103
        },
        "id": "01iqgzuwoq3X",
        "outputId": "cb192283-ac9b-40f9-947c-c17a883caef3"
      },
      "source": [
        "# Input text\n",
        "input_text = \"the global pandemic\"\n",
        "\n",
        "# Tokenize Input\n",
        "input_ids = tokenizer.encode(input_text, return_tensors='tf')\n",
        "\n",
        "# Generate outout\n",
        "outputs = model.generate(\n",
        "    input_ids, \n",
        "    do_sample=True, \n",
        "    max_length=75, \n",
        "    top_p=0.80, \n",
        "    top_k=0\n",
        ")\n",
        "\n",
        "print(\"Generated text:\")\n",
        "display(tokenizer.decode(outputs[0], skip_special_tokens=True))"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Setting `pad_token_id` to 50256 (first `eos_token_id`) to generate sequence\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Generated text:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'the global pandemic, and how that impacts women\\'s health and lives,\" she said.  The views expressed in this commentary are solely those of the writers. CNN is showcasing the work of The Conversation, a collaboration between journalists and academics to provide news analysis and commentary. The content is produced solely by The Conversation.  (CNN)It\\'s the fall surge that has thrown'"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zfiz6D-IParW"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cu-G2t6GYrwF"
      },
      "source": [
        "## **Word2Vec Embeddings** <div id='word2vec'>\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6zIvohFUYtdG"
      },
      "source": [
        "#### **Overview** <div id='word2vec_overview'>\n",
        "\n",
        "If you recall from [Lecture 23: Language Representations](https://edstem.org/us/courses/3773/lessons/11929/slides/57591) Word2Vec was a breakthough for language representations:\n",
        "<br>\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/word2vec_lecture.png\" width=\"600px\"/>\n",
        "\n",
        "There are two approaches to train a Word2Vec model:\n",
        "* Continuous bag-of-words (CBOW)\n",
        "* SkipGram (w/ Negative Sampling)\n",
        "\n",
        "We will implement the SkipGram (w/ Negative Sampling) in this section. \n",
        "\n",
        "<br>\n",
        "\n",
        "But before we start why do we need embeddings? These are some of the take aways from lecture and advanced section:\n",
        "* One hot encoding text will bee too large (vocab size * vocab size)\n",
        "* There is no relationship between workd tokens (no similarity between vectors)\n",
        "* So what we need is a way for the word representation to have a semantic meaning and words that are semantically similar can be representted closer together in some dimension"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDLiUCnyPnS2"
      },
      "source": [
        "#### **Preprocess Data** <div id='word2vec_data'>\n",
        "\n",
        "We will use the same data from the previsous section"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6kb_KckxP7rH",
        "outputId": "0781d49e-bc5d-4fa6-d1ea-8fc11ed76b74"
      },
      "source": [
        "# We will use the same data from the previous section\n",
        "\n",
        "# Get Word tokenizer & stop words from NLTK\n",
        "stop_words = set(stopwords.words('english')) \n",
        "tokenizer = RegexpTokenizer(r'\\w+')\n",
        "\n",
        "all_words = []\n",
        "for data in training_data:\n",
        "  # Word Tokenize text\n",
        "  words = tokenizer.tokenize(data)\n",
        "  # Remove stop words\n",
        "  words = [w.lower() for w in words if w.lower() not in stop_words]\n",
        "  all_words.extend(words)\n",
        "\n",
        "# Vocab size\n",
        "vocab_size = len(set(all_words))+1\n",
        "print(\"vocab_size:\",vocab_size)\n",
        "\n",
        "print(\"all_words:\",len(all_words))\n",
        "print(all_words[:20])"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "vocab_size: 14348\n",
            "all_words: 185648\n",
            "['cdc', 'vaccine', 'advisers', 'vote', 'recommend', 'pfizer', 'biontech', 'covid', '19', 'vaccine', 'united', 'states', 'cnn', 'us', 'centers', 'disease', 'control', 'prevention', 'advisory', 'committee']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2XvCFKjAwkXa",
        "outputId": "2888328e-154d-40a4-f488-13e6ee24c8f7"
      },
      "source": [
        "def build_dataset(words, vocab_size):\n",
        "    \"\"\"Process raw inputs into tokens\"\"\"\n",
        "\n",
        "    count = [['UNK', -1]]\n",
        "    count.extend(collections.Counter(words).most_common(vocab_size - 1))\n",
        "    dictionary = dict()\n",
        "    for word, _ in count:\n",
        "        dictionary[word] = len(dictionary)\n",
        "    data = list()\n",
        "    unk_count = 0\n",
        "    for word in words:\n",
        "        if word in dictionary:\n",
        "            index = dictionary[word]\n",
        "        else:\n",
        "            index = 0  # dictionary['UNK']\n",
        "            unk_count += 1\n",
        "        data.append(index)\n",
        "    count[0][1] = unk_count\n",
        "    reversed_dictionary = dict(zip(dictionary.values(), dictionary.keys()))\n",
        "    return data, count, dictionary, reversed_dictionary\n",
        "\n",
        "# Tokenize input\n",
        "all_words_tokens, counts, dictionary, reverse_dictionary = build_dataset(all_words, vocab_size)\n",
        "\n",
        "print(\"all_words_tokens len:\",len(all_words_tokens))\n",
        "print(all_words_tokens[:5])"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "all_words_tokens len: 185648\n",
            "[29, 6, 1434, 1212, 790]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pkq76aM4x2tN",
        "outputId": "37723b95-1c51-4fb1-9d2e-31b585d5a140"
      },
      "source": [
        "counts[:20]"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['UNK', 0],\n",
              " ('said', 3214),\n",
              " ('people', 1746),\n",
              " ('covid', 1628),\n",
              " ('19', 1445),\n",
              " ('health', 1389),\n",
              " ('vaccine', 1193),\n",
              " ('coronavirus', 1126),\n",
              " ('cnn', 949),\n",
              " ('us', 930),\n",
              " ('new', 886),\n",
              " ('get', 813),\n",
              " ('cases', 813),\n",
              " ('one', 749),\n",
              " ('patients', 748),\n",
              " ('dr', 692),\n",
              " ('virus', 679),\n",
              " ('pandemic', 669),\n",
              " ('states', 659),\n",
              " ('also', 655)]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C1WYSksuP710"
      },
      "source": [
        "#### **Generate Training Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ynZdCrIeS2Om",
        "outputId": "90f2b8d5-e3f0-44f4-865c-d8fec9ca7386"
      },
      "source": [
        "# Parameters for our skipgram with negative sampling \n",
        "window_size = 4\n",
        "\n",
        "# We use the `skipgrams` function from tensorflow.keras\n",
        "# to build the training dataset\n",
        "couples, labels = keras.preprocessing.sequence.skipgrams(all_words_tokens, vocab_size, window_size=window_size)\n",
        "\n",
        "# Split the couples to target and context\n",
        "targets = []\n",
        "contexts = []\n",
        "for target_word, context_word in couples:\n",
        "    targets.append(target_word)\n",
        "    contexts.append(context_word)\n",
        "\n",
        "print(\"couples\",couples[:5])\n",
        "print(\"labels\",labels[:5])\n",
        "print(\"targets\",targets[:5])\n",
        "print(\"contexts\",contexts[:5])"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "couples [[5248, 10680], [1904, 7], [24, 150], [4224, 10], [91, 128]]\n",
            "labels [1, 1, 0, 1, 1]\n",
            "targets [5248, 1904, 24, 4224, 91]\n",
            "contexts [10680, 7, 150, 10, 128]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PQjuehLFKdcm",
        "outputId": "e5b36453-6814-4e99-f7a1-7e64e5f2afee"
      },
      "source": [
        "BATCH_SIZE = 1024\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = 10000\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices(((targets, contexts), labels))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(BATCH_SIZE)\n",
        "train_data = train_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "print(\"train_data\",train_data)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <PrefetchDataset shapes: (((None,), (None,)), (None,)), types: ((tf.int32, tf.int32), tf.int32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KJAra88AS2Zl"
      },
      "source": [
        "#### **Build Word2Vec Model** <div id='word2vec_model'>\n",
        "\n",
        "We will utilize the model architecture from [Advanced Section 3 - Word Embedding](https://edstem.org/us/courses/3773/lessons/11576/slides/55277)\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/gpt2/skip_gram_lm.png\" width=\"800px\"/>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mKy5F_S-TEo9"
      },
      "source": [
        "def build_word2vec_model(vocab_size, vector_dim):\n",
        "    \n",
        "    # Build the target word embedding\n",
        "    word_model = Sequential() \n",
        "    word_model.add(keras.layers.Embedding(vocab_size, vector_dim,input_length=1,name='embedding')) \n",
        "    word_model.add(keras.layers.Reshape((vector_dim, ))) \n",
        "\n",
        "    # Build the context word embedding\n",
        "    context_model = Sequential() \n",
        "    context_model.add(keras.layers.Embedding(vocab_size, vector_dim, input_length=1,name='context')) \n",
        "    context_model.add(keras.layers.Reshape((vector_dim,))) \n",
        "\n",
        "    # Take the dot product of the the target and context word\n",
        "    dot_product = keras.layers.dot([word_model.output, context_model.output], axes=1,\n",
        "                                   normalize=False,name='dotproduct') \n",
        "    dot_product = keras.layers.Dense(1,activation=\"sigmoid\")(dot_product) \n",
        "\n",
        "    # Complete word2vec model\n",
        "    model = Model(inputs=[word_model.input, context_model.input],outputs=dot_product)\n",
        "    \n",
        "    return model"
      ],
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LzRbCxp7TE18"
      },
      "source": [
        "#### **Train Word2Vec Model** <div id='word2vec_train'>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xgpy-v3mTHdn",
        "outputId": "b85bba04-1c38-4019-828a-aa4c7f34cc4b"
      },
      "source": [
        "learning_rate = 0.01 \n",
        "epochs = 10\n",
        "vector_dim = 128\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = build_word2vec_model(vocab_size, vector_dim)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(learning_rate=learning_rate)\n",
        "# Loss\n",
        "loss = keras.losses.binary_crossentropy\n",
        "\n",
        "# Compile\n",
        "model.compile(loss=loss,\n",
        "                  optimizer=optimizer,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data,\n",
        "        epochs=epochs, \n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "embedding_input (InputLayer)    [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "context_input (InputLayer)      [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "embedding (Embedding)           (None, 1, 128)       1836544     embedding_input[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "context (Embedding)             (None, 1, 128)       1836544     context_input[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "reshape (Reshape)               (None, 128)          0           embedding[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "reshape_1 (Reshape)             (None, 128)          0           context[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dotproduct (Dot)                (None, 1)            0           reshape[0][0]                    \n",
            "                                                                 reshape_1[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "dense (Dense)                   (None, 1)            2           dotproduct[0][0]                 \n",
            "==================================================================================================\n",
            "Total params: 3,673,090\n",
            "Trainable params: 3,673,090\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "2901/2901 [==============================] - 104s 35ms/step - loss: 0.4556 - accuracy: 0.7845\n",
            "Epoch 2/10\n",
            "2901/2901 [==============================] - 103s 36ms/step - loss: 0.3010 - accuracy: 0.8734\n",
            "Epoch 3/10\n",
            "2901/2901 [==============================] - 103s 35ms/step - loss: 0.1928 - accuracy: 0.9245\n",
            "Epoch 4/10\n",
            "2901/2901 [==============================] - 103s 36ms/step - loss: 0.1507 - accuracy: 0.9456\n",
            "Epoch 5/10\n",
            "2901/2901 [==============================] - 103s 36ms/step - loss: 0.1325 - accuracy: 0.9543\n",
            "Epoch 6/10\n",
            "2901/2901 [==============================] - 103s 35ms/step - loss: 0.1222 - accuracy: 0.9582\n",
            "Epoch 7/10\n",
            "2901/2901 [==============================] - 103s 36ms/step - loss: 0.1151 - accuracy: 0.9601\n",
            "Epoch 8/10\n",
            "2901/2901 [==============================] - 104s 36ms/step - loss: 0.1096 - accuracy: 0.9613\n",
            "Epoch 9/10\n",
            "2901/2901 [==============================] - 102s 35ms/step - loss: 0.1054 - accuracy: 0.9619\n",
            "Epoch 10/10\n",
            "2901/2901 [==============================] - 100s 35ms/step - loss: 0.1019 - accuracy: 0.9624\n",
            "Training execution time (mins) 17.133810528119405\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AICNl9FVTO-o"
      },
      "source": [
        "#### **Analyze Word2Vec Embeddings** <div id='word2vec_analyze'>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9cjVz4gWTSFW"
      },
      "source": [
        "# Some util functions to analze embeddings\n",
        "\n",
        "def find_similar_words(sample_words, num_similar, weights, dictionary, reverse_dictionary):\n",
        "    embedding_clusters = []\n",
        "    word_clusters = []\n",
        "    for word in sample_words:\n",
        "        similarities = cosine_similarity(weights, weights[dictionary[word]].reshape(1, -1))\n",
        "        similar_words = [reverse_dictionary[x[0]] for x in np.argsort(similarities,axis=0)[-num_similar:]]\n",
        "        similar_embeds = weights[np.argsort(similarities,axis=0)[-num_similar:].flatten()]\n",
        "        embedding_clusters.append(similar_embeds)\n",
        "        word_clusters.append(similar_words)\n",
        "\n",
        "    return embedding_clusters, word_clusters\n",
        "\n",
        "\n",
        "def tsne_plot_clusters(labels, embedding_clusters, word_clusters):\n",
        "    \"Creates and TSNE model and plots it\"\n",
        "    \n",
        "    embedding_clusters = np.array(embedding_clusters)\n",
        "    n, m, k = embedding_clusters.shape\n",
        "    tsne_model_en_2d = manifold.TSNE(perplexity=25, n_components=2, init='pca', n_iter=3500, random_state=32)\n",
        "    embeddings_en_2d = np.array(tsne_model_en_2d.fit_transform(embedding_clusters.reshape(n * m, k))).reshape(n, m, 2)\n",
        "\n",
        "    plt.figure(figsize=(20, 10))\n",
        "    colors = cm.rainbow(np.linspace(0, 1, len(labels)))\n",
        "    for label, embeddings, words, color in zip(labels, embeddings_en_2d, word_clusters, colors):\n",
        "        x = embeddings[:, 0]\n",
        "        y = embeddings[:, 1]\n",
        "        plt.scatter(x, y, color=color, alpha=0.7, label=label)\n",
        "        for i, word in enumerate(words):\n",
        "            plt.annotate(word, alpha=0.5, xy=(x[i], y[i]), xytext=(5, 2),\n",
        "                        textcoords='offset points', ha='right', va='bottom', size=10)\n",
        "    plt.legend(loc=4)\n",
        "    plt.title('Clusters of similar words')\n",
        "    plt.xlabel('TSNE Component1')\n",
        "    plt.ylabel('TSNE Component2')\n",
        "    plt.grid(True)\n",
        "    plt.show()"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vn0rOAPzq-hD",
        "outputId": "ffed7580-4307-4bb5-9ca9-4236f4403081"
      },
      "source": [
        "# Get the embeddings\n",
        "word2vec_embedding = model.get_layer('embedding').embeddings\n",
        "print(word2vec_embedding.shape)\n",
        "print(word2vec_embedding)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(14348, 128)\n",
            "<tf.Variable 'embedding/embeddings:0' shape=(14348, 128) dtype=float32, numpy=\n",
            "array([[-5.2486286e-03,  2.2191405e-03, -1.7072082e-02, ...,\n",
            "        -5.3563230e-03,  2.3785267e-02,  4.8862945e-02],\n",
            "       [ 9.1568090e-02,  2.1894306e-01,  1.3825548e-01, ...,\n",
            "        -5.2436048e-01,  3.5581893e-01, -8.5585952e-01],\n",
            "       [-1.1776851e+00, -1.0535727e+00, -4.9887386e-01, ...,\n",
            "         1.0510033e+00, -4.9818400e-01,  1.0666715e+00],\n",
            "       ...,\n",
            "       [ 1.3994739e+00, -1.2325442e+00,  1.4402565e+00, ...,\n",
            "        -6.8370402e-01,  1.2661200e+00,  5.7009107e-01],\n",
            "       [ 2.3712916e+00,  8.4068382e-01, -3.7640205e-01, ...,\n",
            "         2.6790719e+00,  1.2970321e-01,  6.0200638e-01],\n",
            "       [ 5.4622149e-01, -1.3603698e+00,  4.3773198e-01, ...,\n",
            "        -1.6251355e+00,  1.7934453e+00,  2.4059547e-01]], dtype=float32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tLAzVp3lrQRX",
        "outputId": "13523390-a448-476c-a50d-ba759a44203d"
      },
      "source": [
        "# Get the embeddign layer weigths\n",
        "embedding_layer_weights = word2vec_embedding.numpy()\n",
        "\n",
        "word_list = ['pfizer','mask','flu','vaccine','smell']\n",
        "\n",
        "for word in word_list:\n",
        "    similar_embeddings, similar_labels = find_similar_words([word],5, \n",
        "                                                            embedding_layer_weights, dictionary, reverse_dictionary)\n",
        "\n",
        "    print(\"Words similar to:\",word,\"\\n\",similar_labels)"
      ],
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Words similar to: pfizer \n",
            " [['379', 'bureaucrats', 'moderna', 'biontech', 'pfizer']]\n",
            "Words similar to: mask \n",
            " [['disposable', 'layering', 'wearing', 'cinch', 'mask']]\n",
            "Words similar to: flu \n",
            " [['season', 'downright', 'zika', '155', 'flu']]\n",
            "Words similar to: vaccine \n",
            " [['hypersensitivity', 'pinning', 'novovax', 'unprofessional', 'vaccine']]\n",
            "Words similar to: smell \n",
            " [['aerosolization', 'kaya', 'pasta', 'taste', 'smell']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "Dtm7pUAttnag",
        "outputId": "fbec1cb8-4f37-4705-99ef-e6e156705cd1"
      },
      "source": [
        "word_list = ['pfizer','mask','flu','vaccine','smell']\n",
        "embedding_clusters, word_clusters = find_similar_words(word_list, 25, \n",
        "                                                       embedding_layer_weights, dictionary, reverse_dictionary)\n",
        "\n",
        "tsne_plot_clusters(word_list, embedding_clusters, word_clusters)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s-WCool_WODe"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ub_F5BfBT7Bm"
      },
      "source": [
        "## **References** <div id='references'>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CN1MP1kuV6lC"
      },
      "source": [
        "### **Research Papers**\n",
        "* [GPT (2018)](https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf)\n",
        "* [GPT-2 (2019)](https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf)\n",
        "* [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/pdf/1810.04805.pdf)\n",
        "* [Efficient Estimation of Word Representations in Vector Space](https://arxiv.org/pdf/1301.3781.pdf)\n",
        "* [GloVe: Global Vectors for Word Representation](https://nlp.stanford.edu/pubs/glove.pdf)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iNRpaZKOU0mB"
      },
      "source": [
        "### **Code**\n",
        "\n",
        "* [IACS ComputeFest 2021](https://github.com/Harvard-IACS/2021-ComputeFest/tree/main/Day2)\n",
        "* [Transformer models](https://huggingface.co/transformers/model_summary.html)\n",
        "* [Transformers source code](https://github.com/huggingface/transformers/tree/master/src/transformers)\n",
        "* [Text classification from scratch](https://keras.io/examples/nlp/text_classification_from_scratch/)\n",
        "* [Using pre-trained word embeddings](https://keras.io/examples/nlp/pretrained_word_embeddings/)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ZeDtKBOVull"
      },
      "source": [
        "### **Articles**\n",
        "\n",
        "* [The Illustrated GPT-2](http://jalammar.github.io/illustrated-gpt2/)\n",
        "* [Open AI: GPT-2](https://openai.com/blog/better-language-models/)\n",
        "* [BERT Explained: State of the art language model for NLP](https://towardsdatascience.com/bert-explained-state-of-the-art-language-model-for-nlp-f8b21a9b6270)\n"
      ]
    }
  ]
}