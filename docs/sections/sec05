{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "cs109b_sec5.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "dvo124IepUXA",
        "P-fg7Co6pjKt"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZMmMOVPOQx3B"
      },
      "source": [
        "# <img style=\"float: left; padding-right: 10px; width: 45px\" src=\"https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/iacs.png\"> Data Science 2: Advanced Topics in Data Science \n",
        "## Section 5: Natural Language Processing\n",
        "\n",
        "\n",
        "**Harvard University**<br/>\n",
        "**Spring 2021**<br/>\n",
        "**Instructors**: Mark Glickman, Pavlos Protopapas, and Chris Tanner <br/>\n",
        "**Authors**: Shivas Jayaram \n",
        "\n",
        "\n",
        "<hr style=\"height:2pt\">"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "1ID5PMGCQ4fL",
        "outputId": "c543aae3-37f5-4e62-8f2a-69b0a9e07c10"
      },
      "source": [
        "## RUN THIS CELL TO PROPERLY HIGHLIGHT THE EXERCISES\n",
        "import requests\n",
        "from IPython.core.display import HTML\n",
        "styles = requests.get(\"https://raw.githubusercontent.com/Harvard-IACS/2019-CS109B/master/content/styles/cs109.css\").text\n",
        "HTML(styles)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<style>\n",
              "blockquote { background: #AEDE94; }\n",
              "h1 { \n",
              "    padding-top: 25px;\n",
              "    padding-bottom: 25px;\n",
              "    text-align: left; \n",
              "    padding-left: 10px;\n",
              "    background-color: #DDDDDD; \n",
              "    color: black;\n",
              "}\n",
              "h2 { \n",
              "    padding-top: 10px;\n",
              "    padding-bottom: 10px;\n",
              "    text-align: left; \n",
              "    padding-left: 5px;\n",
              "    background-color: #EEEEEE; \n",
              "    color: black;\n",
              "}\n",
              "\n",
              "div.exercise {\n",
              "\tbackground-color: #ffcccc;\n",
              "\tborder-color: #E9967A; \t\n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "}\n",
              "div.discussion {\n",
              "\tbackground-color: #ccffcc;\n",
              "\tborder-color: #88E97A;\n",
              "\tborder-left: 5px solid #0A8000; \n",
              "\tpadding: 0.5em;\n",
              "}\n",
              "div.theme {\n",
              "\tbackground-color: #DDDDDD;\n",
              "\tborder-color: #E9967A; \t\n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "\tfont-size: 18pt;\n",
              "}\n",
              "div.gc { \n",
              "\tbackground-color: #AEDE94;\n",
              "\tborder-color: #E9967A; \t \n",
              "\tborder-left: 5px solid #800080; \n",
              "\tpadding: 0.5em;\n",
              "\tfont-size: 12pt;\n",
              "}\n",
              "p.q1 { \n",
              "    padding-top: 5px;\n",
              "    padding-bottom: 5px;\n",
              "    text-align: left; \n",
              "    padding-left: 5px;\n",
              "    background-color: #EEEEEE; \n",
              "    color: black;\n",
              "}\n",
              "header {\n",
              "   padding-top: 35px;\n",
              "    padding-bottom: 35px;\n",
              "    text-align: left; \n",
              "    padding-left: 10px;\n",
              "    background-color: #DDDDDD; \n",
              "    color: black;\n",
              "}\n",
              "</style>\n",
              "\n"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dR4B93_FQ0aG"
      },
      "source": [
        "## Learning Objectives\n",
        "\n",
        "By the end of this section, you should be able to:\n",
        "* Perform machine translation task to understand the following model architectures:\n",
        "  * Sequence2Sequence model\n",
        "  * Sequence2Sequence with Attention model\n",
        "  * Transformer\n",
        "* Familiarize with key concepts in `Tensorflow` such as:\n",
        "  * Building custom `Layers`\n",
        "  * Custom training loops using `GradientTape`\n",
        "  * Custom `loss` functions\n",
        "  * Adding learning rate schedulers in your `optimizer`\n",
        "  * View model predictions during training using custom `callbacks`\n",
        "* Build a Masked Language model using Mini BERT\n",
        "  * Familiarize with BERT(Bidirectional Encoder Representations from Transformers) architecture\n",
        "  * Undertand the postional encoding in transfomer based models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-BwWBmoGOWod"
      },
      "source": [
        "<a id=\"contents\"></a>\n",
        "\n",
        "## Notebook Contents\n",
        "- [**Neural Machine Translation**](#nmt)\n",
        "    - [Overview](#nmt) \n",
        "    - [Sequence 2 Sequence](#nmt)\n",
        "    - [Sequence 2 Sequence with Attention](#nmt)\n",
        "    - [Transfomer](#nmt)\n",
        "- [**Mini BERT Language Model**](#bert)\n",
        "    - [Overview](#bert) \n",
        "    - [Data Generation for Language Model](#bert)\n",
        "    - [Build Mini BERT](#bert)\n",
        "    - [Break Out Room 🎊🎉](#breakout)\n",
        "    - [Training with / without Postional Encoding](#bert)\n",
        "- [**References**](#references)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OCeFFZ5SOW_d"
      },
      "source": [
        "## **Setup Notebook**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xy8nqgf6OXXq"
      },
      "source": [
        "**Imports**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QJYd7A-kQovK"
      },
      "source": [
        "import os\n",
        "import requests\n",
        "import zipfile\n",
        "import tarfile\n",
        "import shutil\n",
        "import math\n",
        "import json\n",
        "import time\n",
        "import sys\n",
        "import string\n",
        "import re\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from glob import glob\n",
        "import collections\n",
        "import unicodedata\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.cm as cm\n",
        "%matplotlib inline\n",
        "\n",
        "# NLTK\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize, sent_tokenize\n",
        "from nltk.translate.bleu_score import corpus_bleu, SmoothingFunction\n",
        "\n",
        "# Tensorflow\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Model, Sequential\n",
        "from tensorflow.keras.layers.experimental.preprocessing import TextVectorization\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.python.keras import backend as K\n",
        "from tensorflow.python.keras.utils.layer_utils import count_params\n",
        "\n",
        "# sklearn\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uBYEAY5lQj6z",
        "outputId": "1b632898-c8f1-4be1-f734-a3b508fd99fe"
      },
      "source": [
        "# download nltk's punkt sentence tokenizer\n",
        "nltk.download('punkt')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3-vCYdIpOkkt"
      },
      "source": [
        "**Verify Setup**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v-wfBzhYOk32",
        "outputId": "7f72b342-a442-469c-f259-73f3b9d01b06"
      },
      "source": [
        "# Enable/Disable Eager Execution\n",
        "# Reference: https://www.tensorflow.org/guide/eager\n",
        "# TensorFlow's eager execution is an imperative programming environment that evaluates operations immediately, \n",
        "# without building graphs\n",
        "\n",
        "#tf.compat.v1.disable_eager_execution()\n",
        "#tf.compat.v1.enable_eager_execution()\n",
        "\n",
        "print(\"tensorflow version\", tf.__version__)\n",
        "print(\"keras version\", tf.keras.__version__)\n",
        "print(\"Eager Execution Enabled:\", tf.executing_eagerly())\n",
        "\n",
        "# Get the number of replicas \n",
        "strategy = tf.distribute.MirroredStrategy()\n",
        "print(\"Number of replicas:\", strategy.num_replicas_in_sync)\n",
        "\n",
        "devices = tf.config.experimental.get_visible_devices()\n",
        "print(\"Devices:\", devices)\n",
        "print(tf.config.experimental.list_logical_devices('GPU'))\n",
        "\n",
        "print(\"GPU Available: \", tf.config.list_physical_devices('GPU'))\n",
        "print(\"All Physical Devices\", tf.config.list_physical_devices())\n",
        "\n",
        "# Better performance with the tf.data API\n",
        "# Reference: https://www.tensorflow.org/guide/data_performance\n",
        "AUTOTUNE = tf.data.experimental.AUTOTUNE"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensorflow version 2.4.1\n",
            "keras version 2.4.0\n",
            "Eager Execution Enabled: True\n",
            "WARNING:tensorflow:There are non-GPU devices in `tf.distribute.Strategy`, not using nccl allreduce.\n",
            "INFO:tensorflow:Using MirroredStrategy with devices ('/job:localhost/replica:0/task:0/device:CPU:0',)\n",
            "Number of replicas: 1\n",
            "Devices: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]\n",
            "[]\n",
            "GPU Available:  []\n",
            "All Physical Devices [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU')]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jkyvXbOfOm0b"
      },
      "source": [
        "**Utils**\n",
        "\n",
        "Here we define some helper functions that would be used in loading data, saving models and evaluating models."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BIfFh3IjOpmU"
      },
      "source": [
        "def download_file(packet_url, base_path=\"\", extract=False, headers=None):\n",
        "  if base_path != \"\":\n",
        "    if not os.path.exists(base_path):\n",
        "      os.mkdir(base_path)\n",
        "  packet_file = os.path.basename(packet_url)\n",
        "  with requests.get(packet_url, stream=True, headers=headers) as r:\n",
        "      r.raise_for_status()\n",
        "      with open(os.path.join(base_path,packet_file), 'wb') as f:\n",
        "          for chunk in r.iter_content(chunk_size=8192):\n",
        "              f.write(chunk)\n",
        "  \n",
        "  if extract:\n",
        "    if packet_file.endswith(\".zip\"):\n",
        "      with zipfile.ZipFile(os.path.join(base_path,packet_file)) as zfile:\n",
        "        zfile.extractall(base_path)\n",
        "    else:\n",
        "      packet_name = packet_file.split('.')[0]\n",
        "      with tarfile.open(os.path.join(base_path,packet_file)) as tfile:\n",
        "        tfile.extractall(base_path)\n",
        "\n",
        "class JsonEncoder(json.JSONEncoder):\n",
        "  def default(self, obj):\n",
        "    if isinstance(obj, np.integer):\n",
        "        return int(obj)\n",
        "    elif isinstance(obj, np.floating):\n",
        "        return float(obj)\n",
        "    elif isinstance(obj, decimal.Decimal):\n",
        "        return float(obj)\n",
        "    elif isinstance(obj, np.ndarray):\n",
        "        return obj.tolist()\n",
        "    else:\n",
        "        return super(JsonEncoder, self).default(obj)\n",
        "\n",
        "def compute_blue_scores(model, inputs, outputs, translate_fn):\n",
        "  actual = []\n",
        "  predicted = []\n",
        "  for idx,test_text in enumerate(inputs):\n",
        "    actual_op = outputs[idx]\n",
        "    \n",
        "    source_text, output_text = translate_fn(model,test_source_text=test_text)\n",
        "    actual.append([actual_op.split()])\n",
        "    predicted.append(output_text.split())\n",
        "    \n",
        "  smooth = SmoothingFunction().method4\n",
        "  blue_scores = {\n",
        "      \"BLEU-1\": corpus_bleu(actual, predicted,smoothing_function=smooth, weights=(1.0, 0, 0, 0)),\n",
        "      \"BLEU-2\": corpus_bleu(actual, predicted,smoothing_function=smooth, weights=(0.5, 0.5, 0, 0)),\n",
        "      \"BLEU-3\": corpus_bleu(actual, predicted,smoothing_function=smooth, weights=(0.3, 0.3, 0.3, 0)),\n",
        "      \"BLEU-4\": corpus_bleu(actual, predicted,smoothing_function=smooth, weights=(0.25, 0.25, 0.25, 0.25))\n",
        "  }\n",
        "\n",
        "  return blue_scores\n",
        "\n",
        "def evaluate_save_model(model,test_in, test_out, translate_fn, training_results,execution_time, learning_rate, epochs):\n",
        "    \n",
        "  # Get the model train history\n",
        "  model_train_history = training_results.history\n",
        "  # Get the number of epochs the training was run for\n",
        "  num_epochs = len(model_train_history[\"loss\"])\n",
        "\n",
        "  # Plot training results\n",
        "  fig = plt.figure(figsize=(20,5))\n",
        "  axs = fig.add_subplot(1,3,1)\n",
        "  axs.set_title('Loss')\n",
        "  # Plot all metrics\n",
        "  for metric in [\"loss\"]:\n",
        "      axs.plot(np.arange(0, num_epochs), model_train_history[metric], label=metric)\n",
        "  axs.legend()\n",
        "\n",
        "  plt.show()\n",
        "  \n",
        "  # Evaluate on test data\n",
        "  blue_scores = compute_blue_scores(model,test_in, test_out, translate_fn)\n",
        "  print(blue_scores)\n",
        "\n",
        "  # Ensure path exists\n",
        "  if not os.path.exists(\"models\"):\n",
        "    os.mkdir(\"models\")\n",
        "  \n",
        "  # Save model history\n",
        "  with open(os.path.join(\"models\",model.name+\"_train_history.json\"), \"w\") as json_file:\n",
        "      json_file.write(json.dumps(model_train_history,cls=JsonEncoder))\n",
        "\n",
        "  trainable_parameters = count_params(model.trainable_weights)\n",
        "  non_trainable_parameters = count_params(model.non_trainable_weights)\n",
        "\n",
        "  # Save model metrics\n",
        "  metrics ={\n",
        "      \"trainable_parameters\":trainable_parameters,\n",
        "      \"execution_time\":execution_time,\n",
        "      \"loss\":model_train_history[\"loss\"][-1],\n",
        "      \"BLEU-1\": blue_scores[\"BLEU-1\"],\n",
        "      \"BLEU-2\": blue_scores[\"BLEU-2\"],\n",
        "      \"BLEU-3\": blue_scores[\"BLEU-3\"],\n",
        "      \"BLEU-4\": blue_scores[\"BLEU-4\"],\n",
        "      \"learning_rate\":learning_rate,\n",
        "      \"epochs\":epochs,\n",
        "      \"name\": model.name,\n",
        "      \"id\": int(time.time())\n",
        "  }\n",
        "  with open(os.path.join(\"models\",model.name+\"_metrics.json\"), \"w\") as json_file:\n",
        "      json_file.write(json.dumps(metrics,cls=JsonEncoder))"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YbDCFNK5OxV0"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NjnhVOzjOxpI"
      },
      "source": [
        "## **Neural Machine Translation** <div id='nmt'>\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lGIZKC28PB6V"
      },
      "source": [
        "### **Overview**\n",
        "\n",
        "In this section, we're going to perform machine translation from english to french using an encoder decoder architecture. We will explore various model architectures.\n",
        "\n",
        "**The Task:** Perform Neural Machine Translation from english to french."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A5GWMgf6PFiR"
      },
      "source": [
        "### **Dataset**\n",
        "\n",
        "The dataset consists of English to French translations from http://www.manythings.org/ "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HELDUa9xQelD"
      },
      "source": [
        "#### **Download**\n",
        "\n",
        "Download the datasets to colab."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Z6q7p3XQfP0",
        "outputId": "d33f4662-94f4-40c2-fa16-031a78406f65"
      },
      "source": [
        "start_time = time.time()\n",
        "headers = {\n",
        "  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'\n",
        "}\n",
        "download_file(\"http://www.manythings.org/anki/fra-eng.zip\", base_path=\"datasets\", extract=True, headers=headers)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Download execution time (mins)\",execution_time)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Download execution time (mins) 0.013792125384012859\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wubioOfIQnpQ"
      },
      "source": [
        "#### **Load Data**\n",
        "\n",
        "* Read-in data as dataframe.\n",
        "* Data in column`english` is our inputs\n",
        "* Data in column`french` is our outputs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "XBs7UG0CQxzp",
        "outputId": "86dfc5a2-2da3-43b8-de20-f6c9524f6f40"
      },
      "source": [
        "# Read the fra-eng raw data \n",
        "english_french_data = pd.read_csv('datasets/fra.txt',delimiter='\\t',header=None, names=[\"english\",\"french\",\"att\"])\n",
        "english_french_data = english_french_data[[\"english\",\"french\"]]\n",
        "print(\"Size\",english_french_data.shape)\n",
        "english_french_data.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Size (185583, 2)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>english</th>\n",
              "      <th>french</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Go.</td>\n",
              "      <td>Va !</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Go.</td>\n",
              "      <td>Marche.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Go.</td>\n",
              "      <td>Bouge !</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Hi.</td>\n",
              "      <td>Salut !</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Hi.</td>\n",
              "      <td>Salut.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  english   french\n",
              "0     Go.     Va !\n",
              "1     Go.  Marche.\n",
              "2     Go.  Bouge !\n",
              "3     Hi.  Salut !\n",
              "4     Hi.   Salut."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gty-HMm1UA2D",
        "outputId": "dd6fa5b7-7f15-47fd-fda3-7c4877a2e912"
      },
      "source": [
        "subset_data = False\n",
        "if subset_data:\n",
        "  english_french_data = english_french_data[:50000]\n",
        "\n",
        "# Read in the english and french texts\n",
        "data_en = english_french_data[\"english\"].values\n",
        "data_fr = english_french_data[\"french\"].values\n",
        "\n",
        "def unicode_to_ascii(s):\n",
        "  return ''.join(c for c in unicodedata.normalize('NFD', s)if unicodedata.category(c) != 'Mn')\n",
        "\n",
        "def preprocess_string(s):\n",
        "  s = unicode_to_ascii(s)\n",
        "  s = re.sub(r'([!.?])', r' \\1', s)\n",
        "  s = re.sub(r'[^a-zA-Z.!?]+', r' ', s)\n",
        "  s = re.sub(r'\\s+', r' ', s)\n",
        "  return s\n",
        "\n",
        "data_en = [preprocess_string(data) for data in data_en]\n",
        "# Add start tag for decoder input\n",
        "data_fr_in = ['<start> ' + preprocess_string(data) for data in data_fr]\n",
        "# Add end tag for decoder output\n",
        "data_fr_out = [preprocess_string(data) + ' <end>' for data in data_fr]\n",
        "\n",
        "print(\"data_en len:\",len(data_en))\n",
        "print(\"data_fr_in len:\",len(data_fr_in))\n",
        "print(\"data_fr_out len:\",len(data_fr_out))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "data_en len: 185583\n",
            "data_fr_in len: 185583\n",
            "data_fr_out len: 185583\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YTVCuGiRVVvU"
      },
      "source": [
        "#### **View Text**\n",
        "\n",
        "Let's take a look at the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M81mYaKPVX2r",
        "outputId": "9159a7ba-0d18-4033-d448-692bba2d0e9a"
      },
      "source": [
        "# Generate a random sample of index\n",
        "data_samples = np.random.randint(0,high=len(data_en)-1, size=6)\n",
        "for i,data_idx in enumerate(data_samples):\n",
        "  print(\"English:\",data_en[data_idx])\n",
        "  print(\"French (input):\",data_fr_in[data_idx])\n",
        "  print(\"French (output):\",data_fr_out[data_idx])\n",
        "  print(\"\\n\")"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "English: They found us .\n",
            "French (input): <start> Elles nous ont trouves .\n",
            "French (output): Elles nous ont trouves . <end>\n",
            "\n",
            "\n",
            "English: I don t compromise .\n",
            "French (input): <start> Je ne transige pas .\n",
            "French (output): Je ne transige pas . <end>\n",
            "\n",
            "\n",
            "English: I like to sit in the front of the bus .\n",
            "French (input): <start> J aime m asseoir a l avant du bus .\n",
            "French (output): J aime m asseoir a l avant du bus . <end>\n",
            "\n",
            "\n",
            "English: It may rain in the evening .\n",
            "French (input): <start> Il se peut qu il pleuve dans la soiree .\n",
            "French (output): Il se peut qu il pleuve dans la soiree . <end>\n",
            "\n",
            "\n",
            "English: Is it still raining ?\n",
            "French (input): <start> Pleut il encore ?\n",
            "French (output): Pleut il encore ? <end>\n",
            "\n",
            "\n",
            "English: I wish you luck .\n",
            "French (input): <start> Je te souhaite bonne chance .\n",
            "French (output): Je te souhaite bonne chance . <end>\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hFg3XHJcN9cu"
      },
      "source": [
        "#### **Split Data** \n",
        "We split data into train and test by randomly selecting 20% as the test set."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pbm3IkEVN-OM",
        "outputId": "0db0cda0-c53c-4f6f-ac9f-2ce7d5b77284"
      },
      "source": [
        "test_percent = 0.10\n",
        "\n",
        "# Split data into train / validate\n",
        "split_outputs = train_test_split(data_en, data_fr_in, data_fr_out, test_size=test_percent)\n",
        "train_en, test_en, train_fr_in, test_fr_in, train_fr_out, test_fr_out = split_outputs\n",
        "\n",
        "print(\"train_en count:\",len(train_en))\n",
        "print(\"test_en count:\",len(test_en))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_en count: 167024\n",
            "test_en count: 18559\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6lokbRBpWO_j"
      },
      "source": [
        "### **Build Data Pipelines**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ok0lEvJ7WUS1"
      },
      "source": [
        "#### **Text Tokenization**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCpuhbhUWXWF",
        "outputId": "95b8c01d-fb2a-41a9-8b14-0fccb3b7715d"
      },
      "source": [
        "# Tokenize english\n",
        "en_tokenizer = keras.preprocessing.text.Tokenizer(filters='')\n",
        "en_tokenizer.fit_on_texts(data_en)\n",
        "# Train\n",
        "train_tokens_en = en_tokenizer.texts_to_sequences(train_en)\n",
        "train_tokens_en = keras.preprocessing.sequence.pad_sequences(train_tokens_en,padding='post')\n",
        "# Test\n",
        "test_tokens_en = en_tokenizer.texts_to_sequences(test_en)\n",
        "test_tokens_en = keras.preprocessing.sequence.pad_sequences(test_tokens_en,padding='post')\n",
        "\n",
        "\n",
        "# Tokenize french input and output\n",
        "fr_tokenizer = keras.preprocessing.text.Tokenizer(filters='')\n",
        "fr_tokenizer.fit_on_texts(data_fr_in)\n",
        "fr_tokenizer.fit_on_texts(data_fr_out)\n",
        "# Train\n",
        "train_tokens_fr_in = fr_tokenizer.texts_to_sequences(train_fr_in)\n",
        "train_tokens_fr_in = keras.preprocessing.sequence.pad_sequences(train_tokens_fr_in,padding='post')\n",
        "train_tokens_fr_out = fr_tokenizer.texts_to_sequences(train_fr_out)\n",
        "train_tokens_fr_out = keras.preprocessing.sequence.pad_sequences(train_tokens_fr_out,padding='post')\n",
        "# Test\n",
        "test_tokens_fr_in = fr_tokenizer.texts_to_sequences(test_fr_in)\n",
        "test_tokens_fr_in = keras.preprocessing.sequence.pad_sequences(test_tokens_fr_in,padding='post')\n",
        "test_tokens_fr_out = fr_tokenizer.texts_to_sequences(test_fr_out)\n",
        "test_tokens_fr_out = keras.preprocessing.sequence.pad_sequences(test_tokens_fr_out,padding='post')\n",
        "\n",
        "vocabulary_size_en = len(en_tokenizer.word_index)+1\n",
        "print(\"Vocabulary Size english:\",vocabulary_size_en)\n",
        "vocabulary_size_fr = len(fr_tokenizer.word_index)+1\n",
        "print(\"Vocabulary Size french:\",vocabulary_size_fr)\n",
        "\n",
        "print(\"train_tokens_en\",len(train_tokens_en))\n",
        "print(train_tokens_en[:5,:5])\n",
        "print(\"train_tokens_fr_in\",len(train_tokens_fr_in))\n",
        "print(train_tokens_fr_in[:5,:5])\n",
        "print(\"test_tokens_fr_out\",len(test_tokens_fr_out))\n",
        "print(test_tokens_fr_out[:5,:5])"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Vocabulary Size english: 14412\n",
            "Vocabulary Size french: 23568\n",
            "train_tokens_en 167024\n",
            "[[   2   36    3   33    4]\n",
            " [   2   65   25 1240 1039]\n",
            " [   3  555   25 1786    1]\n",
            " [   2   27    8   96   12]\n",
            " [  60   63   13 2440    1]]\n",
            "train_tokens_fr_in 167024\n",
            "[[   2    4   82   11   10]\n",
            " [   2   84   43    5  758]\n",
            " [   2   16   59  263   57]\n",
            " [   2    4   20   25   72]\n",
            " [   2  105   14 1491    1]]\n",
            "test_tokens_fr_out 18559\n",
            "[[  162     8    93  6661  2993]\n",
            " [    4    14    30     9   183]\n",
            " [ 1021    26    79    47     6]\n",
            " [   81   266     5    76 17136]\n",
            " [   31     8    21  2274   276]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rdWF2UvvhvR1"
      },
      "source": [
        "#### **Create TF Datasets**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HnjmGEYIhvwu",
        "outputId": "98402b9d-cf05-4a48-8da1-db3ed7a0ae27"
      },
      "source": [
        "BATCH_SIZE = 64\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = len(train_tokens_en)\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices((train_tokens_en, train_tokens_fr_in, train_tokens_fr_out))\n",
        "test_data = tf.data.Dataset.from_tensor_slices((test_en, test_fr_in, test_fr_out))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(BATCH_SIZE, drop_remainder=True)\n",
        "\n",
        "print(\"train_data\",train_data)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <BatchDataset shapes: ((64, 49), (64, 62), (64, 62)), types: (tf.int32, tf.int32, tf.int32)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kEIgx-iZzAnd"
      },
      "source": [
        "Take a batch of data and view some data to verify our data pipeline"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5alZINOmjUwf",
        "outputId": "de197112-6c30-4da8-bb4f-af2eada5a798"
      },
      "source": [
        "for batch in train_data.take(1):\n",
        "  print(\"train_en\",batch[0][0,:10])\n",
        "  print(\"train_fr_in\",batch[1][0,:10])\n",
        "  print(\"train_fr_out\",batch[2][0,:10])"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_en tf.Tensor([   2   37 1756  257    1    0    0    0    0    0], shape=(10,), dtype=int32)\n",
            "train_fr_in tf.Tensor([   2   19   62   28 3083   11    4  476    1    0], shape=(10,), dtype=int32)\n",
            "train_fr_out tf.Tensor([  19   62   28 3083   11    4  476    1    3    0], shape=(10,), dtype=int32)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E12Ig-rr6uI-"
      },
      "source": [
        "### **Neural Machine Translation Models**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NI8U_iqL6wXj"
      },
      "source": [
        "#### **Sequence 2 Sequence**\n",
        "\n",
        "* We will start with a simple sequence to sequence model\n",
        "* The Encoder will consist of an Embedding and LSTM layer\n",
        "* The Decoder will also consist of an Embedding and LSTM layer\n",
        "* In addtion the Decoder will have a final logits layer with the size of the french vocabulary\n",
        "* Like we saw in lecture the final hidden state of the encoder\n",
        "is the initial state of the decoder"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BKfG4hfSevyW"
      },
      "source": [
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/lecture_seq2seq.png\" width=\"800\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3oPtMvlxiNkE"
      },
      "source": [
        "Lets look at the various parts to the Encoder Decoder architecture\n",
        "\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/seq2seq/seq2seq_008.svg\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lq02idME684Y"
      },
      "source": [
        "##### Build Model\n",
        "\n",
        "We will create build custom `keras.layers` for the Encoder and Decoder"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fbH7EiMwkkwR"
      },
      "source": [
        "class Encoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, embedding_size, lstm_size):\n",
        "    super(Encoder, self).__init__()\n",
        "\n",
        "    self.embedding = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_size, name=\"encoder_embedding\")\n",
        "    self.lstm = keras.layers.LSTM(units=lstm_size, return_sequences=True, return_state=True, name=\"encoder_lstm\")\n",
        "  \n",
        "  def call(self, data):\n",
        "    encoder_outputs = self.embedding(data)\n",
        "    encoder_outputs = self.lstm(encoder_outputs)\n",
        "    return encoder_outputs"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B7bbJ1DNklsE"
      },
      "source": [
        "class Decoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, embedding_size, lstm_size):\n",
        "    super(Decoder, self).__init__()\n",
        "\n",
        "    self.embedding = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_size, name=\"decoder_embedding\")\n",
        "    self.lstm = keras.layers.LSTM(units=lstm_size, return_sequences=True, return_state=True, name=\"decoder_lstm\")\n",
        "    self.logits = keras.layers.Dense(units=vocab_size)\n",
        "\n",
        "  def call(self, data, initial_state):\n",
        "    decoder_outputs = self.embedding(data)\n",
        "    decoder_outputs = self.lstm(decoder_outputs, initial_state=initial_state)\n",
        "    logits = self.logits(decoder_outputs[0])\n",
        "    return logits, decoder_outputs[1], decoder_outputs[2]"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7Pkdq8kekl17"
      },
      "source": [
        "class Sequence2Sequence(keras.Model):\n",
        "  def __init__(self,source_vocab_size, target_vocab_size, embedding_size, lstm_size):\n",
        "    super(Sequence2Sequence, self).__init__()\n",
        "\n",
        "    # Encoder\n",
        "    self.encoder = Encoder(source_vocab_size, embedding_size, lstm_size)\n",
        "    # Decoder\n",
        "    self.decoder = Decoder(target_vocab_size, embedding_size, lstm_size)\n",
        "  \n",
        "  def train_step(self, data):\n",
        "    # Unpack data\n",
        "    x1, x2, y = data\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "      # Encoder\n",
        "      encoder_outputs = self.encoder(x1)\n",
        "      encoder_states = encoder_outputs[1:]\n",
        "      # Decoder\n",
        "      decoder_outputs = self.decoder(x2, encoder_states)\n",
        "      logits = decoder_outputs[0]\n",
        "\n",
        "      # Calculate loss\n",
        "      loss = self.loss(y, logits)\n",
        "\n",
        "    # Compute gradients\n",
        "    trainable_variables = self.encoder.trainable_variables + self.decoder.trainable_variables\n",
        "    gradients = tape.gradient(loss, trainable_variables)\n",
        "\n",
        "    # Update weights\n",
        "    self.optimizer.apply_gradients(zip(gradients, trainable_variables))\n",
        "\n",
        "    # Return a dict of performance\n",
        "    results = {m.name: m.result() for m in self.metrics}\n",
        "    results.update({\"loss\": loss})\n",
        "    return results"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9aj6TnBsTmBJ"
      },
      "source": [
        "##### Utils"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E4UN9ZNUyWrO"
      },
      "source": [
        "# Function to perform translation using the model\n",
        "def translate_seq2seq(model,test_source_text=None, max_ouput_size=25):\n",
        "\n",
        "  if test_source_text is None:\n",
        "    test_source_text = data_en[np.random.choice(len(data_en))]\n",
        "  test_source_seq = en_tokenizer.texts_to_sequences([test_source_text])\n",
        "\n",
        "  # Encoder\n",
        "  encoder_outputs = model.encoder(tf.constant(test_source_seq))\n",
        "  encoder_states = encoder_outputs[1:]\n",
        "\n",
        "  # Decoder\n",
        "  decoder_input = tf.constant([[fr_tokenizer.word_index['<start>']]])\n",
        "  decoder_state_h, decoder_state_c = encoder_outputs[1:]\n",
        "  output_words = []\n",
        "  output_seq = []\n",
        "  for i in range(max_ouput_size):\n",
        "    decoder_output, decoder_state_h, decoder_state_c = model.decoder(decoder_input, (decoder_state_h, decoder_state_c))\n",
        "    decoder_input = tf.argmax(decoder_output, -1)\n",
        "    output_seq.append(decoder_input.numpy()[0][0])\n",
        "    output_words.append(fr_tokenizer.index_word[output_seq[-1]])\n",
        "    if output_words[-1] == '<end>':\n",
        "        break\n",
        "\n",
        "  output_text = ' '.join(output_words)\n",
        "\n",
        "  return test_source_text, output_text"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tX5MCua47A9m"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lyNAXE9bkvHv",
        "outputId": "31526526-a644-4bac-9312-e745470c5f3f"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "epochs = 20\n",
        "embedding_size = 256\n",
        "lstm_size = 512\n",
        "learning_rate = 0.01\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = Sequence2Sequence(vocabulary_size_en, vocabulary_size_fr, embedding_size, lstm_size)\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate, clipnorm=5.0)\n",
        "\n",
        "# Loss\n",
        "crossentropy = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "def custom_loss(targets, logits):\n",
        "  mask = tf.math.logical_not(tf.math.equal(targets, 0))\n",
        "  mask = tf.cast(mask, dtype=tf.int64)\n",
        "  loss = crossentropy(targets, logits, sample_weight=mask)\n",
        "  return loss\n",
        "\n",
        "# Callback\n",
        "class DisplayTranslation(keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs=None):\n",
        "    print(\"\\nTranslation:\")\n",
        "    source_text, output_text = translate_seq2seq(self.model)\n",
        "    print(source_text,\" => \", output_text)\n",
        "\n",
        "# Compile\n",
        "model.compile(optimizer=optimizer, loss=custom_loss)\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data, # train_data.take(20) while testing\n",
        "        epochs=epochs,\n",
        "        callbacks=[DisplayTranslation()],\n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "2609/2609 [==============================] - 291s 105ms/step - loss: 0.5040\n",
            "\n",
            "Translation:\n",
            "You re safe .  =>  un coup de feu . <end>\n",
            "Epoch 2/20\n",
            "2609/2609 [==============================] - 273s 104ms/step - loss: 0.3864\n",
            "\n",
            "Translation:\n",
            "How about a cup of hot coffee ?  =>  comme je suis en train de faire ca ? <end>\n",
            "Epoch 3/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.3500\n",
            "\n",
            "Translation:\n",
            "I was able to catch the last train because I walked very quickly .  =>  je suis en train de me dire que tu ne veux pas que tu sois la . <end>\n",
            "Epoch 4/20\n",
            "2609/2609 [==============================] - 273s 105ms/step - loss: 0.3290\n",
            "\n",
            "Translation:\n",
            "The road was obstructed by fallen trees .  =>  la maison est un crime . <end>\n",
            "Epoch 5/20\n",
            "2609/2609 [==============================] - 272s 104ms/step - loss: 0.3158\n",
            "\n",
            "Translation:\n",
            "I didn t want any of that .  =>  je ne suis pas sur que ca arrive . <end>\n",
            "Epoch 6/20\n",
            "2609/2609 [==============================] - 273s 105ms/step - loss: 0.3063\n",
            "\n",
            "Translation:\n",
            "You ve changed since I saw you last year .  =>  son visage n a pas pondu de manger . <end>\n",
            "Epoch 7/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.3007\n",
            "\n",
            "Translation:\n",
            "We ve been warned .  =>  le comportement insultant . <end>\n",
            "Epoch 8/20\n",
            "2609/2609 [==============================] - 273s 105ms/step - loss: 0.3022\n",
            "\n",
            "Translation:\n",
            "Does anybody recognize him ?  =>  a peine a l evidence . <end>\n",
            "Epoch 9/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.3059\n",
            "\n",
            "Translation:\n",
            "I m ready for tomorrow .  =>  n importe quoi . <end>\n",
            "Epoch 10/20\n",
            "2609/2609 [==============================] - 274s 105ms/step - loss: 0.2989\n",
            "\n",
            "Translation:\n",
            "What would you do in my place ?  =>  que je puisse faire ca . <end>\n",
            "Epoch 11/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.2992\n",
            "\n",
            "Translation:\n",
            "I wonder what happens if I press this button .  =>  suppose ses dettes desormais dans la voiture . <end>\n",
            "Epoch 12/20\n",
            "2609/2609 [==============================] - 274s 105ms/step - loss: 0.2951\n",
            "\n",
            "Translation:\n",
            "This yearbook is illustrated with a lot of beautiful photographs .  =>  avance quant lorsque je suis censee aimer un medecin . <end>\n",
            "Epoch 13/20\n",
            "2609/2609 [==============================] - 275s 106ms/step - loss: 0.2919\n",
            "\n",
            "Translation:\n",
            "Get real !  =>  verifie le bouc emissaire . <end>\n",
            "Epoch 14/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.2904\n",
            "\n",
            "Translation:\n",
            "Love makes the world go round .  =>  parfois agissez seule . <end>\n",
            "Epoch 15/20\n",
            "2609/2609 [==============================] - 275s 105ms/step - loss: 0.2883\n",
            "\n",
            "Translation:\n",
            "I didn t say it like that .  =>  ferme le gaz pouvait etre arretes ! <end>\n",
            "Epoch 16/20\n",
            "2609/2609 [==============================] - 273s 105ms/step - loss: 0.2875\n",
            "\n",
            "Translation:\n",
            "We waited .  =>  roi . <end>\n",
            "Epoch 17/20\n",
            "2609/2609 [==============================] - 274s 105ms/step - loss: 0.2862\n",
            "\n",
            "Translation:\n",
            "Don t try to trick us .  =>  casse quelque chose a manger . <end>\n",
            "Epoch 18/20\n",
            "2609/2609 [==============================] - 272s 104ms/step - loss: 0.2857\n",
            "\n",
            "Translation:\n",
            "You must think I m really strange .  =>  vous n avez pas besoin de vous parler . <end>\n",
            "Epoch 19/20\n",
            "2609/2609 [==============================] - 273s 105ms/step - loss: 0.2851\n",
            "\n",
            "Translation:\n",
            "My friend says that she s suicidal .  =>  chacun egale a inviter faire un enorme erreur . <end>\n",
            "Epoch 20/20\n",
            "2609/2609 [==============================] - 272s 104ms/step - loss: 0.2850\n",
            "\n",
            "Translation:\n",
            "What s your favorite way to travel ?  =>  de voudras vraiment sages . <end>\n",
            "Training execution time (mins) 91.57990283568701\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VT7cEislpXqx"
      },
      "source": [
        "##### Evaluate"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "7cseE5p-fwSD",
        "outputId": "e840d0fb-f083-48b2-e2ea-9eaade6fccb9"
      },
      "source": [
        "evaluate_save_model(model, test_en[:1000], test_fr_out[:1000],translate_seq2seq,\n",
        "                    training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "{'BLEU-1': 0.2214277642350044, 'BLEU-2': 0.14720688702093024, 'BLEU-3': 0.030380353391263996, 'BLEU-4': 0.03451211654470146}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OIIe1l5epdVH",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8f395cbb-d720-4a74-e4a3-757bf6769d05"
      },
      "source": [
        "# Make some translations using the model\n",
        "for i,data_idx in enumerate(data_samples):\n",
        "  print(\"English:\",data_en[data_idx])\n",
        "  print(\"French (actual):\",data_fr_out[data_idx])\n",
        "  source_text, output_text = translate_seq2seq(model, test_source_text=data_en[data_idx])\n",
        "  print(\"French (prediction):\",output_text)\n",
        "  print(\"\\n\")"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "English: They found us .\n",
            "French (actual): Elles nous ont trouves . <end>\n",
            "French (prediction): portent croire de maniere . <end>\n",
            "\n",
            "\n",
            "English: I don t compromise .\n",
            "French (actual): Je ne transige pas . <end>\n",
            "French (prediction): continues de faire face a autre chose . <end>\n",
            "\n",
            "\n",
            "English: I like to sit in the front of the bus .\n",
            "French (actual): J aime m asseoir a l avant du bus . <end>\n",
            "French (prediction): continues de grignoter comme un adulte acharne sur la table . <end>\n",
            "\n",
            "\n",
            "English: It may rain in the evening .\n",
            "French (actual): Il se peut qu il pleuve dans la soiree . <end>\n",
            "French (prediction): reflechir ce matin . <end>\n",
            "\n",
            "\n",
            "English: Is it still raining ?\n",
            "French (actual): Pleut il encore ? <end>\n",
            "French (prediction): allonger mon dejeuner . <end>\n",
            "\n",
            "\n",
            "English: I wish you luck .\n",
            "French (actual): Je te souhaite bonne chance . <end>\n",
            "French (prediction): promis pas que nous gardions nos distances . <end>\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2xTDIDd_7SFa"
      },
      "source": [
        "#### **Sequence 2 Sequence with Attention**\n",
        "\n",
        "* Next we will add Attention to the decoder\n",
        "* The Encoder will consist of an Embedding and LSTM layer\n",
        "* The Decoder will also consist of an Embedding and LSTM layer\n",
        "* In addition the Decoder will have an Attention layer\n",
        "* In addtion the Decoder will have a final logits layer with the size of the french vocabulary"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g7PVRyfUkwZj"
      },
      "source": [
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/lecture_seq2seq_attention.png\" width=\"800\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y2NxpYz2kw_Q"
      },
      "source": [
        "Lets look at the various parts to the Encoder Decoder architecture\n",
        "\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/seq2seq/seq2seqattention_013.svg\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R_7HrXDS7Ygc"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lE2bxJtvUG29"
      },
      "source": [
        "class Attention(keras.layers.Layer):\n",
        "  def __init__(self, lstm_size):\n",
        "    super(Attention, self).__init__()\n",
        "    self.wa = keras.layers.Dense(lstm_size)\n",
        "\n",
        "  def call(self, decoder_output, encoder_output):\n",
        "\n",
        "    # Score\n",
        "    score = tf.matmul(decoder_output, self.wa(encoder_output), transpose_b=True)\n",
        "\n",
        "    # alignment = softmax(score)\n",
        "    alignment = tf.nn.softmax(score, axis=2)\n",
        "\n",
        "    # context vector is the weighted average sum of encoder output\n",
        "    context = tf.matmul(alignment, encoder_output)\n",
        "\n",
        "    return context, alignment"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hGwJqlUiUKB_"
      },
      "source": [
        "class Encoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, embedding_size, lstm_size):\n",
        "    super(Encoder, self).__init__()\n",
        "\n",
        "    self.embedding = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_size, name=\"encoder_embedding\")\n",
        "    self.lstm = keras.layers.LSTM(units=lstm_size, return_sequences=True, return_state=True, name=\"encoder_lstm\")\n",
        "  \n",
        "  def call(self, data):\n",
        "    encoder_outputs = self.embedding(data)\n",
        "    lstm_out, state_h, state_c = self.lstm(encoder_outputs)\n",
        "    return lstm_out, state_h, state_c"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "599il_L87Y4m"
      },
      "source": [
        "class Decoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, embedding_size, lstm_size):\n",
        "    super(Decoder, self).__init__()\n",
        "    \n",
        "    self.embedding = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_size, name=\"decoder_embedding\")\n",
        "    self.lstm = keras.layers.LSTM(units=lstm_size, return_sequences=True, return_state=True, name=\"decoder_lstm\")\n",
        "    # Add Attention\n",
        "    self.attention = Attention(lstm_size)\n",
        "\n",
        "    self.wc = keras.layers.Dense(units=lstm_size, activation='tanh')\n",
        "    self.ws = keras.layers.Dense(units=vocab_size)\n",
        "\n",
        "  def call(self, data, initial_state, encoder_output):\n",
        "    # Get LSTM outputs\n",
        "    embed = self.embedding(data)\n",
        "    lstm_out, state_h, state_c = self.lstm(embed, initial_state=initial_state)\n",
        "\n",
        "    # Get context and alignment vectors using the Attention layer\n",
        "    context, alignment = self.attention(lstm_out, encoder_output)\n",
        "\n",
        "    # Combine the context vector and the LSTM output\n",
        "    lstm_out = tf.concat([tf.squeeze(context, 1), tf.squeeze(lstm_out, 1)], 1)\n",
        "\n",
        "    # Pass lstm_out through Dense layer\n",
        "    lstm_out = self.wc(lstm_out)\n",
        "\n",
        "    # Output logits of vocab_size\n",
        "    logits = self.ws(lstm_out)\n",
        "\n",
        "    return logits, state_h, state_c, alignment"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kCcl0AkU451I"
      },
      "source": [
        "class Sequence2SequenceAttention(keras.Model):\n",
        "  def __init__(self,source_vocab_size, target_vocab_size, embedding_size, lstm_size):\n",
        "    super(Sequence2SequenceAttention, self).__init__()\n",
        "\n",
        "    # Encoder\n",
        "    self.encoder = Encoder(source_vocab_size, embedding_size, lstm_size)\n",
        "    # Decoder\n",
        "    self.decoder = Decoder(target_vocab_size, embedding_size, lstm_size)\n",
        "\n",
        "  def train_step(self, data):\n",
        "    # Unpack data\n",
        "    x1, x2, y = data\n",
        "\n",
        "    loss = 0\n",
        "    with tf.GradientTape() as tape:\n",
        "      encoder_outputs = self.encoder(x1)\n",
        "      encoder_states = encoder_outputs[1:]\n",
        "      decoder_state_h, decoder_state_c = encoder_states\n",
        "\n",
        "      # For every word in y\n",
        "      for i in range(y.shape[1]):\n",
        "          # Decoder input is one word at a time\n",
        "          decoder_input = tf.expand_dims(x2[:, i], 1)\n",
        "          logits, decoder_state_h, decoder_state_c, _ = self.decoder(decoder_input, (decoder_state_h, decoder_state_c), encoder_outputs[0])\n",
        "\n",
        "          # The loss is now accumulated through the whole batch\n",
        "          loss += self.loss(y[:, i], logits)\n",
        "\n",
        "    variables = self.encoder.trainable_variables + self.decoder.trainable_variables\n",
        "    gradients = tape.gradient(loss, variables)\n",
        "    self.optimizer.apply_gradients(zip(gradients, variables))\n",
        "\n",
        "    # Return a dict of performance\n",
        "    results = {m.name: m.result() for m in self.metrics}\n",
        "    results.update({\"loss\": loss / y.shape[1]})\n",
        "    return results"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQMRNkLrT9WE"
      },
      "source": [
        "##### Utils"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rj3Fc0O26T8s"
      },
      "source": [
        "# Function to perform translation using the model\n",
        "def translate_seq2seqattention(model,test_source_text=None, max_ouput_size=25):\n",
        "\n",
        "  if test_source_text is None:\n",
        "    test_source_text = data_en[np.random.choice(len(data_en))]\n",
        "  test_source_seq = en_tokenizer.texts_to_sequences([test_source_text])\n",
        "\n",
        "  # Encoder\n",
        "  encoder_outputs = model.encoder(tf.constant(test_source_seq))\n",
        "\n",
        "  # Decoder\n",
        "  decoder_input = tf.constant([[fr_tokenizer.word_index['<start>']]])\n",
        "  decoder_state_h, decoder_state_c = encoder_outputs[1:]\n",
        "\n",
        "  output_words = []\n",
        "  output_seq = []\n",
        "  for i in range(max_ouput_size):\n",
        "    logits, decoder_state_h, decoder_state_c, _ = model.decoder(decoder_input, \n",
        "                                                                (decoder_state_h, decoder_state_c), \n",
        "                                                                encoder_outputs[0])\n",
        "    decoder_input = tf.expand_dims(tf.argmax(logits, -1), 0)\n",
        "    output_seq.append(decoder_input.numpy()[0][0])\n",
        "    output_words.append(fr_tokenizer.index_word[output_seq[-1]])\n",
        "    if output_words[-1] == '<end>':\n",
        "        break\n",
        "\n",
        "  output_text = ' '.join(output_words)\n",
        "\n",
        "  return test_source_text, output_text"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T0QwfvxE7bKJ"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OrOYgMVX7bfB",
        "outputId": "44eff185-0713-4c2d-fe5b-eab420145c27"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "epochs = 20\n",
        "embedding_size = 256\n",
        "lstm_size = 512\n",
        "learning_rate = 0.01\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = Sequence2SequenceAttention(vocabulary_size_en, vocabulary_size_fr, embedding_size, lstm_size)\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(lr=learning_rate, clipnorm=5.0)\n",
        "# Loss\n",
        "crossentropy = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "def custom_loss(targets, logits):\n",
        "  mask = tf.math.logical_not(tf.math.equal(targets, 0))\n",
        "  mask = tf.cast(mask, dtype=tf.int64)\n",
        "  loss = crossentropy(targets, logits, sample_weight=mask)\n",
        "  return loss\n",
        "\n",
        "# Callback\n",
        "class DisplayTranslation(keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs=None):\n",
        "    print(\"\\nTranslation:\")\n",
        "    source_text, output_text = translate_seq2seqattention(self.model)\n",
        "    print(source_text,\" => \", output_text)\n",
        "\n",
        "# Compile\n",
        "model.compile(optimizer=optimizer, loss=custom_loss)\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data, # train_data.take(20) while testing\n",
        "        epochs=epochs,\n",
        "        callbacks=[DisplayTranslation()],\n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "2609/2609 [==============================] - 842s 295ms/step - loss: 0.9762\n",
            "\n",
            "Translation:\n",
            "It was a bad movie .  =>  ca parviendrons . <end>\n",
            "Epoch 2/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.0220\n",
            "\n",
            "Translation:\n",
            "You can t blame him .  =>  tu n aimait pas son cousin . <end>\n",
            "Epoch 3/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.0424\n",
            "\n",
            "Translation:\n",
            "The accident happened two years ago .  =>  reflechissez tu pas de nous aider mes excuses aider . <end>\n",
            "Epoch 4/20\n",
            "2609/2609 [==============================] - 767s 294ms/step - loss: 1.0578\n",
            "\n",
            "Translation:\n",
            "I don t want you to be hurt .  =>  je ne pense pas faire ca . <end>\n",
            "Epoch 5/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.0742\n",
            "\n",
            "Translation:\n",
            "This may just come in handy someday .  =>  est en danger une encyclopedie . <end>\n",
            "Epoch 6/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.0799\n",
            "\n",
            "Translation:\n",
            "The woman gave birth to a baby girl .  =>  l australie . <end>\n",
            "Epoch 7/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.0995\n",
            "\n",
            "Translation:\n",
            "Take these .  =>  ces derniers anglais sont ces arretees . <end>\n",
            "Epoch 8/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.1114\n",
            "\n",
            "Translation:\n",
            "I gave up eating dessert .  =>  j ai pas prevu de temps . <end>\n",
            "Epoch 9/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1217\n",
            "\n",
            "Translation:\n",
            "It s now .  =>  mon desastre au bal petit nombre . <end>\n",
            "Epoch 10/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1257\n",
            "\n",
            "Translation:\n",
            "She is just going shopping .  =>  elle decrit . <end>\n",
            "Epoch 11/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1188\n",
            "\n",
            "Translation:\n",
            "Come home early .  =>  il est meilleure . <end>\n",
            "Epoch 12/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1235\n",
            "\n",
            "Translation:\n",
            "What he needs most is a good job .  =>  veuillez mal a la discrimination . <end>\n",
            "Epoch 13/20\n",
            "2609/2609 [==============================] - 770s 295ms/step - loss: 1.1248\n",
            "\n",
            "Translation:\n",
            "I washed my feet .  =>  elle a abandonne etudie . <end>\n",
            "Epoch 14/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1264\n",
            "\n",
            "Translation:\n",
            "She thanked him for his help .  =>  elle lui a continue de apprends longuement . <end>\n",
            "Epoch 15/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1337\n",
            "\n",
            "Translation:\n",
            "You have been warned .  =>  ses des fermes de femme . <end>\n",
            "Epoch 16/20\n",
            "2609/2609 [==============================] - 768s 294ms/step - loss: 1.1376\n",
            "\n",
            "Translation:\n",
            "I promise I ll protect you .  =>  je promets qu il tiendrait moi . <end>\n",
            "Epoch 17/20\n",
            "2609/2609 [==============================] - 771s 295ms/step - loss: 1.1417\n",
            "\n",
            "Translation:\n",
            "He sat there with his legs crossed .  =>  etaient souvent . <end>\n",
            "Epoch 18/20\n",
            "2609/2609 [==============================] - 772s 296ms/step - loss: 1.1377\n",
            "\n",
            "Translation:\n",
            "You re charming .  =>  vous a intervenir . <end>\n",
            "Epoch 19/20\n",
            "2609/2609 [==============================] - 771s 295ms/step - loss: 1.1357\n",
            "\n",
            "Translation:\n",
            "I have nothing to say in this regard .  =>  que ca ira ordonnee . <end>\n",
            "Epoch 20/20\n",
            "2609/2609 [==============================] - 769s 295ms/step - loss: 1.1345\n",
            "\n",
            "Translation:\n",
            "He s three years older than her .  =>  dites ce que c est qu il serait ce qu il est mort ce contrat d une recession . <end>\n",
            "Training execution time (mins) 257.5513118386269\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aBTNu5JPpfFO"
      },
      "source": [
        "##### Evaluate"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "tH1XXhElhxfa",
        "outputId": "d13b7bce-eebc-41ef-a3cc-e6f7def22f76"
      },
      "source": [
        "evaluate_save_model(model, test_en[:1000], test_fr_out[:1000],translate_seq2seqattention,\n",
        "                    training_results, execution_time, learning_rate, epochs)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "{'BLEU-1': 0.219911621635852, 'BLEU-2': 0.15107701121156186, 'BLEU-3': 0.05173881761102471, 'BLEU-4': 0.012296466757608206}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ye0ZvBIIpfkQ",
        "outputId": "f36f6ddf-880d-46c2-fca4-ca25a59b2753"
      },
      "source": [
        "# Make some translations using the model\n",
        "for i,data_idx in enumerate(data_samples):\n",
        "  print(\"English:\",data_en[data_idx])\n",
        "  print(\"French (actual):\",data_fr_out[data_idx])\n",
        "  source_text, output_text = translate_seq2seqattention(model, test_source_text=data_en[data_idx])\n",
        "  print(\"French (prediction):\",output_text)\n",
        "  print(\"\\n\")"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "English: They found us .\n",
            "French (actual): Elles nous ont trouves . <end>\n",
            "French (prediction): la raison . <end>\n",
            "\n",
            "\n",
            "English: I don t compromise .\n",
            "French (actual): Je ne transige pas . <end>\n",
            "French (prediction): je ne fais pas . <end>\n",
            "\n",
            "\n",
            "English: I like to sit in the front of the bus .\n",
            "French (actual): J aime m asseoir a l avant du bus . <end>\n",
            "French (prediction): je comprends comme destruction dit . <end>\n",
            "\n",
            "\n",
            "English: It may rain in the evening .\n",
            "French (actual): Il se peut qu il pleuve dans la soiree . <end>\n",
            "French (prediction): d abord important . <end>\n",
            "\n",
            "\n",
            "English: Is it still raining ?\n",
            "French (actual): Pleut il encore ? <end>\n",
            "French (prediction): qui prend chose qui est assis bonne idee de nouveau . <end>\n",
            "\n",
            "\n",
            "English: I wish you luck .\n",
            "French (actual): Je te souhaite bonne chance . <end>\n",
            "French (prediction): je vous souhaite . <end>\n",
            "\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VPlXzAC-7eU6"
      },
      "source": [
        "#### **Transfomer**\n",
        "\n",
        "* The transformer will consist of an Encoder and Decoder\n",
        "* The Encoder consists of embedding, positional encoding, self attention, normalization, and feed forward layers\n",
        "* The Decoder consists of embedding, positional encoding, decoder self attention, encoder-decoder attention, normalization, and feed forward layers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lW_20LrSm744"
      },
      "source": [
        "Lets look at the various parts to the Transfomer Encoder Decoder architecture\n",
        "\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/transformer/transformer_020.svg\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a1Dj4FSx7kRU"
      },
      "source": [
        "##### Build Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a4W5BEoG7EJb"
      },
      "source": [
        "**Model Param**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Po0Ukby97GsW"
      },
      "source": [
        "############################\n",
        "# Model Params\n",
        "############################\n",
        "MODEL_SIZE = 128 # depth size of the model\n",
        "NUM_LAYERS = 4 # number of layers (Multi-Head Attention + FFN)\n",
        "NUM_HEADS = 8 # number of attention heads"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g_UnJlTeOLIK"
      },
      "source": [
        "**Positional Encoding**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4r-UJW5uOMv4"
      },
      "source": [
        "def generate_positional_encoding(max_length, model_size):\n",
        "    pos_enc = np.array(\n",
        "        [\n",
        "            [pos / np.power(10000, 2 * (j // 2) / model_size) for j in range(model_size)]\n",
        "            if pos != 0\n",
        "            else np.zeros(model_size)\n",
        "            for pos in range(max_length)\n",
        "        ]\n",
        "    )\n",
        "    pos_enc[1:, 0::2] = np.sin(pos_enc[1:, 0::2])  # dim 2i\n",
        "    pos_enc[1:, 1::2] = np.cos(pos_enc[1:, 1::2])  # dim 2i+1\n",
        "    return pos_enc"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5kUh76D6nZ6i"
      },
      "source": [
        "Here we have an implementation of `MultiHeadSelfAttention` layer. But you can use the `keras.layers.MultiHeadSelfAttention` directly"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QSFCOWR_3_r3"
      },
      "source": [
        "class MultiHeadSelfAttention(keras.layers.Layer):\n",
        "  def __init__(self, model_size, num_heads):\n",
        "    super(MultiHeadSelfAttention, self).__init__()\n",
        "\n",
        "    self.key_size = model_size // num_heads # Key size\n",
        "    self.num_heads = num_heads # number of attention heads\n",
        "\n",
        "    # Query weights\n",
        "    self.wq = keras.layers.Dense(units=model_size)\n",
        "    # Key weights\n",
        "    self.wk = keras.layers.Dense(units=model_size)\n",
        "    # Value weights\n",
        "    self.wv = keras.layers.Dense(units=model_size)\n",
        "    # Output weights\n",
        "    self.wo = keras.layers.Dense(units=model_size)\n",
        "\n",
        "  def call(self, query, value, mask=None):\n",
        "    \n",
        "    ############################################\n",
        "    # Step 1: Create query, key, value vectors\n",
        "    ############################################\n",
        "    query = self.wq(query) # query has shape (batch, query_len, model_size)\n",
        "    key = self.wk(value) # key has shape (batch, value_len, model_size)\n",
        "    value = self.wv(value) # value has shape (batch, value_len, model_size)\n",
        "    batch_size = query.shape[0]\n",
        "    # Each heads query, key, value needs to be size = key_size\n",
        "    # Reshape to (batch, query_len, num_heads, key_size)\n",
        "    query = tf.reshape(query, [batch_size, -1, self.num_heads, self.key_size])\n",
        "    key = tf.reshape(key, [batch_size, -1, self.num_heads, self.key_size])\n",
        "    value = tf.reshape(value, [batch_size, -1, self.num_heads, self.key_size])\n",
        "    # Tranpose to (batch, num_heads, query_len, key_size) for matmul\n",
        "    query = tf.transpose(query, [0, 2, 1, 3])\n",
        "    key = tf.transpose(key, [0, 2, 1, 3])\n",
        "    value = tf.transpose(value, [0, 2, 1, 3])\n",
        "    \n",
        "    ########################################\n",
        "    # Step 2+3: Compute Self-Attention Score\n",
        "    ########################################\n",
        "    # Score is dot product of query vector and key vector\n",
        "    # Score is then divided by the square root of key_size : This leads to having more stable gradients\n",
        "    score = tf.matmul(query, key, transpose_b=True) / tf.math.sqrt(tf.dtypes.cast(self.key_size, dtype=tf.float32))\n",
        "    \n",
        "    # Mask out scores if a mask is provided\n",
        "    if mask is not None:\n",
        "        score *= mask\n",
        "        # Apply a very large negative value so the softmax in the next step will zero it out\n",
        "        score = tf.where(tf.equal(score, 0), tf.ones_like(score) * -1e9, score)\n",
        "    \n",
        "    ##################################################\n",
        "    # Step 4: Normalize Score to get Alignment vector\n",
        "    ##################################################\n",
        "    # Pass the score through a softmax operation\n",
        "    # Softmax normalizes the scores so they’re all positive and add up to 1\n",
        "    # Alignment vector shape = (batch, h, query_len, value_len)\n",
        "    alignment = tf.nn.softmax(score, axis=-1)\n",
        "    \n",
        "    ################################\n",
        "    # Step 5: Compute Context vector\n",
        "    ################################\n",
        "    # Computed by multiplying each value vector with alignment vector\n",
        "    # Context vector shape = (batch, h, query_len, key_size)\n",
        "    context = tf.matmul(alignment, value)\n",
        "    \n",
        "    ################################\n",
        "    # Step 6: Compute Final Output\n",
        "    ################################\n",
        "    # Align all the context vectors (from all heads)\n",
        "    context = tf.transpose(context, [0, 2, 1, 3])\n",
        "    context = tf.reshape(context, [batch_size, -1, self.key_size * self.num_heads])\n",
        "    # Multiply context vectors with weight matric wo\n",
        "    z = self.wo(context)\n",
        "    \n",
        "    # Final Z matrix, alignment of all heads\n",
        "    return z, alignment"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kBmJLTR1mkw_"
      },
      "source": [
        "**Encoder**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BjN2t11i7k5a"
      },
      "source": [
        "class Encoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, model_size, num_layers, num_heads):\n",
        "    super(Encoder, self).__init__()\n",
        "\n",
        "    self.model_size = model_size # depth size of the model\n",
        "    self.num_layers = num_layers # number of layers (Multi-Head Self Attention + FFN)\n",
        "    self.num_heads = num_heads # number of attention heads\n",
        "\n",
        "    # Embedding Layer\n",
        "    self.embedding = keras.layers.Embedding(vocab_size, self.model_size)\n",
        "    self.embedding_dropout = keras.layers.Dropout(0.1)\n",
        "\n",
        "    ###################\n",
        "    # Attention Blocks (repeated num_layer times)\n",
        "    ###################\n",
        "\n",
        "    # Multi-Head Self Attention + Normalization\n",
        "    self.attention = [MultiHeadSelfAttention(self.model_size, self.num_heads) for _ in range(self.num_layers)]\n",
        "    self.attention_dropout = [keras.layers.Dropout(0.1) for _ in range(self.num_layers)]\n",
        "    self.attention_norm = [keras.layers.LayerNormalization(epsilon=1e-6) for _ in range(self.num_layers)]\n",
        "\n",
        "    # Feedforward + Normalization\n",
        "    self.dense_1 = [keras.layers.Dense(self.model_size * 4, activation='relu') for _ in range(self.num_layers)]\n",
        "    self.dense_2 = [keras.layers.Dense(self.model_size) for _ in range(self.num_layers)]\n",
        "    self.ffn_dropout = [keras.layers.Dropout(0.1) for _ in range(self.num_layers)]\n",
        "    self.ffn_norm = [keras.layers.LayerNormalization(epsilon=1e-6) for _ in range(self.num_layers)]\n",
        "\n",
        "  def call(self, data, training=True, encoder_mask=None):\n",
        "    # Embedding output\n",
        "    embedding_output = self.embedding(data)\n",
        "    embedding_output *= tf.math.sqrt(tf.cast(self.model_size, tf.float32))\n",
        "    # Add Positionsl Encoding to embedding output\n",
        "    embedding_output = embedding_output + generate_positional_encoding(data.shape[1],self.model_size)\n",
        "    embedding_output = self.embedding_dropout(embedding_output, training=training)\n",
        "\n",
        "    # Sub layer input\n",
        "    sub_layer_input = embedding_output\n",
        "    alignments = [] # alignment (attention) vectors for all layers\n",
        "\n",
        "    # Repeat for each layer\n",
        "    for i in range(self.num_layers):\n",
        "      # Pass in query, value, mask to Attention layer\n",
        "      sub_layer_output, alignment = self.attention[i](sub_layer_input, sub_layer_input, encoder_mask)\n",
        "      sub_layer_output = self.attention_dropout[i](sub_layer_output, training=training)\n",
        "      # Add residual connection \n",
        "      sub_layer_output = sub_layer_input + sub_layer_output\n",
        "      # Normalization\n",
        "      sub_layer_output = self.attention_norm[i](sub_layer_output)\n",
        "      alignments.append(alignment)\n",
        "\n",
        "      # Feedforward Network\n",
        "      ffn_input = sub_layer_output\n",
        "      ffn_output = self.dense_2[i](self.dense_1[i](ffn_input))\n",
        "      ffn_output = self.ffn_dropout[i](ffn_output, training=training)\n",
        "      # Add residual connection \n",
        "      ffn_output = ffn_input + ffn_output\n",
        "      # Normalization\n",
        "      ffn_output = self.ffn_norm[i](ffn_output)\n",
        "\n",
        "      # Pass FFN output to the next layer\n",
        "      sub_layer_input = ffn_output\n",
        "\n",
        "    # Final encoder output and all alignment vectors\n",
        "    return ffn_output, alignments"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zrnsl8vGmoMb"
      },
      "source": [
        "**Decoder**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7zQXzE-v6sMe"
      },
      "source": [
        "class Decoder(keras.layers.Layer):\n",
        "  def __init__(self, vocab_size, model_size, num_layers, num_heads):\n",
        "    super(Decoder, self).__init__()\n",
        "    \n",
        "    self.model_size = model_size # depth size of the model\n",
        "    self.num_layers = num_layers # number of layers (Multi-Head Self Attention + FFN)\n",
        "    self.num_heads = num_heads # number of attention heads\n",
        "\n",
        "    # Embedding Layer\n",
        "    self.embedding = keras.layers.Embedding(vocab_size, model_size)\n",
        "    self.embedding_dropout = keras.layers.Dropout(0.1)\n",
        "\n",
        "    ###################\n",
        "    # Attention Blocks (repeated num_layer times)\n",
        "    ###################\n",
        "\n",
        "    # Bottom Multi-Head Self Attention + Normalization\n",
        "    self.attention_bottom = [MultiHeadSelfAttention(self.model_size, self.num_heads) for _ in range(self.num_layers)]\n",
        "    self.attention_bottom_dropout = [keras.layers.Dropout(0.1) for _ in range(self.num_layers)]\n",
        "    self.attention_bottom_norm = [keras.layers.LayerNormalization(epsilon=1e-6) for _ in range(self.num_layers)]\n",
        "\n",
        "    # Middle Multi-Head Self Attention + Normalization\n",
        "    self.attention_middle = [MultiHeadSelfAttention(self.model_size, self.num_heads) for _ in range(self.num_layers)]\n",
        "    self.attention_middle_dropout = [keras.layers.Dropout(0.1) for _ in range(self.num_layers)]\n",
        "    self.attention_middle_norm = [keras.layers.LayerNormalization(epsilon=1e-6) for _ in range(self.num_layers)]\n",
        "\n",
        "    # Feedforward + Normalization\n",
        "    self.dense_1 = [keras.layers.Dense(units=self.model_size * 4, activation='relu') for _ in range(self.num_layers)]\n",
        "    self.dense_2 = [keras.layers.Dense(units=self.model_size) for _ in range(self.num_layers)]\n",
        "    self.ffn_dropout = [keras.layers.Dropout(0.1) for _ in range(self.num_layers)]\n",
        "    self.ffn_norm = [keras.layers.LayerNormalization(epsilon=1e-6) for _ in range(self.num_layers)]\n",
        "\n",
        "    # Final output/logits layer\n",
        "    self.dense = keras.layers.Dense(units=vocab_size)\n",
        "\n",
        "  def call(self, data, encoder_output, training=True, encoder_mask=None):\n",
        "    # Embedding output\n",
        "    embedding_output = self.embedding(data)\n",
        "    embedding_output *= tf.math.sqrt(tf.cast(self.model_size, tf.float32))\n",
        "    # Add Positionsl Encoding to embedding output\n",
        "    embedding_output = embedding_output + generate_positional_encoding(data.shape[1],self.model_size)\n",
        "    embedding_output = self.embedding_dropout(embedding_output)\n",
        "\n",
        "    bottom_sub_layer_input = embedding_output\n",
        "    bottom_alignments = [] # bottom alignment (attention) vectors for all layers\n",
        "    middle_alignments = [] # middle alignment (attention) vectors for all layers\n",
        "\n",
        "    # Repeat for each layer\n",
        "    for i in range(self.num_layers):\n",
        "      # Bottom Multi-Head Sub Layer\n",
        "      sequence_length = bottom_sub_layer_input.shape[1]\n",
        "\n",
        "      if training:\n",
        "        mask = tf.linalg.band_part(tf.ones((sequence_length, sequence_length)), -1, 0)\n",
        "      else:\n",
        "        mask = None\n",
        "\n",
        "      # Pass in query, value, mask to Attention layer\n",
        "      bottom_sub_layer_output, bottom_alignment = self.attention_bottom[i](bottom_sub_layer_input, bottom_sub_layer_input, mask)\n",
        "      bottom_sub_layer_output = self.attention_bottom_dropout[i](bottom_sub_layer_output, training=training)\n",
        "      # Add residual connection \n",
        "      bottom_sub_layer_output = bottom_sub_layer_input + bottom_sub_layer_output\n",
        "      # Normalization\n",
        "      bottom_sub_layer_output = self.attention_bottom_norm[i](bottom_sub_layer_output)\n",
        "      bottom_alignments.append(bottom_alignment)\n",
        "\n",
        "      # Middle Multi-Head Sub Layer\n",
        "      middle_sub_layer_input = bottom_sub_layer_output\n",
        "      # Pass in query, value, mask to Attention layer\n",
        "      middle_sub_layer_output, middle_alignment = self.attention_middle[i](middle_sub_layer_input, encoder_output, encoder_mask)\n",
        "      middle_sub_layer_output = self.attention_middle_dropout[i](middle_sub_layer_output, training=training)\n",
        "      # Add residual connection \n",
        "      middle_sub_layer_output = middle_sub_layer_output + middle_sub_layer_input\n",
        "      # Normalization\n",
        "      middle_sub_layer_output = self.attention_middle_norm[i](middle_sub_layer_output)\n",
        "      middle_alignments.append(middle_alignment)\n",
        "\n",
        "      # Feedforward Network\n",
        "      ffn_input = middle_sub_layer_output\n",
        "      ffn_output = self.dense_2[i](self.dense_1[i](ffn_input))\n",
        "      ffn_output = self.ffn_dropout[i](ffn_output, training=training)\n",
        "      # Add residual connection \n",
        "      ffn_output = ffn_output + ffn_input\n",
        "      # Normalization\n",
        "      ffn_output = self.ffn_norm[i](ffn_output)\n",
        "\n",
        "      # Pass FFN output to the next layer\n",
        "      bottom_sub_layer_input = ffn_output\n",
        "\n",
        "    # Compute final output logits (batch_size, length, model_size)\n",
        "    logits = self.dense(ffn_output)\n",
        "\n",
        "    # Final decoder output and bottom and middle alignment vectors\n",
        "    return logits, bottom_alignments, middle_alignments"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uvUPcSGhmtV1"
      },
      "source": [
        "**Transfomer Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5xl5lEQ26sU0"
      },
      "source": [
        "class Transformer(keras.Model):\n",
        "  def __init__(self, source_vocab_size, target_vocab_size, model_size, num_layers, num_heads):\n",
        "    super(Transformer, self).__init__()\n",
        "\n",
        "    # Encoder\n",
        "    self.encoder = Encoder(source_vocab_size, model_size, num_layers, num_heads)\n",
        "    # Decoder\n",
        "    self.decoder = Decoder(target_vocab_size, model_size, num_layers, num_heads)\n",
        "\n",
        "  def train_step(self, data):\n",
        "    # Unpack data\n",
        "    x1, x2, y = data\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "        encoder_mask = 1 - tf.cast(tf.equal(x1, 0), dtype=tf.float32)\n",
        "        # Add two more dimensions to make it broadcastable when computing attention heads\n",
        "        encoder_mask = tf.expand_dims(encoder_mask, axis=1)\n",
        "        encoder_mask = tf.expand_dims(encoder_mask, axis=1)\n",
        "        # Encoder\n",
        "        encoder_output, _ = self.encoder(x1, encoder_mask=encoder_mask)\n",
        "        # Decoder\n",
        "        decoder_output, _, _ = self.decoder(x2, encoder_output, encoder_mask=encoder_mask)\n",
        "        # Compute loss\n",
        "        loss = self.loss(y, decoder_output)\n",
        "\n",
        "    variables = self.encoder.trainable_variables + self.decoder.trainable_variables\n",
        "    gradients = tape.gradient(loss, variables)\n",
        "    self.optimizer.apply_gradients(zip(gradients, variables))\n",
        "\n",
        "    # Return a dict of performance\n",
        "    results = {m.name: m.result() for m in self.metrics}\n",
        "    results.update({\"loss\": loss})\n",
        "    return results"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lboW8z61mIh6"
      },
      "source": [
        "##### Utils"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KVpJdze9PwyA"
      },
      "source": [
        "# Function to perform translation using the model\n",
        "def translate_transformer(model,test_source_text=None, max_ouput_size=25):\n",
        "  if test_source_text is None:\n",
        "    test_source_text = data_en[np.random.choice(len(data_en))]\n",
        "  test_source_seq = en_tokenizer.texts_to_sequences([test_source_text])\n",
        "\n",
        "  # Encoder\n",
        "  en_output, _ = model.encoder(tf.constant(test_source_seq), training=False)\n",
        "  # Decoder\n",
        "  decoder_input = tf.constant([[fr_tokenizer.word_index['<start>']]], dtype=tf.int64)\n",
        "\n",
        "  output_words = []\n",
        "  output_seq = []\n",
        "  for i in range(max_ouput_size):\n",
        "    de_output, _,_ = model.decoder(decoder_input, en_output, training=False)\n",
        "    new_word = tf.expand_dims(tf.argmax(de_output, -1)[:, -1], axis=1)\n",
        "    output_seq.append(new_word.numpy()[0][0])\n",
        "    output_words.append(fr_tokenizer.index_word[output_seq[-1]])\n",
        "\n",
        "    # Add the predicted word to create a new input sequence\n",
        "    decoder_input = tf.concat((decoder_input, new_word), axis=-1)\n",
        "\n",
        "    # Check for end of sentence\n",
        "    if output_words[-1] == '<end>':\n",
        "        break\n",
        "\n",
        "  output_text = ' '.join(output_words)\n",
        "\n",
        "  return test_source_text, output_text\n",
        "\n",
        "class WarmupThenDecaySchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n",
        "    \"\"\" Learning schedule for training the Transformer\n",
        "    Attributes:\n",
        "        model_size: d_model in the paper (depth size of the model)\n",
        "        warmup_steps: number of warmup steps at the beginning\n",
        "    \"\"\"\n",
        "    def __init__(self, model_size, warmup_steps=4000):\n",
        "        super(WarmupThenDecaySchedule, self).__init__()\n",
        "\n",
        "        self.model_size = model_size\n",
        "        self.model_size = tf.cast(self.model_size, tf.float32)\n",
        "\n",
        "        self.warmup_steps = warmup_steps\n",
        "\n",
        "    def __call__(self, step):\n",
        "        step_term = tf.math.rsqrt(step)\n",
        "        warmup_term = step * (self.warmup_steps ** -1.5)\n",
        "\n",
        "        return tf.math.rsqrt(self.model_size) * tf.math.minimum(step_term, warmup_term)\n"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-NknH0v57meG"
      },
      "source": [
        "##### Train"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oViUZyOu7m3o",
        "outputId": "dcb2c39a-408f-4639-fd32-03784663d5f1"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "epochs = 20\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model = Transformer(vocabulary_size_en, vocabulary_size_fr, MODEL_SIZE, NUM_LAYERS, NUM_HEADS)\n",
        "\n",
        "# Optimizer\n",
        "lr = WarmupThenDecaySchedule(MODEL_SIZE)\n",
        "optimizer = keras.optimizers.Adam(lr,beta_1=0.9,beta_2=0.98,epsilon=1e-9)\n",
        "# Loss\n",
        "crossentropy = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "def custom_loss(targets, logits):\n",
        "  mask = tf.math.logical_not(tf.math.equal(targets, 0))\n",
        "  mask = tf.cast(mask, dtype=tf.int64)\n",
        "  loss = crossentropy(targets, logits, sample_weight=mask)\n",
        "  return loss\n",
        "\n",
        "# Callback\n",
        "class DisplayTranslation(keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs=None):\n",
        "    print(\"\\nTranslation:\")\n",
        "    source_text, output_text = translate_transformer(self.model)\n",
        "    print(source_text,\" => \", output_text)\n",
        "\n",
        "# Compile\n",
        "model.compile(optimizer=optimizer, loss=custom_loss)\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model.fit(\n",
        "        train_data, # train_data.take(20) while testing\n",
        "        epochs=epochs,\n",
        "        callbacks=[DisplayTranslation()],\n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "2609/2609 [==============================] - 226s 83ms/step - loss: 0.6558\n",
            "\n",
            "Translation:\n",
            "You raise a good point .  =>  tu ai trouve un bon . <end>\n",
            "Epoch 2/20\n",
            "2609/2609 [==============================] - 216s 83ms/step - loss: 0.3077\n",
            "\n",
            "Translation:\n",
            "I expected a better explanation .  =>  j attendais une explication . <end>\n",
            "Epoch 3/20\n",
            "2609/2609 [==============================] - 218s 83ms/step - loss: 0.2344\n",
            "\n",
            "Translation:\n",
            "This is an interesting book to read .  =>  c est un livre interessant a lire . <end>\n",
            "Epoch 4/20\n",
            "2609/2609 [==============================] - 217s 83ms/step - loss: 0.2062\n",
            "\n",
            "Translation:\n",
            "You have to be here at tomorrow afternoon .  =>  il vous faut pour l apres midi . <end>\n",
            "Epoch 5/20\n",
            "2609/2609 [==============================] - 217s 83ms/step - loss: 0.1912\n",
            "\n",
            "Translation:\n",
            "I think we can go faster .  =>  je peux aller plus vite . <end>\n",
            "Epoch 6/20\n",
            "2609/2609 [==============================] - 218s 84ms/step - loss: 0.1810\n",
            "\n",
            "Translation:\n",
            "I have a passport .  =>  j ai de passeport . <end>\n",
            "Epoch 7/20\n",
            "2609/2609 [==============================] - 218s 83ms/step - loss: 0.1735\n",
            "\n",
            "Translation:\n",
            "You can t handle this alone .  =>  tu n en dois pas par place . <end>\n",
            "Epoch 8/20\n",
            "2609/2609 [==============================] - 218s 83ms/step - loss: 0.1680\n",
            "\n",
            "Translation:\n",
            "I don t want to discuss it anymore .  =>  je ne veux plus en discuter . <end>\n",
            "Epoch 9/20\n",
            "2609/2609 [==============================] - 218s 84ms/step - loss: 0.1634\n",
            "\n",
            "Translation:\n",
            "I feel like I know you .  =>  j ai la connaissance . <end>\n",
            "Epoch 10/20\n",
            "2609/2609 [==============================] - 218s 84ms/step - loss: 0.1595\n",
            "\n",
            "Translation:\n",
            "Why would I want this ?  =>  pourquoi ? <end>\n",
            "Epoch 11/20\n",
            "2609/2609 [==============================] - 218s 84ms/step - loss: 0.1560\n",
            "\n",
            "Translation:\n",
            "They were sunbathing on the beach .  =>  ils ont de la plage . <end>\n",
            "Epoch 12/20\n",
            "2609/2609 [==============================] - 218s 84ms/step - loss: 0.1527\n",
            "\n",
            "Translation:\n",
            "I told them what I thought of their plan .  =>  je pensais a leur plan . <end>\n",
            "Epoch 13/20\n",
            "2609/2609 [==============================] - 219s 84ms/step - loss: 0.1499\n",
            "\n",
            "Translation:\n",
            "He snuck out to meet up with a girl .  =>  il a perdu la rencontrer un . <end>\n",
            "Epoch 14/20\n",
            "2609/2609 [==============================] - 219s 84ms/step - loss: 0.1475\n",
            "\n",
            "Translation:\n",
            "I m not afraid of work .  =>  je n ai pas peur du travail . <end>\n",
            "Epoch 15/20\n",
            "2609/2609 [==============================] - 217s 83ms/step - loss: 0.1454\n",
            "\n",
            "Translation:\n",
            "During the rush hours in Tokyo traffic is heavy .  =>  pendant les heures de circulation est lourd . <end>\n",
            "Epoch 16/20\n",
            "2609/2609 [==============================] - 218s 83ms/step - loss: 0.1434\n",
            "\n",
            "Translation:\n",
            "I am ready to follow you .  =>  je vous prepare . <end>\n",
            "Epoch 17/20\n",
            "2609/2609 [==============================] - 217s 83ms/step - loss: 0.1414\n",
            "\n",
            "Translation:\n",
            "I want to apologize to all of you for what just happened .  =>  je te veux tous pour ce qui s est passe . <end>\n",
            "Epoch 18/20\n",
            "2609/2609 [==============================] - 219s 84ms/step - loss: 0.1396\n",
            "\n",
            "Translation:\n",
            "The boss is very upset .  =>  le grande . <end>\n",
            "Epoch 19/20\n",
            "2609/2609 [==============================] - 220s 84ms/step - loss: 0.1378\n",
            "\n",
            "Translation:\n",
            "I want you to do this right .  =>  je vous en fais . <end>\n",
            "Epoch 20/20\n",
            "2609/2609 [==============================] - 219s 84ms/step - loss: 0.1366\n",
            "\n",
            "Translation:\n",
            "She insulted him .  =>  elle l insulte . <end>\n",
            "Training execution time (mins) 73.01690214474996\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 353
        },
        "id": "yWs6xlfrSR5a",
        "outputId": "3079252e-c139-4f4a-98c8-d87684abc44a"
      },
      "source": [
        "evaluate_save_model(model, test_en[:1000], test_fr_out[:1000],translate_transformer,\n",
        "                    training_results, execution_time, 0.0, epochs)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "{'BLEU-1': 0.3875468008231227, 'BLEU-2': 0.2976296405972586, 'BLEU-3': 0.23368150090528325, 'BLEU-4': 0.15462339899245026}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XxnvPIraph1b"
      },
      "source": [
        "##### Evaluate"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sYSr7hoUpiW1"
      },
      "source": [
        ""
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iBC1vaiY7ssr"
      },
      "source": [
        "### **Compare all Models**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qM_Bp7HN7tY2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "outputId": "17e6410c-6002-4410-b182-27219123fce9"
      },
      "source": [
        "models_store_path = \"models\"\n",
        "\n",
        "models_metrics_list = glob(models_store_path+\"/*_metrics.json\")\n",
        "\n",
        "all_models_metrics = []\n",
        "for mm_file in models_metrics_list:\n",
        "  with open(mm_file) as json_file:\n",
        "    model_metrics = json.load(json_file)\n",
        "    all_models_metrics.append(model_metrics)\n",
        "\n",
        "# Load metrics to dataframe\n",
        "view_metrics = pd.DataFrame(data=all_models_metrics)\n",
        "\n",
        "# Format columns\n",
        "view_metrics['trainable_parameters'] = view_metrics['trainable_parameters'].map('{:,.0f}'.format)\n",
        "view_metrics['execution_time'] = view_metrics['execution_time'].map('{:,.2f} mins'.format)\n",
        "view_metrics['loss'] = view_metrics['loss'].map('{:,.2f}'.format)\n",
        "view_metrics['BLEU-1'] = view_metrics['BLEU-1'].map('{:,.4f}'.format)\n",
        "view_metrics['BLEU-2'] = view_metrics['BLEU-2'].map('{:,.4f}'.format)\n",
        "view_metrics['BLEU-3'] = view_metrics['BLEU-3'].map('{:,.4f}'.format)\n",
        "view_metrics['BLEU-4'] = view_metrics['BLEU-4'].map('{:,.4f}'.format)\n",
        "\n",
        "# Filter columns\n",
        "view_metrics = view_metrics[[\"trainable_parameters\",\"execution_time\",\"loss\",\"BLEU-1\",\"BLEU-2\",\"BLEU-3\",\"BLEU-4\",\n",
        "                             \"learning_rate\",\"epochs\",\"name\"]]\n",
        "view_metrics = view_metrics.sort_values(by=['loss'],ascending=True)\n",
        "view_metrics.head()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trainable_parameters</th>\n",
              "      <th>execution_time</th>\n",
              "      <th>loss</th>\n",
              "      <th>BLEU-1</th>\n",
              "      <th>BLEU-2</th>\n",
              "      <th>BLEU-3</th>\n",
              "      <th>BLEU-4</th>\n",
              "      <th>learning_rate</th>\n",
              "      <th>epochs</th>\n",
              "      <th>name</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9,753,104</td>\n",
              "      <td>73.02 mins</td>\n",
              "      <td>0.13</td>\n",
              "      <td>0.3875</td>\n",
              "      <td>0.2976</td>\n",
              "      <td>0.2337</td>\n",
              "      <td>0.1546</td>\n",
              "      <td>0.00</td>\n",
              "      <td>20</td>\n",
              "      <td>transformer</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19,577,360</td>\n",
              "      <td>91.58 mins</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.2214</td>\n",
              "      <td>0.1472</td>\n",
              "      <td>0.0304</td>\n",
              "      <td>0.0345</td>\n",
              "      <td>0.01</td>\n",
              "      <td>20</td>\n",
              "      <td>sequence2_sequence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20,364,816</td>\n",
              "      <td>257.55 mins</td>\n",
              "      <td>0.99</td>\n",
              "      <td>0.2199</td>\n",
              "      <td>0.1511</td>\n",
              "      <td>0.0517</td>\n",
              "      <td>0.0123</td>\n",
              "      <td>0.01</td>\n",
              "      <td>20</td>\n",
              "      <td>sequence2_sequence_attention</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  trainable_parameters execution_time  ... epochs                          name\n",
              "1            9,753,104     73.02 mins  ...     20                   transformer\n",
              "0           19,577,360     91.58 mins  ...     20            sequence2_sequence\n",
              "2           20,364,816    257.55 mins  ...     20  sequence2_sequence_attention\n",
              "\n",
              "[3 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "77i1q-42752b"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bE-uqeIBMvUk"
      },
      "source": [
        "## **Mini BERT Language Model** <div id='bert'>\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXoYPaA3MzCS"
      },
      "source": [
        "### **Overview**\n",
        "\n",
        "In this section, we're going to be working with some text related to machine & deep learning. The data is a very small set of defintions pulled form wikipedia. The primary goal will be to understand BERT(Bidirectional Encoder Representations from Transformers) architecture.\n",
        "\n",
        "**The Task:** Build a masked language model using a simplified version of the BERT. \n",
        "\n",
        "\n",
        "**Language Model**: \n",
        "\n",
        "A model that understands language and how words appear in context to one another. The model is trained using unsupervised approaches such as next word prediction in a sentence or next sentence prediction.\n",
        "\n",
        "\n",
        "**Review BERT**:\n",
        "\n",
        "* Masked Language Model\n",
        "* Made up of only the Encoder with stacked transformer blocks\n",
        "* Bidirectional language\n",
        "* Good for fill in the blanks\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eyvvT0r-M1qT"
      },
      "source": [
        "### **Dataset**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o2UBJAYUM4cX"
      },
      "source": [
        "#### **Download Dataset**\n",
        "\n",
        "Download the datasets to colab."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "10OpEurrM63D",
        "outputId": "d803bac2-32d6-4a13-fbf2-dc24bd00b6b4"
      },
      "source": [
        "start_time = time.time()\n",
        "download_file(\"https://storage.googleapis.com/cs109b/nlp/deep_learning_terms.txt\", base_path=\"datasets\", extract=False)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Download execution time (mins)\",execution_time)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Download execution time (mins) 0.0040332555770874025\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bfTQ8cvVM_cf"
      },
      "source": [
        "#### **Load Data**\n",
        "\n",
        "* Read-in data as lists."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jh3Ab6Q_NAXU",
        "outputId": "ffa962fc-844d-4ea6-edc4-6fbcb83ed402"
      },
      "source": [
        "data_text_file = os.path.join(\"datasets\",\"deep_learning_terms.txt\")\n",
        "data_text = []\n",
        "with open(data_text_file) as file:\n",
        "  for line in file:\n",
        "    data_text.append(line)\n",
        "\n",
        "print(\"data_text len:\", len(data_text))\n",
        "\n",
        "# Get sentences\n",
        "sentences = []\n",
        "for text in data_text:\n",
        "  sentences.extend(sent_tokenize(text))\n",
        "\n",
        "# Add a few DEMO sentence\n",
        "sentences.append(\"pavlos taught positional encoding to shivas\")\n",
        "print(\"sentences len:\", len(sentences))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "data_text len: 20\n",
            "sentences len: 183\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C8w6Az3oNCeO"
      },
      "source": [
        "#### **View Text**\n",
        "\n",
        "Let's take a look at the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "id": "gvqawCFaNGUP",
        "outputId": "3cc24da7-84b7-405c-ca70-cf412d8f38d3"
      },
      "source": [
        "display(sentences[:10])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "['Deep learning also known as deep structured learning is part of a broader family of machine learning methods based on artificial neural networks with representation learning.',\n",
              " 'Learning can be supervised, semi-supervised or unsupervised.',\n",
              " 'Deep-learning architectures such as deep neural networks, deep belief networks, recurrent neural networks and convolutional neural networks have been applied to fields including computer vision, machine vision, speech recognition, natural language processing, audio recognition, social network filtering, machine translation, bioinformatics, drug design, medical image analysis, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.',\n",
              " 'Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems.',\n",
              " 'ANNs have various differences from biological brains.',\n",
              " 'Specifically, neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analogue.',\n",
              " 'The adjective deep in deep learning refers to the use of multiple layers in the network.',\n",
              " 'Early work showed that a linear perceptron cannot be a universal classifier, and then that a network with a nonpolynomial activation function with one hidden layer of unbounded width can on the other hand so be.',\n",
              " 'Deep learning is a modern variation which is concerned with an unbounded number of layers of bounded size, which permits practical application and optimized implementation, while retaining theoretical universality under mild conditions.',\n",
              " 'In deep learning the layers are also permitted to be heterogeneous and to deviate widely from biologically informed connectionist models, for the sake of efficiency, trainability and understandability, whence the structured part.']"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dv9tdJaNNLKc"
      },
      "source": [
        "### **Build Data Pipelines**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9giF7zxONMMr"
      },
      "source": [
        "#### **Text Vectorization**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "glHAE7TKNQ9Q",
        "outputId": "78ce50eb-e5d4-4b3d-9cff-3a74ad0dfb8c"
      },
      "source": [
        "MASK_TOKEN = \"[mask]\"\n",
        "max_len = max([len(x.split()) for x in sentences])\n",
        "print(\"max_len\",max_len)\n",
        "\n",
        "def standardize_text(input_text):\n",
        "  # Convert to lowercase\n",
        "  output_text = tf.strings.lower(input_text) \n",
        "  return tf.strings.regex_replace(\n",
        "        output_text, \"[%s]\" % re.escape(\"!#$%&'()*+,-./:;<=>?@\\^_`{|}~\"), \"\"\n",
        "    )\n",
        "\n",
        "text_data = tf.data.Dataset.from_tensor_slices(sentences)\n",
        "\n",
        "# Initialize Text Vectorizer\n",
        "text_vectorizer = TextVectorization(\n",
        "    standardize=standardize_text,\n",
        "    output_mode=\"int\",\n",
        "    output_sequence_length=max_len\n",
        ")\n",
        "\n",
        "# Generate Text Vector\n",
        "text_vectorizer.adapt(sentences)\n",
        "\n",
        "# Get Vocabulary\n",
        "vocabulary = text_vectorizer.get_vocabulary()\n",
        "vocabulary_size = len(vocabulary)\n",
        "# Add the mask token\n",
        "vocabulary = vocabulary[2 : vocabulary_size - 1] + [MASK_TOKEN]\n",
        "text_vectorizer.set_vocabulary(vocabulary)\n",
        "vocabulary = text_vectorizer.get_vocabulary()\n",
        "vocabulary_size = len(vocabulary)\n",
        "print(\"Vocabulary Size:\",vocabulary_size)\n",
        "print(vocabulary[-1])\n",
        "\n",
        "# Generate word index\n",
        "word_index = dict(zip(vocabulary, range(vocabulary_size)))\n",
        "index_word = dict(zip(range(vocabulary_size), vocabulary))\n",
        "\n",
        "print(\"vocabulary:\",len(vocabulary),vocabulary)\n",
        "print(\"word_index:\",word_index)\n",
        "\n",
        "# Get mask token id for masked language model\n",
        "mask_token_id = word_index[MASK_TOKEN]\n",
        "print(\"Mask token Id:\",mask_token_id)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "max_len 66\n",
            "Vocabulary Size: 1130\n",
            "[mask]\n",
            "vocabulary: 1130 ['', '[UNK]', 'the', 'of', 'a', 'to', 'and', 'is', 'in', 'learning', 'that', 'as', 'or', 'data', 'can', 'with', 'neural', 'networks', 'be', 'language', 'such', 'an', 'are', 'machine', 'image', 'from', 'for', 'network', 'this', 'model', 'on', 'layers', 'it', 'artificial', 'training', 'deep', 'by', 'also', 'recognition', 'layer', 'computer', 'used', 'natural', 'input', 'have', 'which', 'translation', 'not', 'neurons', 'where', 'process', 'human', 'between', 'words', 'vision', 'supervised', 'speech', 'processing', 'field', 'feature', 'systems', 'recurrent', 'output', 'nlg', 'more', 'its', 'intelligence', 'each', 'understanding', 'tasks', 'signal', 'representation', 'other', 'one', 'labeled', 'known', 'into', 'images', 'different', 'biological', 'algorithms', 'when', 'visual', 'unsupervised', 'they', 'than', 'segmentation', 'produce', 'models', 'lstm', 'information', 'but', 'use', 'through', 'system', 'set', 'sequences', 'semisupervised', 'rnns', 'only', 'multiple', 'methods', 'impulse', 'hidden', 'function', 'features', 'example', 'connected', 'called', 'based', 'algorithm', 'while', 'video', 'units', 'transformer', 'trained', 'time', 'text', 'similar', 'problem', 'probability', 'often', 'memory', 'many', 'include', 'has', 'examples', 'detection', 'connections', 'computers', 'classification', 'applications', 'allows', '3d', 'whereas', 'using', 'unlabeled', 'typically', 'transformers', 'then', 'them', 'supervision', 'study', 'statistical', 'specific', 'sequence', 'representations', 'phrases', 'perform', 'patterns', 'part', 'over', 'nlu', 'needs', 'naturallanguage', 'medical', 'may', 'make', 'long', 'like', 'inputs', 'graph', 'eg', 'documents', 'dnn', 'digital', 'composition', 'complex', 'cnns', 'class', 'applied', 'application', 'another', 'analysis', 'world', 'word', 'without', 'within', 'were', 'was', 'visible', 'usually', 'unlike', 'ul', 'threshold', 'there', 'theory', 'their', 'term', 'temporal', 'take', 'symbolic', 'structured', 'some', 'software', 'shortterm', 'series', 'same', 'referred', 'produces', 'processes', 'predictions', 'practical', 'pixels', 'order', 'object', 'nodes', 'nlp', 'neuron', 'needed', 'multilayer', 'most', 'modeling', 'mathematical', 'makes', 'machines', 'length', 'large', 'languages', 'label', 'inspired', 'infinite', 'if', 'humans', 'how', 'handwriting', 'given', 'generative', 'generate', 'general', 'gated', 'gate', 'forms', 'finite', 'feedforward', 'feedback', 'etc', 'entire', 'easier', 'dynamic', 'do', 'directed', 'decisions', 'dbn', 'convolutional', 'connection', 'concerned', 'compared', 'characteristics', 'certain', 'cell', 'brains', 'brain', 'both', 'been', 'at', 'anns', 'amount', 'all', 'ai', 'after', 'advantage', 'will', 'whole', 'well', 'weights', 'weight', 'viewed', 'various', 'variety', 'value', 'user', 'unsegmented', 'unseen', 'unrolled', 'unigram', 'under', 'unbounded', 'typical', 'two', 'turn', 'traditional', 'times', 'these', 'therefore', 'theoretical', 'tend', 'techniques', 'task', 'tagged', 'synapses', 'subfield', 'structure', 'storage', 'statistics', 'states', 'state', 'sound', 'solving', 'so', 'smaller', 'small', 'situations', 'single', 'since', 'shallow', 'sets', 'sequential', 'sentence', 'segments', 'seen', 'seeks', 'see', 'scientific', 'scene', 'rnn', 'results', 'result', 'restricted', 'respect', 'requires', 'require', 'reports', 'replaced', 'relatively', 'relative', 'related', 'regularization', 'region', 'recognize', 'receptive', 'real', 'pretrained', 'precisely', 'possible', 'performance', 'perceptrons', 'perceptron', 'pattern', 'particular', 'parallelization', 'pair', 'out', 'objects', 'numerical', 'number', 'nonlinear', 'next', 'n', 'much', 'mt', 'ml', 'means', 'mean', 'making', 'major', 'lstms', 'lowest', 'lower', 'linguistics', 'learns', 'learned', 'learn', 'leading', 'kernels', 'invariant', 'introduced', 'internal', 'interactive', 'instance', 'including', 'ideas', 'however', 'generation', 'generally', 'functions', 'fully', 'form', 'filters', 'filtering', 'fields', 'extraction', 'extract', 'expressed', 'exhibit', 'estimation', 'engineering', 'edges', 'during', 'domains', 'dog', 'dnns', 'discover', 'discipline', 'differences', 'dictionary', 'device', 'determining', 'define', 'deal', 'datasets', 'custom', 'cover', 'corpus', 'convolution', 'contours', 'context', 'content', 'consisting', 'connectivity', 'computed', 'computational', 'composed', 'components', 'complexity', 'common', 'classes', 'building', 'build', 'broad', 'belief', 'behavior', 'before', 'automatically', 'automate', 'autoencoders', 'audio', 'attempts', 'architectures', 'architecture', 'approach', 'applicable', 'any', 'ann', 'animal', 'analyzing', 'analyze', 'allow', 'acquisition', '“recurrent', 'yielded', 'writing', 'wreck', 'work', 'wikipedia', 'width', 'widely', 'wide', 'whether', 'whence', 'wellsuited', 'web', 'weather', 'weak', 'ways', 'way', 'wants', 'vs', 'views', 'videos', 'versions', 'vector', 'varying', 'variation', 'variables', 'variable', 'vanishing', 'values', 'vaguely', 'useful', 'usable', 'untagged', 'unsupervisedin', 'unknown', 'universality', 'universal', 'unit', 'unfeasible', 'undirected', 'understandability', 'understand', 'typology', 'types', 'type', 'trimming', 'tries', 'traversing', 'travel', 'transpilers', 'transmit', 'translators', 'translations', 'translate', 'transforms', 'transformations', 'transformation', 'transcribe', 'trainability', 'traffic', 'tracking', 'towards', 'thus', 'three', 'thought', 'those', 'things', 'theories', 'themselves', 'texture', 'textual', 'texttospeech', 'textbooks', 'terms', 'technology', 'technological', 'technique', 'taught', 'target', 'takes', 'tagging', 'symmetrical', 'surpassing', 'supervisory', 'summarization', 'sum', 'successfully', 'substitutions', 'substitution', 'subset', 'subnetworks', 'subnetwork', 'subdomains', 'strong', 'strictly', 'strength', 'stored', 'stimuli', 'step', 'static', 'starting', 'standardised', 'standard', 'stack', 'spectrum', 'specifically', 'special', 'sparsity', 'sparse', 'space', 'sounds', 'sometimes', 'something', 'solution', 'social', 'socalled', 'sl', 'skilled', 'size', 'simply', 'simplify', 'simpler', 'simple', 'similarly', 'significantly', 'signals', 'siann', 'showed', 'should', 'short', 'shivas', 'shift', 'sharedweight', 'share', 'servoing', 'serves', 'sent', 'sensor', 'sense', 'selforganization', 'selfconsistent', 'select', 'segment', 'score', 'scope', 'science', 'scenario', 'scanning', 'scanner', 'scan', 'scale', 'say', 'sample', 'sake', 'review', 'revealed', 'return', 'retrieval', 'retina', 'retaining', 'resulting', 'restoration', 'respond', 'resolve', 'resembles', 'research', 'replacing', 'replaces', 'render', 'remembers', 'relying', 'relationships', 'reinforcement', 'regulate', 'regularized', 'regions', 'refers', 'refer', 'reduced', 'reconstructions', 'reconstruction', 'reconstruct', 'recommender', 'receives', 'reasonable', 'realworld', 'readily', 'read', 'rbms', 'rbm', 'raw', 'rarely', 'rapidlygrowing', 'rapidly', 'randomly', 'quality', 'put', 'psychological', 'psycholinguists', 'provides', 'proved', 'protein', 'proposed', 'property', 'pronunciation', 'prone', 'programs', 'programming', 'programmed', 'program', 'profession', 'production', 'produced', 'processed', 'proceeds', 'procedure', 'problems[2]', 'problems', 'probabilities', 'probabilistically', 'probabilistic', 'prior', 'primitives', 'primarily', 'previous', 'preprocessing', 'prefer', 'predictive', 'predelections', 'potentially', 'potential', 'possibly', 'positional', 'pose', 'portion', 'polynomials', 'points', 'plastic', 'pixel', 'physics', 'physical', 'perspective', 'permitted', 'permits', 'performs', 'performing', 'perceives', 'pavlos', 'partofspeech', 'partitioning', 'particularly', 'partially', 'parsing', 'pairs', 'overlap', 'overfitting', 'organize', 'organizations', 'organization', 'organisms', 'optimized', 'optimize', 'optimization', 'optimal', 'optical', 'opposite', 'older', 'oil', 'observed', 'numerous', 'nuances', 'normalized', 'nonpolynomial', 'no', 'nns', 'nice', 'ngram', 'new', 'neuronal', 'network”', 'need', 'name', 'multivariate', 'multidimensional', 'motivated', 'motion', 'modern', 'modeled', 'mobile', 'mining', 'minimized', 'mind', 'mimicry', 'mimic', 'mild', 'might', 'mechanical', 'measured', 'meaningful', 'meaning', 'maximize', 'matrix', 'mathematically', 'material', 'matched', 'markov', 'marching', 'maps', 'mapping', 'manual', 'manipulation', 'machineaided', 'm', 'loss', 'loosely', 'loops', 'location', 'locate', 'living', 'little', 'linguistic', 'lines', 'linear', 'limiting', 'likelihood', 'levels', 'level', 'less', 'legal', 'led', 'leads', 'layered', 'layerbylayer', 'latter', 'latent', 'last', 'larger', 'lags', 'labels', 'labelled', 'labeling', 'knowledge', 'isolation', 'involves', 'involve', 'investigates', 'invariance', 'intrusion', 'intervention', 'intervals', 'interpolation', 'intermediate', 'interfaces', 'interest', 'interdisciplinary', 'interactions', 'intensity', 'intelligent', 'integrated', 'instances', 'inspection', 'insights', 'insensitivity', 'inputoutput', 'informed', 'infers', 'inferred', 'infeasible', 'inexpensive', 'inductive', 'individual', 'indiscriminately', 'indexing', 'independent', 'independence', 'increasing', 'increases', 'incorporates', 'improving', 'improvement', 'improve', 'important', 'implementation', 'imaging', 'imagery', 'idss', 'idioms', 'idea', 'humanreadable', 'huge', 'hope', 'highlevel', 'highdimensional', 'hierarchical', 'heterogeneous', 'hence', 'help', 'handling', 'handle', 'handengineered', 'hand', 'guidance', 'great', 'graphical', 'gradient', 'gpt', 'government', 'good', 'goals', 'goal', 'go', 'gets', 'geometry', 'generated', 'generalize', 'generalization', 'gates', 'gap', 'game', 'gain', 'further', 'functioning', 'fullyconnectedness', 'frequently', 'formulaic', 'former', 'formal', 'forget', 'forced', 'follows', 'focusing', 'focuses', 'fnn', 'flow', 'fish', 'first', 'finetuned', 'financial', 'fewer', 'fast', 'family', 'falls', 'factorization', 'fact', 'facilitates', 'extreme', 'extracted', 'extra', 'expression', 'express', 'exponentially', 'exploratory', 'explicitly', 'explicit', 'expert', 'experiment', 'experience', 'exhibits', 'examination', 'evidence', 'every', 'events', 'event', 'even', 'estimating', 'especially', 'error', 'erroneous', 'equivalent', 'environment', 'english', 'energybased', 'end', 'encountered', 'encoding', 'encoder', 'enabled', 'enable', 'emulate', 'emotionality', 'embossed', 'email', 'elicit', 'either', 'efficiency', 'effective', 'edge', 'early', 'duration', 'due', 'drug', 'domain', 'does', 'divergence', 'distribution', 'distributed', 'distinguish', 'distinction', 'displayed', 'display', 'disentangling', 'disambiguate', 'direct', 'difficult', 'deviate', 'development', 'developed', 'develop', 'determine', 'detectors', 'desired', 'designed', 'design', 'descriptions', 'described', 'describe', 'derived', 'depends', 'densities', 'demonstrated', 'delivers', 'delays', 'deeplearning', 'decreases', 'decompilers', 'deals', 'dbns', 'cyclic', 'customization', 'curves', 'current', 'cubes', 'crosses', 'create', 'crawl', 'counterparts', 'cost', 'cortical', 'cortex', 'correctly', 'convnet', 'conversations', 'conversation', 'conventional', 'convenient', 'controlled', 'control', 'contrastive', 'contrast', 'contextual', 'contents', 'contained', 'construction', 'constructed', 'constitute', 'consist', 'considered', 'considerations', 'considerably', 'considerable', 'consciousness', 'connectionist', 'connectedness', 'conjunction', 'confused', 'conditions', 'concept', 'computing', 'computeraided', 'computationally', 'compositional', 'component', 'comparable', 'compact', 'communication', 'commonly', 'combines', 'color', 'colloquially', 'collectively', 'collection', 'cognitive', 'code', 'cnn', 'clustering', 'closest', 'closely', 'classifying', 'classifier', 'chosen', 'choose', 'choice', 'chatbot', 'characteristic', 'character', 'change', 'chance', 'challenging', 'challenges', 'categorize', 'categories', 'cases', 'car', 'captures', 'capable', 'cannot', 'cameras', 'calculate', 'business', 'broader', 'breeds', 'breed', 'braincomputer', 'bounded', 'boundaries', 'boltzmann', 'board', 'blurbs', 'biologically', 'bioinformatics', 'bidirectional', 'biases', 'bias', 'better', 'bert', 'being', 'behind', 'beginning', 'become', 'because', 'beach', 'basic', 'bag', 'automated', 'assumption', 'associated', 'associate', 'assigns', 'assigning', 'assemble', 'arbitrary', 'approximate', 'appropriate', 'apply', 'anomaly', 'anomalies', 'animals', 'andor', 'analyzes', 'analytics', 'analogue', 'amounts', 'american', 'ambiguous', 'ambiguity', 'ambiguities', 'always', 'alternatively', 'alternative', 'along', 'alone', 'allowable', 'algorithmically', 'aid', 'agi', 'aggregated', 'aggregate', 'agents', 'agent', 'adjusts', 'adjective', 'adjacent', 'additional', 'acyclic', 'activation', 'actions', 'action', 'act', 'across', 'acronym', 'acquiring', 'acoustic', 'achieving', 'accurately', 'accuracy', 'above', 'about', 'abi', 'abbreviation', '2017', '[mask]']\n",
            "word_index: {'': 0, '[UNK]': 1, 'the': 2, 'of': 3, 'a': 4, 'to': 5, 'and': 6, 'is': 7, 'in': 8, 'learning': 9, 'that': 10, 'as': 11, 'or': 12, 'data': 13, 'can': 14, 'with': 15, 'neural': 16, 'networks': 17, 'be': 18, 'language': 19, 'such': 20, 'an': 21, 'are': 22, 'machine': 23, 'image': 24, 'from': 25, 'for': 26, 'network': 27, 'this': 28, 'model': 29, 'on': 30, 'layers': 31, 'it': 32, 'artificial': 33, 'training': 34, 'deep': 35, 'by': 36, 'also': 37, 'recognition': 38, 'layer': 39, 'computer': 40, 'used': 41, 'natural': 42, 'input': 43, 'have': 44, 'which': 45, 'translation': 46, 'not': 47, 'neurons': 48, 'where': 49, 'process': 50, 'human': 51, 'between': 52, 'words': 53, 'vision': 54, 'supervised': 55, 'speech': 56, 'processing': 57, 'field': 58, 'feature': 59, 'systems': 60, 'recurrent': 61, 'output': 62, 'nlg': 63, 'more': 64, 'its': 65, 'intelligence': 66, 'each': 67, 'understanding': 68, 'tasks': 69, 'signal': 70, 'representation': 71, 'other': 72, 'one': 73, 'labeled': 74, 'known': 75, 'into': 76, 'images': 77, 'different': 78, 'biological': 79, 'algorithms': 80, 'when': 81, 'visual': 82, 'unsupervised': 83, 'they': 84, 'than': 85, 'segmentation': 86, 'produce': 87, 'models': 88, 'lstm': 89, 'information': 90, 'but': 91, 'use': 92, 'through': 93, 'system': 94, 'set': 95, 'sequences': 96, 'semisupervised': 97, 'rnns': 98, 'only': 99, 'multiple': 100, 'methods': 101, 'impulse': 102, 'hidden': 103, 'function': 104, 'features': 105, 'example': 106, 'connected': 107, 'called': 108, 'based': 109, 'algorithm': 110, 'while': 111, 'video': 112, 'units': 113, 'transformer': 114, 'trained': 115, 'time': 116, 'text': 117, 'similar': 118, 'problem': 119, 'probability': 120, 'often': 121, 'memory': 122, 'many': 123, 'include': 124, 'has': 125, 'examples': 126, 'detection': 127, 'connections': 128, 'computers': 129, 'classification': 130, 'applications': 131, 'allows': 132, '3d': 133, 'whereas': 134, 'using': 135, 'unlabeled': 136, 'typically': 137, 'transformers': 138, 'then': 139, 'them': 140, 'supervision': 141, 'study': 142, 'statistical': 143, 'specific': 144, 'sequence': 145, 'representations': 146, 'phrases': 147, 'perform': 148, 'patterns': 149, 'part': 150, 'over': 151, 'nlu': 152, 'needs': 153, 'naturallanguage': 154, 'medical': 155, 'may': 156, 'make': 157, 'long': 158, 'like': 159, 'inputs': 160, 'graph': 161, 'eg': 162, 'documents': 163, 'dnn': 164, 'digital': 165, 'composition': 166, 'complex': 167, 'cnns': 168, 'class': 169, 'applied': 170, 'application': 171, 'another': 172, 'analysis': 173, 'world': 174, 'word': 175, 'without': 176, 'within': 177, 'were': 178, 'was': 179, 'visible': 180, 'usually': 181, 'unlike': 182, 'ul': 183, 'threshold': 184, 'there': 185, 'theory': 186, 'their': 187, 'term': 188, 'temporal': 189, 'take': 190, 'symbolic': 191, 'structured': 192, 'some': 193, 'software': 194, 'shortterm': 195, 'series': 196, 'same': 197, 'referred': 198, 'produces': 199, 'processes': 200, 'predictions': 201, 'practical': 202, 'pixels': 203, 'order': 204, 'object': 205, 'nodes': 206, 'nlp': 207, 'neuron': 208, 'needed': 209, 'multilayer': 210, 'most': 211, 'modeling': 212, 'mathematical': 213, 'makes': 214, 'machines': 215, 'length': 216, 'large': 217, 'languages': 218, 'label': 219, 'inspired': 220, 'infinite': 221, 'if': 222, 'humans': 223, 'how': 224, 'handwriting': 225, 'given': 226, 'generative': 227, 'generate': 228, 'general': 229, 'gated': 230, 'gate': 231, 'forms': 232, 'finite': 233, 'feedforward': 234, 'feedback': 235, 'etc': 236, 'entire': 237, 'easier': 238, 'dynamic': 239, 'do': 240, 'directed': 241, 'decisions': 242, 'dbn': 243, 'convolutional': 244, 'connection': 245, 'concerned': 246, 'compared': 247, 'characteristics': 248, 'certain': 249, 'cell': 250, 'brains': 251, 'brain': 252, 'both': 253, 'been': 254, 'at': 255, 'anns': 256, 'amount': 257, 'all': 258, 'ai': 259, 'after': 260, 'advantage': 261, 'will': 262, 'whole': 263, 'well': 264, 'weights': 265, 'weight': 266, 'viewed': 267, 'various': 268, 'variety': 269, 'value': 270, 'user': 271, 'unsegmented': 272, 'unseen': 273, 'unrolled': 274, 'unigram': 275, 'under': 276, 'unbounded': 277, 'typical': 278, 'two': 279, 'turn': 280, 'traditional': 281, 'times': 282, 'these': 283, 'therefore': 284, 'theoretical': 285, 'tend': 286, 'techniques': 287, 'task': 288, 'tagged': 289, 'synapses': 290, 'subfield': 291, 'structure': 292, 'storage': 293, 'statistics': 294, 'states': 295, 'state': 296, 'sound': 297, 'solving': 298, 'so': 299, 'smaller': 300, 'small': 301, 'situations': 302, 'single': 303, 'since': 304, 'shallow': 305, 'sets': 306, 'sequential': 307, 'sentence': 308, 'segments': 309, 'seen': 310, 'seeks': 311, 'see': 312, 'scientific': 313, 'scene': 314, 'rnn': 315, 'results': 316, 'result': 317, 'restricted': 318, 'respect': 319, 'requires': 320, 'require': 321, 'reports': 322, 'replaced': 323, 'relatively': 324, 'relative': 325, 'related': 326, 'regularization': 327, 'region': 328, 'recognize': 329, 'receptive': 330, 'real': 331, 'pretrained': 332, 'precisely': 333, 'possible': 334, 'performance': 335, 'perceptrons': 336, 'perceptron': 337, 'pattern': 338, 'particular': 339, 'parallelization': 340, 'pair': 341, 'out': 342, 'objects': 343, 'numerical': 344, 'number': 345, 'nonlinear': 346, 'next': 347, 'n': 348, 'much': 349, 'mt': 350, 'ml': 351, 'means': 352, 'mean': 353, 'making': 354, 'major': 355, 'lstms': 356, 'lowest': 357, 'lower': 358, 'linguistics': 359, 'learns': 360, 'learned': 361, 'learn': 362, 'leading': 363, 'kernels': 364, 'invariant': 365, 'introduced': 366, 'internal': 367, 'interactive': 368, 'instance': 369, 'including': 370, 'ideas': 371, 'however': 372, 'generation': 373, 'generally': 374, 'functions': 375, 'fully': 376, 'form': 377, 'filters': 378, 'filtering': 379, 'fields': 380, 'extraction': 381, 'extract': 382, 'expressed': 383, 'exhibit': 384, 'estimation': 385, 'engineering': 386, 'edges': 387, 'during': 388, 'domains': 389, 'dog': 390, 'dnns': 391, 'discover': 392, 'discipline': 393, 'differences': 394, 'dictionary': 395, 'device': 396, 'determining': 397, 'define': 398, 'deal': 399, 'datasets': 400, 'custom': 401, 'cover': 402, 'corpus': 403, 'convolution': 404, 'contours': 405, 'context': 406, 'content': 407, 'consisting': 408, 'connectivity': 409, 'computed': 410, 'computational': 411, 'composed': 412, 'components': 413, 'complexity': 414, 'common': 415, 'classes': 416, 'building': 417, 'build': 418, 'broad': 419, 'belief': 420, 'behavior': 421, 'before': 422, 'automatically': 423, 'automate': 424, 'autoencoders': 425, 'audio': 426, 'attempts': 427, 'architectures': 428, 'architecture': 429, 'approach': 430, 'applicable': 431, 'any': 432, 'ann': 433, 'animal': 434, 'analyzing': 435, 'analyze': 436, 'allow': 437, 'acquisition': 438, '“recurrent': 439, 'yielded': 440, 'writing': 441, 'wreck': 442, 'work': 443, 'wikipedia': 444, 'width': 445, 'widely': 446, 'wide': 447, 'whether': 448, 'whence': 449, 'wellsuited': 450, 'web': 451, 'weather': 452, 'weak': 453, 'ways': 454, 'way': 455, 'wants': 456, 'vs': 457, 'views': 458, 'videos': 459, 'versions': 460, 'vector': 461, 'varying': 462, 'variation': 463, 'variables': 464, 'variable': 465, 'vanishing': 466, 'values': 467, 'vaguely': 468, 'useful': 469, 'usable': 470, 'untagged': 471, 'unsupervisedin': 472, 'unknown': 473, 'universality': 474, 'universal': 475, 'unit': 476, 'unfeasible': 477, 'undirected': 478, 'understandability': 479, 'understand': 480, 'typology': 481, 'types': 482, 'type': 483, 'trimming': 484, 'tries': 485, 'traversing': 486, 'travel': 487, 'transpilers': 488, 'transmit': 489, 'translators': 490, 'translations': 491, 'translate': 492, 'transforms': 493, 'transformations': 494, 'transformation': 495, 'transcribe': 496, 'trainability': 497, 'traffic': 498, 'tracking': 499, 'towards': 500, 'thus': 501, 'three': 502, 'thought': 503, 'those': 504, 'things': 505, 'theories': 506, 'themselves': 507, 'texture': 508, 'textual': 509, 'texttospeech': 510, 'textbooks': 511, 'terms': 512, 'technology': 513, 'technological': 514, 'technique': 515, 'taught': 516, 'target': 517, 'takes': 518, 'tagging': 519, 'symmetrical': 520, 'surpassing': 521, 'supervisory': 522, 'summarization': 523, 'sum': 524, 'successfully': 525, 'substitutions': 526, 'substitution': 527, 'subset': 528, 'subnetworks': 529, 'subnetwork': 530, 'subdomains': 531, 'strong': 532, 'strictly': 533, 'strength': 534, 'stored': 535, 'stimuli': 536, 'step': 537, 'static': 538, 'starting': 539, 'standardised': 540, 'standard': 541, 'stack': 542, 'spectrum': 543, 'specifically': 544, 'special': 545, 'sparsity': 546, 'sparse': 547, 'space': 548, 'sounds': 549, 'sometimes': 550, 'something': 551, 'solution': 552, 'social': 553, 'socalled': 554, 'sl': 555, 'skilled': 556, 'size': 557, 'simply': 558, 'simplify': 559, 'simpler': 560, 'simple': 561, 'similarly': 562, 'significantly': 563, 'signals': 564, 'siann': 565, 'showed': 566, 'should': 567, 'short': 568, 'shivas': 569, 'shift': 570, 'sharedweight': 571, 'share': 572, 'servoing': 573, 'serves': 574, 'sent': 575, 'sensor': 576, 'sense': 577, 'selforganization': 578, 'selfconsistent': 579, 'select': 580, 'segment': 581, 'score': 582, 'scope': 583, 'science': 584, 'scenario': 585, 'scanning': 586, 'scanner': 587, 'scan': 588, 'scale': 589, 'say': 590, 'sample': 591, 'sake': 592, 'review': 593, 'revealed': 594, 'return': 595, 'retrieval': 596, 'retina': 597, 'retaining': 598, 'resulting': 599, 'restoration': 600, 'respond': 601, 'resolve': 602, 'resembles': 603, 'research': 604, 'replacing': 605, 'replaces': 606, 'render': 607, 'remembers': 608, 'relying': 609, 'relationships': 610, 'reinforcement': 611, 'regulate': 612, 'regularized': 613, 'regions': 614, 'refers': 615, 'refer': 616, 'reduced': 617, 'reconstructions': 618, 'reconstruction': 619, 'reconstruct': 620, 'recommender': 621, 'receives': 622, 'reasonable': 623, 'realworld': 624, 'readily': 625, 'read': 626, 'rbms': 627, 'rbm': 628, 'raw': 629, 'rarely': 630, 'rapidlygrowing': 631, 'rapidly': 632, 'randomly': 633, 'quality': 634, 'put': 635, 'psychological': 636, 'psycholinguists': 637, 'provides': 638, 'proved': 639, 'protein': 640, 'proposed': 641, 'property': 642, 'pronunciation': 643, 'prone': 644, 'programs': 645, 'programming': 646, 'programmed': 647, 'program': 648, 'profession': 649, 'production': 650, 'produced': 651, 'processed': 652, 'proceeds': 653, 'procedure': 654, 'problems[2]': 655, 'problems': 656, 'probabilities': 657, 'probabilistically': 658, 'probabilistic': 659, 'prior': 660, 'primitives': 661, 'primarily': 662, 'previous': 663, 'preprocessing': 664, 'prefer': 665, 'predictive': 666, 'predelections': 667, 'potentially': 668, 'potential': 669, 'possibly': 670, 'positional': 671, 'pose': 672, 'portion': 673, 'polynomials': 674, 'points': 675, 'plastic': 676, 'pixel': 677, 'physics': 678, 'physical': 679, 'perspective': 680, 'permitted': 681, 'permits': 682, 'performs': 683, 'performing': 684, 'perceives': 685, 'pavlos': 686, 'partofspeech': 687, 'partitioning': 688, 'particularly': 689, 'partially': 690, 'parsing': 691, 'pairs': 692, 'overlap': 693, 'overfitting': 694, 'organize': 695, 'organizations': 696, 'organization': 697, 'organisms': 698, 'optimized': 699, 'optimize': 700, 'optimization': 701, 'optimal': 702, 'optical': 703, 'opposite': 704, 'older': 705, 'oil': 706, 'observed': 707, 'numerous': 708, 'nuances': 709, 'normalized': 710, 'nonpolynomial': 711, 'no': 712, 'nns': 713, 'nice': 714, 'ngram': 715, 'new': 716, 'neuronal': 717, 'network”': 718, 'need': 719, 'name': 720, 'multivariate': 721, 'multidimensional': 722, 'motivated': 723, 'motion': 724, 'modern': 725, 'modeled': 726, 'mobile': 727, 'mining': 728, 'minimized': 729, 'mind': 730, 'mimicry': 731, 'mimic': 732, 'mild': 733, 'might': 734, 'mechanical': 735, 'measured': 736, 'meaningful': 737, 'meaning': 738, 'maximize': 739, 'matrix': 740, 'mathematically': 741, 'material': 742, 'matched': 743, 'markov': 744, 'marching': 745, 'maps': 746, 'mapping': 747, 'manual': 748, 'manipulation': 749, 'machineaided': 750, 'm': 751, 'loss': 752, 'loosely': 753, 'loops': 754, 'location': 755, 'locate': 756, 'living': 757, 'little': 758, 'linguistic': 759, 'lines': 760, 'linear': 761, 'limiting': 762, 'likelihood': 763, 'levels': 764, 'level': 765, 'less': 766, 'legal': 767, 'led': 768, 'leads': 769, 'layered': 770, 'layerbylayer': 771, 'latter': 772, 'latent': 773, 'last': 774, 'larger': 775, 'lags': 776, 'labels': 777, 'labelled': 778, 'labeling': 779, 'knowledge': 780, 'isolation': 781, 'involves': 782, 'involve': 783, 'investigates': 784, 'invariance': 785, 'intrusion': 786, 'intervention': 787, 'intervals': 788, 'interpolation': 789, 'intermediate': 790, 'interfaces': 791, 'interest': 792, 'interdisciplinary': 793, 'interactions': 794, 'intensity': 795, 'intelligent': 796, 'integrated': 797, 'instances': 798, 'inspection': 799, 'insights': 800, 'insensitivity': 801, 'inputoutput': 802, 'informed': 803, 'infers': 804, 'inferred': 805, 'infeasible': 806, 'inexpensive': 807, 'inductive': 808, 'individual': 809, 'indiscriminately': 810, 'indexing': 811, 'independent': 812, 'independence': 813, 'increasing': 814, 'increases': 815, 'incorporates': 816, 'improving': 817, 'improvement': 818, 'improve': 819, 'important': 820, 'implementation': 821, 'imaging': 822, 'imagery': 823, 'idss': 824, 'idioms': 825, 'idea': 826, 'humanreadable': 827, 'huge': 828, 'hope': 829, 'highlevel': 830, 'highdimensional': 831, 'hierarchical': 832, 'heterogeneous': 833, 'hence': 834, 'help': 835, 'handling': 836, 'handle': 837, 'handengineered': 838, 'hand': 839, 'guidance': 840, 'great': 841, 'graphical': 842, 'gradient': 843, 'gpt': 844, 'government': 845, 'good': 846, 'goals': 847, 'goal': 848, 'go': 849, 'gets': 850, 'geometry': 851, 'generated': 852, 'generalize': 853, 'generalization': 854, 'gates': 855, 'gap': 856, 'game': 857, 'gain': 858, 'further': 859, 'functioning': 860, 'fullyconnectedness': 861, 'frequently': 862, 'formulaic': 863, 'former': 864, 'formal': 865, 'forget': 866, 'forced': 867, 'follows': 868, 'focusing': 869, 'focuses': 870, 'fnn': 871, 'flow': 872, 'fish': 873, 'first': 874, 'finetuned': 875, 'financial': 876, 'fewer': 877, 'fast': 878, 'family': 879, 'falls': 880, 'factorization': 881, 'fact': 882, 'facilitates': 883, 'extreme': 884, 'extracted': 885, 'extra': 886, 'expression': 887, 'express': 888, 'exponentially': 889, 'exploratory': 890, 'explicitly': 891, 'explicit': 892, 'expert': 893, 'experiment': 894, 'experience': 895, 'exhibits': 896, 'examination': 897, 'evidence': 898, 'every': 899, 'events': 900, 'event': 901, 'even': 902, 'estimating': 903, 'especially': 904, 'error': 905, 'erroneous': 906, 'equivalent': 907, 'environment': 908, 'english': 909, 'energybased': 910, 'end': 911, 'encountered': 912, 'encoding': 913, 'encoder': 914, 'enabled': 915, 'enable': 916, 'emulate': 917, 'emotionality': 918, 'embossed': 919, 'email': 920, 'elicit': 921, 'either': 922, 'efficiency': 923, 'effective': 924, 'edge': 925, 'early': 926, 'duration': 927, 'due': 928, 'drug': 929, 'domain': 930, 'does': 931, 'divergence': 932, 'distribution': 933, 'distributed': 934, 'distinguish': 935, 'distinction': 936, 'displayed': 937, 'display': 938, 'disentangling': 939, 'disambiguate': 940, 'direct': 941, 'difficult': 942, 'deviate': 943, 'development': 944, 'developed': 945, 'develop': 946, 'determine': 947, 'detectors': 948, 'desired': 949, 'designed': 950, 'design': 951, 'descriptions': 952, 'described': 953, 'describe': 954, 'derived': 955, 'depends': 956, 'densities': 957, 'demonstrated': 958, 'delivers': 959, 'delays': 960, 'deeplearning': 961, 'decreases': 962, 'decompilers': 963, 'deals': 964, 'dbns': 965, 'cyclic': 966, 'customization': 967, 'curves': 968, 'current': 969, 'cubes': 970, 'crosses': 971, 'create': 972, 'crawl': 973, 'counterparts': 974, 'cost': 975, 'cortical': 976, 'cortex': 977, 'correctly': 978, 'convnet': 979, 'conversations': 980, 'conversation': 981, 'conventional': 982, 'convenient': 983, 'controlled': 984, 'control': 985, 'contrastive': 986, 'contrast': 987, 'contextual': 988, 'contents': 989, 'contained': 990, 'construction': 991, 'constructed': 992, 'constitute': 993, 'consist': 994, 'considered': 995, 'considerations': 996, 'considerably': 997, 'considerable': 998, 'consciousness': 999, 'connectionist': 1000, 'connectedness': 1001, 'conjunction': 1002, 'confused': 1003, 'conditions': 1004, 'concept': 1005, 'computing': 1006, 'computeraided': 1007, 'computationally': 1008, 'compositional': 1009, 'component': 1010, 'comparable': 1011, 'compact': 1012, 'communication': 1013, 'commonly': 1014, 'combines': 1015, 'color': 1016, 'colloquially': 1017, 'collectively': 1018, 'collection': 1019, 'cognitive': 1020, 'code': 1021, 'cnn': 1022, 'clustering': 1023, 'closest': 1024, 'closely': 1025, 'classifying': 1026, 'classifier': 1027, 'chosen': 1028, 'choose': 1029, 'choice': 1030, 'chatbot': 1031, 'characteristic': 1032, 'character': 1033, 'change': 1034, 'chance': 1035, 'challenging': 1036, 'challenges': 1037, 'categorize': 1038, 'categories': 1039, 'cases': 1040, 'car': 1041, 'captures': 1042, 'capable': 1043, 'cannot': 1044, 'cameras': 1045, 'calculate': 1046, 'business': 1047, 'broader': 1048, 'breeds': 1049, 'breed': 1050, 'braincomputer': 1051, 'bounded': 1052, 'boundaries': 1053, 'boltzmann': 1054, 'board': 1055, 'blurbs': 1056, 'biologically': 1057, 'bioinformatics': 1058, 'bidirectional': 1059, 'biases': 1060, 'bias': 1061, 'better': 1062, 'bert': 1063, 'being': 1064, 'behind': 1065, 'beginning': 1066, 'become': 1067, 'because': 1068, 'beach': 1069, 'basic': 1070, 'bag': 1071, 'automated': 1072, 'assumption': 1073, 'associated': 1074, 'associate': 1075, 'assigns': 1076, 'assigning': 1077, 'assemble': 1078, 'arbitrary': 1079, 'approximate': 1080, 'appropriate': 1081, 'apply': 1082, 'anomaly': 1083, 'anomalies': 1084, 'animals': 1085, 'andor': 1086, 'analyzes': 1087, 'analytics': 1088, 'analogue': 1089, 'amounts': 1090, 'american': 1091, 'ambiguous': 1092, 'ambiguity': 1093, 'ambiguities': 1094, 'always': 1095, 'alternatively': 1096, 'alternative': 1097, 'along': 1098, 'alone': 1099, 'allowable': 1100, 'algorithmically': 1101, 'aid': 1102, 'agi': 1103, 'aggregated': 1104, 'aggregate': 1105, 'agents': 1106, 'agent': 1107, 'adjusts': 1108, 'adjective': 1109, 'adjacent': 1110, 'additional': 1111, 'acyclic': 1112, 'activation': 1113, 'actions': 1114, 'action': 1115, 'act': 1116, 'across': 1117, 'acronym': 1118, 'acquiring': 1119, 'acoustic': 1120, 'achieving': 1121, 'accurately': 1122, 'accuracy': 1123, 'above': 1124, 'about': 1125, 'abi': 1126, 'abbreviation': 1127, '2017': 1128, '[mask]': 1129}\n",
            "Mask token Id: 1129\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TNNjXuOgNUxo",
        "outputId": "f8911ed4-e21c-41ec-c425-9a3ce7e09d67"
      },
      "source": [
        "# 1) Convert input text to tokens\n",
        "all_data_tokens = text_vectorizer(sentences)\n",
        "print(\"Input text:\\n\")\n",
        "print(sentences[0])\n",
        "print(sentences[1])\n",
        "print(sentences[3])\n",
        "print(\"all_data_tokens shape:\",all_data_tokens.shape)\n",
        "print(\"Tokenized text:\", all_data_tokens[:5,:20])"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Input text:\n",
            "\n",
            "Deep learning also known as deep structured learning is part of a broader family of machine learning methods based on artificial neural networks with representation learning.\n",
            "Learning can be supervised, semi-supervised or unsupervised.\n",
            "Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems.\n",
            "all_data_tokens shape: (183, 66)\n",
            "Tokenized text: tf.Tensor(\n",
            "[[  35    9   37   75   11   35  192    9    7  150    3    4 1048  879\n",
            "     3   23    9  101  109   30]\n",
            " [   9   14   18   55   97   12   83    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0]\n",
            " [ 961  428   20   11   35   16   17   35  420   17   61   16   17    6\n",
            "   244   16   17   44  254  170]\n",
            " [  33   16   17  256  178  220   36   90   57    6  934 1013  206    8\n",
            "    79   60    0    0    0    0]\n",
            " [ 256   44  268  394   25   79  251    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0]], shape=(5, 20), dtype=int64)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xf1Luc53NYD5"
      },
      "source": [
        "#### **Generate Training Data**\n",
        "\n",
        "For the training we need inputs and lables but we only have input texts. In lecture we learnt that language models are trained in a smei supervised way where we generate inputs and labels from the input text. \n",
        "\n",
        "<br>\n",
        "\n",
        "To generate inputs and lables for training we will mask random words from the input text. Then our labels will be the masked text. The model will be trained to predict the masked word"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ki3-sDuSNb0T",
        "outputId": "599aef3b-cd60-445c-cb12-705520f7efd4"
      },
      "source": [
        "# Since we have a very small dataset, we will just replicate the data\n",
        "encoded_texts = all_data_tokens.numpy()\n",
        "print(encoded_texts.shape)\n",
        "encoded_texts = np.vstack([encoded_texts]*50)\n",
        "print(encoded_texts.shape)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(183, 66)\n",
            "(9150, 66)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "50k84FwINfGx",
        "outputId": "bebb2f32-a34a-4545-dc03-eb7f86f7ae9c"
      },
      "source": [
        "# 15% BERT masking\n",
        "inp_mask = np.random.rand(*encoded_texts.shape) < 0.15\n",
        "print(\"inp_mask:\",inp_mask.shape)\n",
        "#print(\"inp_mask:\",inp_mask[0,:25])\n",
        "\n",
        "# Exclude masking special tokens\n",
        "inp_mask[encoded_texts <= 2] = False\n",
        "\n",
        "# Set targets to -1 by default, it means ignore\n",
        "labels = -1 * np.ones(encoded_texts.shape, dtype=int)\n",
        "\n",
        "# Set labels for masked tokens\n",
        "labels[inp_mask] = encoded_texts[inp_mask]\n",
        "\n",
        "# Prepare input\n",
        "encoded_texts_masked = np.copy(encoded_texts)\n",
        "\n",
        "# Set input to [MASK] which is the last token for the 90% of tokens\n",
        "# This means leaving 10% unchanged\n",
        "inp_mask_2mask = inp_mask & (np.random.rand(*encoded_texts.shape) < 0.90)\n",
        "encoded_texts_masked[\n",
        "    inp_mask_2mask\n",
        "] = mask_token_id  # mask token is the last in the dict\n",
        "\n",
        "# Set 10% to a random token\n",
        "inp_mask_2random = inp_mask_2mask & (np.random.rand(*encoded_texts.shape) < 1 / 9)\n",
        "encoded_texts_masked[inp_mask_2random] = np.random.randint(\n",
        "    3, mask_token_id, inp_mask_2random.sum()\n",
        ")\n",
        "\n",
        "# Prepare sample_weights to pass to .fit() method\n",
        "sample_weights = np.ones(labels.shape)\n",
        "sample_weights[labels == -1] = 0\n",
        "\n",
        "# y_labels would be same as encoded_texts i.e input tokens\n",
        "y_labels = np.copy(encoded_texts)\n",
        "\n",
        "print(\"encoded_texts_masked:\",encoded_texts_masked.shape)\n",
        "print(encoded_texts_masked[:5,:10])\n",
        "print(\"y_labels:\",y_labels.shape)\n",
        "print(y_labels[:5,:10])\n",
        "print(\"sample_weights:\",sample_weights.shape)\n",
        "print(sample_weights[:5,:10])"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "inp_mask: (9150, 66)\n",
            "encoded_texts_masked: (9150, 66)\n",
            "[[  35    9   37   75   11   35  192    9    7  150]\n",
            " [   9   14 1129   55   97   12 1129    0    0    0]\n",
            " [ 961  428   20   11   35 1129   17   35  420   17]\n",
            " [1129   16   17  256 1129  220   36   90   57    6]\n",
            " [ 256   44 1129  394   25   79  251    0    0    0]]\n",
            "y_labels: (9150, 66)\n",
            "[[ 35   9  37  75  11  35 192   9   7 150]\n",
            " [  9  14  18  55  97  12  83   0   0   0]\n",
            " [961 428  20  11  35  16  17  35 420  17]\n",
            " [ 33  16  17 256 178 220  36  90  57   6]\n",
            " [256  44 268 394  25  79 251   0   0   0]]\n",
            "sample_weights: (9150, 66)\n",
            "[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 1. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n",
            " [1. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n",
            " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uSqYIavhNjEo"
      },
      "source": [
        "#### **Create TF Datasets**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fg-0hgLBNjop",
        "outputId": "a953778a-90d0-4e32-df7c-1b11869c6ae4"
      },
      "source": [
        "BATCH_SIZE = 64\n",
        "TRAIN_SHUFFLE_BUFFER_SIZE = encoded_texts.shape[0]\n",
        "\n",
        "# Create TF Dataset\n",
        "train_data = tf.data.Dataset.from_tensor_slices((encoded_texts_masked, y_labels, sample_weights))\n",
        "\n",
        "#############\n",
        "# Train data\n",
        "#############\n",
        "train_data = train_data.shuffle(buffer_size=TRAIN_SHUFFLE_BUFFER_SIZE)\n",
        "train_data = train_data.batch(BATCH_SIZE)\n",
        "train_data = train_data.prefetch(buffer_size=AUTOTUNE)\n",
        "\n",
        "print(\"train_data\",train_data)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "train_data <PrefetchDataset shapes: ((None, 66), (None, 66), (None, 66)), types: (tf.int64, tf.int64, tf.float64)>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jocnJ4pzNm2V"
      },
      "source": [
        "### **Mini BERT**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rOWFUkAFNn7T"
      },
      "source": [
        "#### **Positional Encoding**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b_z_izpyNqdA"
      },
      "source": [
        "def generate_positional_encoding(max_length, model_size):\n",
        "    pos_enc = np.array(\n",
        "        [\n",
        "            [pos / np.power(10000, 2 * (j // 2) / model_size) for j in range(model_size)]\n",
        "            if pos != 0\n",
        "            else np.zeros(model_size)\n",
        "            for pos in range(max_length)\n",
        "        ]\n",
        "    )\n",
        "    pos_enc[1:, 0::2] = np.sin(pos_enc[1:, 0::2])  # dim 2i\n",
        "    pos_enc[1:, 1::2] = np.cos(pos_enc[1:, 1::2])  # dim 2i+1\n",
        "    return pos_enc"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_WX80B8kNr3f"
      },
      "source": [
        "#### **Transformer Encoder Block: Break Out Room  Activity🎊🎉**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ryzR5hFWryLn"
      },
      "source": [
        "In this activity you will build out a Transfomer Encoder block from scratch. We will use this as the building block for our mini BERT model when you finish.\n",
        "\n",
        "<img src=\"https://storage.googleapis.com/public_colab_images/nlp/transformer_encoder_block.svg\"/>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jOmV4hc9NttR"
      },
      "source": [
        "def transfomer_encoder_block(query, key, value, embedding_dim, num_heads, ff_dim):\n",
        "\n",
        "  # 1) Add a keras.layers.MultiHeadAttention Layer\n",
        "  # Set num_heads\n",
        "  # Set key_dim = embedding_dim // num_heads\n",
        "  # Pass in the (query, key, value) to this layer to get the attention_output\n",
        "  attention_output = ...\n",
        "\n",
        "  # 2) Add Dropout(0.1) to the attention_output\n",
        "  attention_output = ...\n",
        "\n",
        "  # 3) Normalization + Residual Connection\n",
        "  # Add a keras.layers.LayerNormalization with epsilon=1e-6\n",
        "  # Pass in the query and attention_output to the LayerNormalization\n",
        "  attention_output = ...\n",
        "\n",
        "  # 4) Feedforward Layer\n",
        "  # Add a Dense layer with size ff_dim and activation=\"relu\"\n",
        "  # Pass in attention_output to get the ffn_output\n",
        "  # Add another Dense layer with size of embedding_dim and pass in the ffn_output\n",
        "  ffn_output = ...\n",
        "\n",
        "  # 5) Add Dropout(0.1) to the ffn_output\n",
        "  ffn_output = ...\n",
        "\n",
        "  # 6) Normalization + Residual Connection\n",
        "  # Add a keras.layers.LayerNormalization with epsilon=1e-6\n",
        "  # Pass in the attention_output and ffn_output to the LayerNormalization to get the final sequence_output\n",
        "  sequence_output = ...\n",
        "\n",
        "\n",
        "  return sequence_output"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dvo124IepUXA"
      },
      "source": [
        "##### Solution"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P-fg7Co6pjKt"
      },
      "source": [
        "###### Code"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tq7mNyf8pWr2"
      },
      "source": [
        "```\n",
        "def transfomer_encoder_block(query, key, value, embedding_dim, num_heads, ff_dim):\n",
        "    # MultiHeadAttention Layer\n",
        "    attention_output = keras.layers.MultiHeadAttention(num_heads=num_heads,\n",
        "                                                       key_dim=embedding_dim // num_heads)(query, key, value)\n",
        "    # Normalization + Residual Connection\n",
        "    attention_output = keras.layers.Dropout(0.1)(attention_output)\n",
        "    attention_output = keras.layers.LayerNormalization(epsilon=1e-6)(query + attention_output)\n",
        "\n",
        "    # Feedforward Layer\n",
        "    ffn_output = keras.layers.Dense(units=ff_dim, activation=\"relu\")(attention_output)\n",
        "    ffn_output = keras.layers.Dense(units=embedding_dim)(ffn_output)\n",
        "    ffn_output = keras.layers.Dropout(0.1)(ffn_output)\n",
        "\n",
        "    # Normalization + Residual Connection \n",
        "    sequence_output = keras.layers.LayerNormalization(epsilon=1e-6)(attention_output + ffn_output)\n",
        "    return sequence_output\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E8f3z6DONvWe"
      },
      "source": [
        "#### **Masked Language Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "98LwWdAwNxFk"
      },
      "source": [
        "# Loss Tracker\n",
        "loss_tracker = tf.keras.metrics.Mean(name=\"loss\")\n",
        "loss_fn = keras.losses.SparseCategoricalCrossentropy(reduction=tf.keras.losses.Reduction.NONE)\n",
        "\n",
        "class MaskedLanguageModel(keras.Model):\n",
        "\n",
        "  def train_step(self, inputs):\n",
        "      if len(inputs) == 3:\n",
        "          features, labels, sample_weight = inputs\n",
        "      else:\n",
        "          features, labels = inputs\n",
        "          sample_weight = None\n",
        "\n",
        "      with tf.GradientTape() as tape:\n",
        "          predictions = self(features, training=True)\n",
        "          loss = loss_fn(labels, predictions[0], sample_weight=sample_weight)\n",
        "\n",
        "      # Compute gradients\n",
        "      trainable_vars = self.trainable_variables\n",
        "      gradients = tape.gradient(loss, trainable_vars)\n",
        "\n",
        "      # Update weights\n",
        "      self.optimizer.apply_gradients(zip(gradients, trainable_vars))\n",
        "\n",
        "      # Compute our own metrics\n",
        "      loss_tracker.update_state(loss, sample_weight=sample_weight)\n",
        "\n",
        "      # Return a dict mapping metric names to current value\n",
        "      return {\"loss\": loss_tracker.result()}\n",
        "\n",
        "  @property\n",
        "  def metrics(self):\n",
        "      return [loss_tracker]"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AbmZXKb5N12K"
      },
      "source": [
        "def create_masked_language_bert_model(vocab_size,embedding_dim, sequence_length,num_layers, num_heads,ff_dim, enable_pe=True):\n",
        "  # Model input\n",
        "  model_input = keras.layers.Input(shape=(sequence_length), dtype=tf.int64)\n",
        "\n",
        "  embeddings = keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim)(model_input)\n",
        "  if enable_pe:\n",
        "    embeddings = embeddings + generate_positional_encoding(sequence_length,embedding_dim)\n",
        "  \n",
        "  encoder_output = embeddings\n",
        "  for i in range(num_layers):\n",
        "      encoder_output = transfomer_encoder_block(encoder_output, encoder_output, encoder_output, embedding_dim,num_heads, ff_dim)\n",
        "\n",
        "  # Output Layer\n",
        "  output = keras.layers.Dense(units=vocab_size, activation=\"softmax\")(encoder_output)\n",
        "\n",
        "  # Create Model\n",
        "  model = MaskedLanguageModel(inputs=[model_input], outputs=[output,encoder_output], name=\"masked_bert_model\")\n",
        "\n",
        "  return model"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kZqN_mNFOAFw"
      },
      "source": [
        "### **Train with Positional Encoding**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nFNvMotbOAlH",
        "outputId": "91a2fcd2-fb76-4dfc-b145-c0cd787eea10"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "epochs = 10\n",
        "learning_rate = 0.001\n",
        "embedding_dim = 256\n",
        "sequence_length = max_len\n",
        "num_layers = 2\n",
        "num_heads = 8\n",
        "ff_dim = 256\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model_w_pe = create_masked_language_bert_model(vocabulary_size,embedding_dim, sequence_length,num_layers,num_heads,ff_dim, enable_pe=True)\n",
        "\n",
        "# Print the model architecture\n",
        "print(model_w_pe.summary())\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(learning_rate=learning_rate)\n",
        "\n",
        "# Compile\n",
        "model_w_pe.compile(optimizer=optimizer)\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model_w_pe.fit(\n",
        "        train_data,\n",
        "        epochs=epochs,\n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"masked_bert_model\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_1 (InputLayer)            [(None, 66)]         0                                            \n",
            "__________________________________________________________________________________________________\n",
            "embedding (Embedding)           (None, 66, 256)      289280      input_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.add (TFOpLambd (None, 66, 256)      0           embedding[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "multi_head_attention (MultiHead (None, 66, 256)      263168      tf.__operators__.add[0][0]       \n",
            "                                                                 tf.__operators__.add[0][0]       \n",
            "                                                                 tf.__operators__.add[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "dropout (Dropout)               (None, 66, 256)      0           multi_head_attention[0][0]       \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.add_1 (TFOpLam (None, 66, 256)      0           tf.__operators__.add[0][0]       \n",
            "                                                                 dropout[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "layer_normalization (LayerNorma (None, 66, 256)      512         tf.__operators__.add_1[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "dense (Dense)                   (None, 66, 256)      65792       layer_normalization[0][0]        \n",
            "__________________________________________________________________________________________________\n",
            "dense_1 (Dense)                 (None, 66, 256)      65792       dense[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "dropout_1 (Dropout)             (None, 66, 256)      0           dense_1[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.add_2 (TFOpLam (None, 66, 256)      0           layer_normalization[0][0]        \n",
            "                                                                 dropout_1[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "layer_normalization_1 (LayerNor (None, 66, 256)      512         tf.__operators__.add_2[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "multi_head_attention_1 (MultiHe (None, 66, 256)      263168      layer_normalization_1[0][0]      \n",
            "                                                                 layer_normalization_1[0][0]      \n",
            "                                                                 layer_normalization_1[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "dropout_2 (Dropout)             (None, 66, 256)      0           multi_head_attention_1[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.add_3 (TFOpLam (None, 66, 256)      0           layer_normalization_1[0][0]      \n",
            "                                                                 dropout_2[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "layer_normalization_2 (LayerNor (None, 66, 256)      512         tf.__operators__.add_3[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "dense_2 (Dense)                 (None, 66, 256)      65792       layer_normalization_2[0][0]      \n",
            "__________________________________________________________________________________________________\n",
            "dense_3 (Dense)                 (None, 66, 256)      65792       dense_2[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dropout_3 (Dropout)             (None, 66, 256)      0           dense_3[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "tf.__operators__.add_4 (TFOpLam (None, 66, 256)      0           layer_normalization_2[0][0]      \n",
            "                                                                 dropout_3[0][0]                  \n",
            "__________________________________________________________________________________________________\n",
            "layer_normalization_3 (LayerNor (None, 66, 256)      512         tf.__operators__.add_4[0][0]     \n",
            "__________________________________________________________________________________________________\n",
            "dense_4 (Dense)                 (None, 66, 1130)     290410      layer_normalization_3[0][0]      \n",
            "==================================================================================================\n",
            "Total params: 1,371,242\n",
            "Trainable params: 1,371,242\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n",
            "None\n",
            "Epoch 1/10\n",
            "143/143 [==============================] - 127s 870ms/step - loss: 5.7937\n",
            "Epoch 2/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 4.6416\n",
            "Epoch 3/10\n",
            "143/143 [==============================] - 126s 883ms/step - loss: 3.5153\n",
            "Epoch 4/10\n",
            "143/143 [==============================] - 125s 873ms/step - loss: 2.5483\n",
            "Epoch 5/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 1.6850\n",
            "Epoch 6/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 1.0168\n",
            "Epoch 7/10\n",
            "143/143 [==============================] - 125s 877ms/step - loss: 0.6326\n",
            "Epoch 8/10\n",
            "143/143 [==============================] - 125s 873ms/step - loss: 0.4149\n",
            "Epoch 9/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 0.2834\n",
            "Epoch 10/10\n",
            "143/143 [==============================] - 126s 880ms/step - loss: 0.2040\n",
            "Training execution time (mins) 20.910524022579192\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UUYEitnDOMO3"
      },
      "source": [
        "### **Evaluate**\n",
        "\n",
        "Let us look at what exaclty is the language model predicting."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ugk3-k8SOMr3",
        "outputId": "685d007a-72d1-4918-b57a-b5e502f15d50"
      },
      "source": [
        "sample_tokens = text_vectorizer([\"convolutional [mask] networks have been applied to fields including computer vision\"])\n",
        "sample_tokens = sample_tokens.numpy()\n",
        "print(sample_tokens)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 244 1129   17   44  254  170    5  380  370   40   54    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "     0    0    0    0    0    0    0    0    0    0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V-H7xZOuOQx0"
      },
      "source": [
        "# Make a prediction\n",
        "predictions = model_w_pe.predict(sample_tokens)\n",
        "\n",
        "# Get the first output from the model\n",
        "mask_predictions = predictions[0]\n",
        "encoder_output = predictions[1]"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hntwaau3OS5J",
        "outputId": "1ae6799d-67d3-4df1-c4cd-1d1e3f682003"
      },
      "source": [
        "masked_index = np.where(sample_tokens == mask_token_id)\n",
        "masked_index = masked_index[1]\n",
        "mask_prediction = mask_predictions[0][masked_index]\n",
        "print(\"mask_prediction:\", mask_prediction)\n",
        "\n",
        "top_indices = mask_prediction[0].argsort()[-5 :][::-1]\n",
        "values = mask_prediction[0][top_indices]\n",
        "\n",
        "def decode(tokens):\n",
        "  return \" \".join([index_word[t] for t in tokens if t != 0])\n",
        "\n",
        "for i in range(len(top_indices)):\n",
        "  p = top_indices[i]\n",
        "  v = values[i]\n",
        "  tokens = np.copy(sample_tokens[0])\n",
        "  tokens[masked_index[0]] = p\n",
        "  print(\"Prediction:\",decode(tokens),\"- Probability:\",v, \"- Mask token:\",index_word[p])"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mask_prediction: [[4.02807254e-09 3.36504975e-08 5.23967714e-09 ... 2.05522133e-06\n",
            "  3.68732032e-08 1.27696325e-08]]\n",
            "Prediction: convolutional networks networks have been applied to fields including computer vision - Probability: 0.8604023 - Mask token: networks\n",
            "Prediction: convolutional were networks have been applied to fields including computer vision - Probability: 0.074843526 - Mask token: were\n",
            "Prediction: convolutional ai networks have been applied to fields including computer vision - Probability: 0.03147794 - Mask token: ai\n",
            "Prediction: convolutional or networks have been applied to fields including computer vision - Probability: 0.003195785 - Mask token: or\n",
            "Prediction: convolutional neural networks have been applied to fields including computer vision - Probability: 0.0031564995 - Mask token: neural\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tXZ7hwmtOc0y"
      },
      "source": [
        "### **Train with NO Positional Encoding**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T6qjotpeOdbA",
        "outputId": "e7bd60eb-56d5-4b26-cb18-28cfc1e38349"
      },
      "source": [
        "############################\n",
        "# Training Params\n",
        "############################\n",
        "epochs = 10\n",
        "learning_rate = 0.001\n",
        "embedding_dim = 256\n",
        "sequence_length = max_len\n",
        "num_layers = 2\n",
        "num_heads = 8\n",
        "ff_dim = 256\n",
        "\n",
        "# Free up memory\n",
        "K.clear_session()\n",
        "\n",
        "# Build the model\n",
        "model_no_pe = create_masked_language_bert_model(vocabulary_size,embedding_dim, sequence_length,num_layers,num_heads,ff_dim, enable_pe=False)\n",
        "\n",
        "# Optimizer\n",
        "optimizer = keras.optimizers.Adam(learning_rate=learning_rate)\n",
        "\n",
        "# Compile\n",
        "model_no_pe.compile(optimizer=optimizer)\n",
        "\n",
        "# Train model\n",
        "start_time = time.time()\n",
        "training_results = model_no_pe.fit(\n",
        "        train_data,\n",
        "        epochs=epochs,\n",
        "        verbose=1)\n",
        "execution_time = (time.time() - start_time)/60.0\n",
        "print(\"Training execution time (mins)\",execution_time)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "143/143 [==============================] - 128s 876ms/step - loss: 5.8659\n",
            "Epoch 2/10\n",
            "143/143 [==============================] - 125s 872ms/step - loss: 4.2099\n",
            "Epoch 3/10\n",
            "143/143 [==============================] - 124s 870ms/step - loss: 3.1755\n",
            "Epoch 4/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 2.6924\n",
            "Epoch 5/10\n",
            "143/143 [==============================] - 125s 874ms/step - loss: 2.4065\n",
            "Epoch 6/10\n",
            "143/143 [==============================] - 125s 876ms/step - loss: 2.1758\n",
            "Epoch 7/10\n",
            "143/143 [==============================] - 125s 877ms/step - loss: 1.9950\n",
            "Epoch 8/10\n",
            "143/143 [==============================] - 125s 872ms/step - loss: 1.8559\n",
            "Epoch 9/10\n",
            "143/143 [==============================] - 125s 871ms/step - loss: 1.7486\n",
            "Epoch 10/10\n",
            "143/143 [==============================] - 125s 872ms/step - loss: 1.6759\n",
            "Training execution time (mins) 20.861590536435447\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zx7qJ2H4Ole3"
      },
      "source": [
        "### **Evaluate Postional Encoding**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ePkzRtR7Ol52",
        "outputId": "de171410-058c-4738-afbe-d8bf6821af7d"
      },
      "source": [
        "sample_tokens1 = text_vectorizer([\"pavlos taught positional encoding to shivas\"])\n",
        "sample_tokens1 = sample_tokens1.numpy()\n",
        "print(sample_tokens1)\n",
        "\n",
        "sample_tokens2 = text_vectorizer([\"shivas taught positional encoding to pavlos\"])\n",
        "sample_tokens2 = sample_tokens2.numpy()\n",
        "print(sample_tokens2)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[686 516 671 913   5 569   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0]]\n",
            "[[569 516 671 913   5 686   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n",
            "    0   0   0   0   0   0   0   0   0   0   0   0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_IYXaolOqOf",
        "outputId": "e46f4454-4588-48c1-f91b-54485f49d40a"
      },
      "source": [
        "# Make a prediction on model with pe\n",
        "predictions1 = model_w_pe.predict(sample_tokens1)\n",
        "\n",
        "# Get the second output from the model\n",
        "encoder_output1 = predictions1[1]\n",
        "print(\"encoder_output shape:\",encoder_output1.shape)\n",
        "print(encoder_output1[:,:6,:10])"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "encoder_output shape: (1, 66, 256)\n",
            "[[[-0.5246513  -1.4148      2.4360695   0.18109246 -0.28529295\n",
            "    1.0969348  -0.6597898   1.3101103   1.8054535   0.38613904]\n",
            "  [-0.29248154 -1.6944356   0.13257365  1.2679522  -0.21880502\n",
            "   -0.6975474  -0.0870638  -0.6007647  -0.18499145  0.98396164]\n",
            "  [ 2.1933389  -0.68234843  0.9784966  -1.0520777   1.033069\n",
            "   -0.8253678   4.516056   -2.8515844   3.0040007  -0.0372692 ]\n",
            "  [ 0.35252237 -1.2266605   1.2465748  -4.022191   -0.202049\n",
            "   -0.7520537   3.4767342  -2.084076    1.8309388  -0.7517202 ]\n",
            "  [ 0.08036129  1.8232131   1.4715368  -3.314671    0.42360392\n",
            "    0.37867984 -0.3242465  -1.6824111   0.00495543  0.45591003]\n",
            "  [-0.46004915  1.9646914   0.640684   -1.0743353   1.2014388\n",
            "    0.12545663 -0.40111935 -1.2040968   0.21612233  2.2937963 ]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JhDdxqDRTXk0",
        "outputId": "7ed1eb25-998e-48ec-c47c-663cad9b9e8b"
      },
      "source": [
        "# Make a prediction on model with pe\n",
        "predictions2 = model_w_pe.predict(sample_tokens2)\n",
        "\n",
        "# Get the second output from the model\n",
        "encoder_output2 = predictions2[1]\n",
        "print(\"encoder_output shape:\",encoder_output2.shape)\n",
        "print(encoder_output2[:,:6,:10])"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "encoder_output shape: (1, 66, 256)\n",
            "[[[-0.56282425 -0.37398362  0.9143508  -0.99942887  0.17094693\n",
            "    1.44945    -0.42807174  3.1179116   1.7868702   1.5419998 ]\n",
            "  [-2.8787968  -1.5273198  -1.8377143  -0.39979696  0.89370733\n",
            "    1.6472256  -0.3572682   0.64689994  0.5910641   2.3080583 ]\n",
            "  [ 4.5261016  -1.7432227  -0.40208167 -3.412392    3.6799495\n",
            "   -1.1391723   2.5594602  -1.3695285   3.4517162   0.08981693]\n",
            "  [ 0.8687216  -4.3430266   0.8198559  -5.2271276   0.33220887\n",
            "   -3.233263    3.3498228  -2.5516894   2.8687356  -1.9730374 ]\n",
            "  [-3.3114238   0.23121396 -1.0878549  -4.64416     0.1165459\n",
            "   -0.670736   -1.2975407  -3.1562493   0.41120046 -0.94076943]\n",
            "  [-5.374191    0.30782017 -4.3353863  -1.8440819  -0.01870556\n",
            "   -1.7275656  -2.4623075  -1.8943458  -1.1614938  -0.62775993]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8fIJXC9zTqCF",
        "outputId": "9184b702-99da-4712-8ad8-abaa68b502ca"
      },
      "source": [
        "# Make a prediction on model without pe\n",
        "predictions3 = model_no_pe.predict(sample_tokens1)\n",
        "\n",
        "# Get the second output from the model\n",
        "encoder_output3 = predictions3[1]\n",
        "print(\"encoder_output shape:\",encoder_output3.shape)\n",
        "print(encoder_output3[:,:6,:10])"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "encoder_output shape: (1, 66, 256)\n",
            "[[[-0.03209928  0.68168175 -1.5825438  -2.5832224   0.4955348\n",
            "    0.48680615  0.16487107 -0.19007911  1.3275813  -0.30035347]\n",
            "  [-0.11713668  0.42059946 -2.520322   -1.1835684   0.195108\n",
            "    0.24005482 -1.4002932  -1.4046297  -0.23848444  0.3837928 ]\n",
            "  [ 0.5003081   0.2492835  -0.8094313  -1.5947437   2.4495676\n",
            "    0.6930185   0.9870634  -1.2392002  -1.4726596   1.7183204 ]\n",
            "  [-0.5274048  -2.1464496  -1.8480319  -1.4731182   0.1126432\n",
            "   -1.5234904  -1.5618027   0.36495173  0.04311258  1.7619013 ]\n",
            "  [-0.4698931   1.3999718  -2.93414    -2.4048123   0.18449478\n",
            "    0.85698533 -1.4570557  -0.67249787  0.9933041   0.57962334]\n",
            "  [ 0.59668267  0.25934488 -1.1342949  -2.2415469   0.7648588\n",
            "    0.5091696  -1.1315584   0.01400721 -0.528243   -0.3171308 ]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jbzW0VY6T08T",
        "outputId": "6102916c-6766-41b4-8e3c-514238bc5b6a"
      },
      "source": [
        "# Make a prediction on model without pe\n",
        "predictions4 = model_no_pe.predict(sample_tokens2)\n",
        "\n",
        "# Get the second output from the model\n",
        "encoder_output4 = predictions4[1]\n",
        "print(\"encoder_output shape:\",encoder_output4.shape)\n",
        "print(encoder_output4[:,:6,:10])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "encoder_output shape: (1, 66, 256)\n",
            "[[[ 0.59668255  0.25934428 -1.1342949  -2.2415476   0.76485896\n",
            "    0.50917    -1.1315589   0.01400714 -0.5282433  -0.3171306 ]\n",
            "  [-0.11713661  0.42059946 -2.520322   -1.1835688   0.19510822\n",
            "    0.24005441 -1.400293   -1.4046291  -0.23848428  0.38379204]\n",
            "  [ 0.50030816  0.24928322 -0.8094312  -1.5947442   2.4495683\n",
            "    0.6930185   0.9870634  -1.2392     -1.4726596   1.7183204 ]\n",
            "  [-0.5274049  -2.1464505  -1.8480324  -1.4731193   0.11264288\n",
            "   -1.5234902  -1.5618031   0.36495188  0.04311167  1.7619015 ]\n",
            "  [-0.46989337  1.3999724  -2.9341397  -2.4048123   0.18449481\n",
            "    0.8569854  -1.4570559  -0.6724977   0.9933045   0.57962257]\n",
            "  [-0.03209894  0.6816822  -1.5825441  -2.5832229   0.4955349\n",
            "    0.486806    0.16487104 -0.1900789   1.3275807  -0.3003537 ]]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4W0FUJMgVP3k"
      },
      "source": [
        "Check if the word `pavlos` & `shivas` have the same represenation in the two sentences:\n",
        "\n",
        "* pavlos taught positional encoding to shivas\n",
        "* shivas taught positional encoding to pavlos"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a-xvWywwURdi",
        "outputId": "9ad0ae0b-1353-4897-aff0-d84a21cbd94b"
      },
      "source": [
        "print(\"Model with Postional Encoding:\")\n",
        "print(\"pavlos:\",np.array_equal(encoder_output1[0,1], encoder_output2[0,6]))\n",
        "print(\"shivas:\",np.array_equal(encoder_output1[0,6], encoder_output2[0,1]))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model with Postional Encoding:\n",
            "pavlos: False\n",
            "shivas: False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Fxu-EkyW35Q",
        "outputId": "f34e9b76-4a51-4a6d-eadf-035110bfa1cc"
      },
      "source": [
        "print(\"Model without Postional Encoding:\")\n",
        "print(\"pavlos:\",np.array_equal(encoder_output3[0,1], encoder_output4[0,6]))\n",
        "print(\"shivas:\",np.array_equal(encoder_output3[0,6], encoder_output4[0,1]))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model without Postional Encoding:\n",
            "pavlos: False\n",
            "shivas: False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2R0BT3S0XIOf",
        "outputId": "591ed769-d8a6-416c-ac53-c975398f0024"
      },
      "source": [
        "# Generate postional encodings\n",
        "positional_encodings = generate_positional_encoding(sequence_length, embedding_dim)\n",
        "print(positional_encodings.shape)\n",
        "print(positional_encodings)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(66, 256)\n",
            "[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n",
            "   0.00000000e+00  0.00000000e+00]\n",
            " [ 8.41470985e-01  5.40302306e-01  8.01961795e-01 ...  9.99999993e-01\n",
            "   1.07460783e-04  9.99999994e-01]\n",
            " [ 9.09297427e-01 -4.16146837e-01  9.58144376e-01 ...  9.99999973e-01\n",
            "   2.14921564e-04  9.99999977e-01]\n",
            " ...\n",
            " [ 1.67355700e-01  9.85896582e-01  8.74411641e-01 ...  9.99973536e-01\n",
            "   6.76997760e-03  9.99977083e-01]\n",
            " [ 9.20026038e-01  3.91857230e-01  1.33252272e-01 ...  9.99972690e-01\n",
            "   6.87743588e-03  9.99976350e-01]\n",
            " [ 8.26828679e-01 -5.62453851e-01 -7.15208402e-01 ...  9.99971829e-01\n",
            "   6.98489409e-03  9.99975605e-01]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FAv4dZ6wXiW4",
        "outputId": "27c7286d-1cd8-467e-fe9f-7e01c7d807e6"
      },
      "source": [
        "# Lets compute the dot product of postion 1 with every other postions\n",
        "dot_results = []\n",
        "for idx in range(positional_encodings.shape[0]):\n",
        "  dot_results.append(np.dot(positional_encodings[1], positional_encodings[idx]))\n",
        "\n",
        "print(dot_results)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.0, 128.0, 124.43234098476238, 115.50458977748838, 105.37530500340779, 97.94432545559212, 94.64087821013749, 94.121753245165, 93.8502393543588, 92.1603436710688, 89.23354145966026, 86.45969701475562, 84.97779496123833, 84.71380122208555, 84.62470321154319, 83.75035476597505, 82.04664798383486, 80.29800792898595, 79.29890211031581, 79.11922964091144, 79.10703240790198, 78.55346942361555, 77.3515771121203, 76.04380078512345, 75.26274752602393, 75.12855087097213, 75.16680406977767, 74.79025407777927, 73.85903606549182, 72.78840446272093, 72.12573743447207, 72.02189567898664, 72.10231898291606, 71.84393109501454, 71.0803987241784, 70.14978541628656, 69.55469547587421, 69.47361432779485, 69.59533514834825, 69.42819412338986, 68.77776564229198, 67.93050868710183, 67.37044256968206, 67.30742171219089, 67.47434152196888, 67.38786488057734, 66.81870283497449, 66.01541960808856, 65.46408376081149, 65.41511922156263, 65.63574154519917, 65.63109818358849, 65.12448770529708, 64.33240220944225, 63.762485087642034, 63.7220284740318, 64.01052961673213, 64.10148294253764, 63.6493942606079, 62.836018436763126, 62.21157016575874, 62.1680229535507, 62.54583400890072, 62.76477710843426, 62.37416611808748, 61.503670377845246]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "Z3m33-MzX4SH",
        "outputId": "89d36b0a-1bfb-4efb-b77e-0ed07842eb56"
      },
      "source": [
        "# Plot the dot product results\n",
        "fig = plt.figure(figsize=(20,5))\n",
        "axs = fig.add_subplot(1,3,1)\n",
        "axs.plot(np.arange(0, positional_encodings.shape[0]), dot_results)\n",
        "axs.set_xlabel('Positions')\n",
        "axs.set_ylabel('Dot product of positions')\n",
        "plt.show()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Robr8-OfOwaF"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZAqRparV76iQ"
      },
      "source": [
        "## **References** <div id='references'>\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H26UyCa977Q3"
      },
      "source": [
        "#### **Lecture Notes**\n",
        "\n",
        "- [AC295: Advanced Practical Data Science - Attention and Transformers](https://harvard-iacs.github.io/2020F-AC295/lectures/lecture8/presentation/lecture8.pdf)\n",
        "- [CS224n: Natural Language Processing with Deep Learning - Self-Attention For Generative Models](http://web.stanford.edu/class/cs224n/slides/cs224n-2019-lecture14-transformers.pdf)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WjfHOix18UeB"
      },
      "source": [
        "#### **Research Papers**\n",
        "\n",
        "- [Sequence To Sequence Learning](https://arxiv.org/abs/1409.3215)\n",
        "- [Attention is all you need](https://arxiv.org/pdf/1706.03762.pdf)\n",
        "- [Luong Attention](https://arxiv.org/abs/1508.04025)\n",
        "- [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/abs/1810.04805)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g_jAORIT8IRH"
      },
      "source": [
        "#### **Code**\n",
        "\n",
        "- [Neural Machine Translation (seq2seq) Tutorial](https://github.com/tensorflow/nmt)\n",
        "- [Neural machine translation with attention](https://www.tensorflow.org/tutorials/text/nmt_with_attention)\n",
        "- [Text classification from scratch](https://keras.io/examples/nlp/text_classification_from_scratch/)\n",
        "- [Text classification with Transformer](https://keras.io/examples/nlp/text_classification_with_transformer/)\n",
        "- [End-to-end Masked Language Modeling with BERT](https://keras.io/examples/nlp/masked_language_modeling/)\n",
        "- [Keras MultiHeadAttention Layer](https://github.com/tensorflow/tensorflow/blob/v2.4.1/tensorflow/python/keras/layers/multi_head_attention.py)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dY2rGkDk8NWJ"
      },
      "source": [
        "#### **Articles**\n",
        "\n",
        "- [Illustrated Guide to LSTM’s and GRU’s: A step by step explanation](https://towardsdatascience.com/illustrated-guide-to-lstms-and-gru-s-a-step-by-step-explanation-44e9eb85bf21)\n",
        "- [Attn: Illustrated Attention](https://towardsdatascience.com/attn-illustrated-attention-5ec4ad276ee3)\n",
        "- [Visualizing A Neural Machine Translation Model](http://jalammar.github.io/visualizing-neural-machine-translation-mechanics-of-seq2seq-models-with-attention/)\n",
        "- [The Illustrated Transformer](http://jalammar.github.io/illustrated-transformer/)\n",
        "- [Attention: Sequence 2 Sequence model with Attention Mechanism](https://towardsdatascience.com/sequence-2-sequence-model-with-attention-mechanism-9e9ca2a613a)"
      ]
    }
  ]
}