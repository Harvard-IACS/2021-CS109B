{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Title :\n",
    "Bayes - Exercise 2\n",
    "\n",
    "## Description :\n",
    "Model $y$ as a least-squares regression as $y = \\alpha + \\beta \\cdot x + \\epsilon$ \n",
    "\n",
    "After completing this exercise you should see following trace plots:   \n",
    "\n",
    "<img src=\"../fig/fig2.png\" style=\"width: 500px;\">\n",
    "\n",
    "\n",
    "## Hints: \n",
    "\n",
    "<a href=\"https://docs.pymc.io/api/distributions/continuous.html#pymc3.distributions.continuous.Normal\" target=\"_blank\">pymc3 Normal</a>\n",
    "\n",
    "Refer to lecture notebook.\n",
    "\n",
    "Do not change any other code except the blanks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install xarray==0.16.0 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import pymc3 as pm\n",
    "\n",
    "from matplotlib import pyplot\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('data3.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {},
   "outputs": [],
   "source": [
    "### edTest(test_pm_model) ###\n",
    "np.random.seed(109)\n",
    "with pm.Model() as model:\n",
    "    # prior\n",
    "    alpha = pm.Normal('alpha', mu=0, tau=1000)\n",
    "    beta = pm.Normal('beta', mu=0, tau=1000)\n",
    "    \n",
    "    # likelihood\n",
    "    # Next statement creates the expected value of mu_vec of the \n",
    "    # outcomes, specifying the linear relationship.\n",
    "    # mu_vec is just the sum of the intercept alpha and the product of\n",
    "    # the coefficient  beta and the predictor variable. \n",
    "    mu_vec = pm.Deterministic('mu_vec', ____) \n",
    "    \n",
    "    tau_obs = pm.Gamma('tau_obs', 0.001, 0.001)\n",
    "    obs = pm.Normal(_______)  #Parameters to set: name, mu, tau, observed\n",
    "    trace = pm.sample(2000, tune=2000, chains=2)\n",
    "    pm.traceplot(trace, var_names=['alpha','beta','tau_obs'], compact=False);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {},
   "outputs": [],
   "source": [
    "#posterior means\n",
    "np.mean(trace['alpha']),np.mean(trace['beta']), np.mean(trace['tau_obs'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
